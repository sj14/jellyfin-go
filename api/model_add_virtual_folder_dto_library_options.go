/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AddVirtualFolderDtoLibraryOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddVirtualFolderDtoLibraryOptions{}

// AddVirtualFolderDtoLibraryOptions Gets or sets library options.
type AddVirtualFolderDtoLibraryOptions struct {
	Enabled *bool `json:"Enabled,omitempty"`
	EnablePhotos *bool `json:"EnablePhotos,omitempty"`
	EnableRealtimeMonitor *bool `json:"EnableRealtimeMonitor,omitempty"`
	EnableLUFSScan *bool `json:"EnableLUFSScan,omitempty"`
	EnableChapterImageExtraction *bool `json:"EnableChapterImageExtraction,omitempty"`
	ExtractChapterImagesDuringLibraryScan *bool `json:"ExtractChapterImagesDuringLibraryScan,omitempty"`
	EnableTrickplayImageExtraction *bool `json:"EnableTrickplayImageExtraction,omitempty"`
	ExtractTrickplayImagesDuringLibraryScan *bool `json:"ExtractTrickplayImagesDuringLibraryScan,omitempty"`
	PathInfos []MediaPathInfo `json:"PathInfos,omitempty"`
	SaveLocalMetadata *bool `json:"SaveLocalMetadata,omitempty"`
	// Deprecated
	EnableInternetProviders *bool `json:"EnableInternetProviders,omitempty"`
	EnableAutomaticSeriesGrouping *bool `json:"EnableAutomaticSeriesGrouping,omitempty"`
	EnableEmbeddedTitles *bool `json:"EnableEmbeddedTitles,omitempty"`
	EnableEmbeddedExtrasTitles *bool `json:"EnableEmbeddedExtrasTitles,omitempty"`
	EnableEmbeddedEpisodeInfos *bool `json:"EnableEmbeddedEpisodeInfos,omitempty"`
	AutomaticRefreshIntervalDays *int32 `json:"AutomaticRefreshIntervalDays,omitempty"`
	// Gets or sets the preferred metadata language.
	PreferredMetadataLanguage NullableString `json:"PreferredMetadataLanguage,omitempty"`
	// Gets or sets the metadata country code.
	MetadataCountryCode NullableString `json:"MetadataCountryCode,omitempty"`
	SeasonZeroDisplayName *string `json:"SeasonZeroDisplayName,omitempty"`
	MetadataSavers []string `json:"MetadataSavers,omitempty"`
	DisabledLocalMetadataReaders []string `json:"DisabledLocalMetadataReaders,omitempty"`
	LocalMetadataReaderOrder []string `json:"LocalMetadataReaderOrder,omitempty"`
	DisabledSubtitleFetchers []string `json:"DisabledSubtitleFetchers,omitempty"`
	SubtitleFetcherOrder []string `json:"SubtitleFetcherOrder,omitempty"`
	SkipSubtitlesIfEmbeddedSubtitlesPresent *bool `json:"SkipSubtitlesIfEmbeddedSubtitlesPresent,omitempty"`
	SkipSubtitlesIfAudioTrackMatches *bool `json:"SkipSubtitlesIfAudioTrackMatches,omitempty"`
	SubtitleDownloadLanguages []string `json:"SubtitleDownloadLanguages,omitempty"`
	RequirePerfectSubtitleMatch *bool `json:"RequirePerfectSubtitleMatch,omitempty"`
	SaveSubtitlesWithMedia *bool `json:"SaveSubtitlesWithMedia,omitempty"`
	SaveLyricsWithMedia *bool `json:"SaveLyricsWithMedia,omitempty"`
	AutomaticallyAddToCollection *bool `json:"AutomaticallyAddToCollection,omitempty"`
	// An enum representing the options to disable embedded subs.
	AllowEmbeddedSubtitles *EmbeddedSubtitleOptions `json:"AllowEmbeddedSubtitles,omitempty"`
	TypeOptions []TypeOptions `json:"TypeOptions,omitempty"`
}

// NewAddVirtualFolderDtoLibraryOptions instantiates a new AddVirtualFolderDtoLibraryOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddVirtualFolderDtoLibraryOptions() *AddVirtualFolderDtoLibraryOptions {
	this := AddVirtualFolderDtoLibraryOptions{}
	var saveLyricsWithMedia bool = false
	this.SaveLyricsWithMedia = &saveLyricsWithMedia
	return &this
}

// NewAddVirtualFolderDtoLibraryOptionsWithDefaults instantiates a new AddVirtualFolderDtoLibraryOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddVirtualFolderDtoLibraryOptionsWithDefaults() *AddVirtualFolderDtoLibraryOptions {
	this := AddVirtualFolderDtoLibraryOptions{}
	var saveLyricsWithMedia bool = false
	this.SaveLyricsWithMedia = &saveLyricsWithMedia
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEnablePhotos returns the EnablePhotos field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnablePhotos() bool {
	if o == nil || IsNil(o.EnablePhotos) {
		var ret bool
		return ret
	}
	return *o.EnablePhotos
}

// GetEnablePhotosOk returns a tuple with the EnablePhotos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnablePhotosOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePhotos) {
		return nil, false
	}
	return o.EnablePhotos, true
}

// HasEnablePhotos returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnablePhotos() bool {
	if o != nil && !IsNil(o.EnablePhotos) {
		return true
	}

	return false
}

// SetEnablePhotos gets a reference to the given bool and assigns it to the EnablePhotos field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnablePhotos(v bool) {
	o.EnablePhotos = &v
}

// GetEnableRealtimeMonitor returns the EnableRealtimeMonitor field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableRealtimeMonitor() bool {
	if o == nil || IsNil(o.EnableRealtimeMonitor) {
		var ret bool
		return ret
	}
	return *o.EnableRealtimeMonitor
}

// GetEnableRealtimeMonitorOk returns a tuple with the EnableRealtimeMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableRealtimeMonitorOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRealtimeMonitor) {
		return nil, false
	}
	return o.EnableRealtimeMonitor, true
}

// HasEnableRealtimeMonitor returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableRealtimeMonitor() bool {
	if o != nil && !IsNil(o.EnableRealtimeMonitor) {
		return true
	}

	return false
}

// SetEnableRealtimeMonitor gets a reference to the given bool and assigns it to the EnableRealtimeMonitor field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableRealtimeMonitor(v bool) {
	o.EnableRealtimeMonitor = &v
}

// GetEnableLUFSScan returns the EnableLUFSScan field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableLUFSScan() bool {
	if o == nil || IsNil(o.EnableLUFSScan) {
		var ret bool
		return ret
	}
	return *o.EnableLUFSScan
}

// GetEnableLUFSScanOk returns a tuple with the EnableLUFSScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableLUFSScanOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLUFSScan) {
		return nil, false
	}
	return o.EnableLUFSScan, true
}

// HasEnableLUFSScan returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableLUFSScan() bool {
	if o != nil && !IsNil(o.EnableLUFSScan) {
		return true
	}

	return false
}

// SetEnableLUFSScan gets a reference to the given bool and assigns it to the EnableLUFSScan field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableLUFSScan(v bool) {
	o.EnableLUFSScan = &v
}

// GetEnableChapterImageExtraction returns the EnableChapterImageExtraction field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableChapterImageExtraction() bool {
	if o == nil || IsNil(o.EnableChapterImageExtraction) {
		var ret bool
		return ret
	}
	return *o.EnableChapterImageExtraction
}

// GetEnableChapterImageExtractionOk returns a tuple with the EnableChapterImageExtraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableChapterImageExtractionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableChapterImageExtraction) {
		return nil, false
	}
	return o.EnableChapterImageExtraction, true
}

// HasEnableChapterImageExtraction returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableChapterImageExtraction() bool {
	if o != nil && !IsNil(o.EnableChapterImageExtraction) {
		return true
	}

	return false
}

// SetEnableChapterImageExtraction gets a reference to the given bool and assigns it to the EnableChapterImageExtraction field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableChapterImageExtraction(v bool) {
	o.EnableChapterImageExtraction = &v
}

// GetExtractChapterImagesDuringLibraryScan returns the ExtractChapterImagesDuringLibraryScan field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetExtractChapterImagesDuringLibraryScan() bool {
	if o == nil || IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		var ret bool
		return ret
	}
	return *o.ExtractChapterImagesDuringLibraryScan
}

// GetExtractChapterImagesDuringLibraryScanOk returns a tuple with the ExtractChapterImagesDuringLibraryScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetExtractChapterImagesDuringLibraryScanOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		return nil, false
	}
	return o.ExtractChapterImagesDuringLibraryScan, true
}

// HasExtractChapterImagesDuringLibraryScan returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasExtractChapterImagesDuringLibraryScan() bool {
	if o != nil && !IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		return true
	}

	return false
}

// SetExtractChapterImagesDuringLibraryScan gets a reference to the given bool and assigns it to the ExtractChapterImagesDuringLibraryScan field.
func (o *AddVirtualFolderDtoLibraryOptions) SetExtractChapterImagesDuringLibraryScan(v bool) {
	o.ExtractChapterImagesDuringLibraryScan = &v
}

// GetEnableTrickplayImageExtraction returns the EnableTrickplayImageExtraction field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableTrickplayImageExtraction() bool {
	if o == nil || IsNil(o.EnableTrickplayImageExtraction) {
		var ret bool
		return ret
	}
	return *o.EnableTrickplayImageExtraction
}

// GetEnableTrickplayImageExtractionOk returns a tuple with the EnableTrickplayImageExtraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableTrickplayImageExtractionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTrickplayImageExtraction) {
		return nil, false
	}
	return o.EnableTrickplayImageExtraction, true
}

// HasEnableTrickplayImageExtraction returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableTrickplayImageExtraction() bool {
	if o != nil && !IsNil(o.EnableTrickplayImageExtraction) {
		return true
	}

	return false
}

// SetEnableTrickplayImageExtraction gets a reference to the given bool and assigns it to the EnableTrickplayImageExtraction field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableTrickplayImageExtraction(v bool) {
	o.EnableTrickplayImageExtraction = &v
}

// GetExtractTrickplayImagesDuringLibraryScan returns the ExtractTrickplayImagesDuringLibraryScan field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetExtractTrickplayImagesDuringLibraryScan() bool {
	if o == nil || IsNil(o.ExtractTrickplayImagesDuringLibraryScan) {
		var ret bool
		return ret
	}
	return *o.ExtractTrickplayImagesDuringLibraryScan
}

// GetExtractTrickplayImagesDuringLibraryScanOk returns a tuple with the ExtractTrickplayImagesDuringLibraryScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetExtractTrickplayImagesDuringLibraryScanOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtractTrickplayImagesDuringLibraryScan) {
		return nil, false
	}
	return o.ExtractTrickplayImagesDuringLibraryScan, true
}

// HasExtractTrickplayImagesDuringLibraryScan returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasExtractTrickplayImagesDuringLibraryScan() bool {
	if o != nil && !IsNil(o.ExtractTrickplayImagesDuringLibraryScan) {
		return true
	}

	return false
}

// SetExtractTrickplayImagesDuringLibraryScan gets a reference to the given bool and assigns it to the ExtractTrickplayImagesDuringLibraryScan field.
func (o *AddVirtualFolderDtoLibraryOptions) SetExtractTrickplayImagesDuringLibraryScan(v bool) {
	o.ExtractTrickplayImagesDuringLibraryScan = &v
}

// GetPathInfos returns the PathInfos field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetPathInfos() []MediaPathInfo {
	if o == nil || IsNil(o.PathInfos) {
		var ret []MediaPathInfo
		return ret
	}
	return o.PathInfos
}

// GetPathInfosOk returns a tuple with the PathInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetPathInfosOk() ([]MediaPathInfo, bool) {
	if o == nil || IsNil(o.PathInfos) {
		return nil, false
	}
	return o.PathInfos, true
}

// HasPathInfos returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasPathInfos() bool {
	if o != nil && !IsNil(o.PathInfos) {
		return true
	}

	return false
}

// SetPathInfos gets a reference to the given []MediaPathInfo and assigns it to the PathInfos field.
func (o *AddVirtualFolderDtoLibraryOptions) SetPathInfos(v []MediaPathInfo) {
	o.PathInfos = v
}

// GetSaveLocalMetadata returns the SaveLocalMetadata field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetSaveLocalMetadata() bool {
	if o == nil || IsNil(o.SaveLocalMetadata) {
		var ret bool
		return ret
	}
	return *o.SaveLocalMetadata
}

// GetSaveLocalMetadataOk returns a tuple with the SaveLocalMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetSaveLocalMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveLocalMetadata) {
		return nil, false
	}
	return o.SaveLocalMetadata, true
}

// HasSaveLocalMetadata returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasSaveLocalMetadata() bool {
	if o != nil && !IsNil(o.SaveLocalMetadata) {
		return true
	}

	return false
}

// SetSaveLocalMetadata gets a reference to the given bool and assigns it to the SaveLocalMetadata field.
func (o *AddVirtualFolderDtoLibraryOptions) SetSaveLocalMetadata(v bool) {
	o.SaveLocalMetadata = &v
}

// GetEnableInternetProviders returns the EnableInternetProviders field value if set, zero value otherwise.
// Deprecated
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableInternetProviders() bool {
	if o == nil || IsNil(o.EnableInternetProviders) {
		var ret bool
		return ret
	}
	return *o.EnableInternetProviders
}

// GetEnableInternetProvidersOk returns a tuple with the EnableInternetProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableInternetProvidersOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableInternetProviders) {
		return nil, false
	}
	return o.EnableInternetProviders, true
}

// HasEnableInternetProviders returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableInternetProviders() bool {
	if o != nil && !IsNil(o.EnableInternetProviders) {
		return true
	}

	return false
}

// SetEnableInternetProviders gets a reference to the given bool and assigns it to the EnableInternetProviders field.
// Deprecated
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableInternetProviders(v bool) {
	o.EnableInternetProviders = &v
}

// GetEnableAutomaticSeriesGrouping returns the EnableAutomaticSeriesGrouping field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableAutomaticSeriesGrouping() bool {
	if o == nil || IsNil(o.EnableAutomaticSeriesGrouping) {
		var ret bool
		return ret
	}
	return *o.EnableAutomaticSeriesGrouping
}

// GetEnableAutomaticSeriesGroupingOk returns a tuple with the EnableAutomaticSeriesGrouping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableAutomaticSeriesGroupingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAutomaticSeriesGrouping) {
		return nil, false
	}
	return o.EnableAutomaticSeriesGrouping, true
}

// HasEnableAutomaticSeriesGrouping returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableAutomaticSeriesGrouping() bool {
	if o != nil && !IsNil(o.EnableAutomaticSeriesGrouping) {
		return true
	}

	return false
}

// SetEnableAutomaticSeriesGrouping gets a reference to the given bool and assigns it to the EnableAutomaticSeriesGrouping field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableAutomaticSeriesGrouping(v bool) {
	o.EnableAutomaticSeriesGrouping = &v
}

// GetEnableEmbeddedTitles returns the EnableEmbeddedTitles field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableEmbeddedTitles() bool {
	if o == nil || IsNil(o.EnableEmbeddedTitles) {
		var ret bool
		return ret
	}
	return *o.EnableEmbeddedTitles
}

// GetEnableEmbeddedTitlesOk returns a tuple with the EnableEmbeddedTitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableEmbeddedTitlesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmbeddedTitles) {
		return nil, false
	}
	return o.EnableEmbeddedTitles, true
}

// HasEnableEmbeddedTitles returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableEmbeddedTitles() bool {
	if o != nil && !IsNil(o.EnableEmbeddedTitles) {
		return true
	}

	return false
}

// SetEnableEmbeddedTitles gets a reference to the given bool and assigns it to the EnableEmbeddedTitles field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableEmbeddedTitles(v bool) {
	o.EnableEmbeddedTitles = &v
}

// GetEnableEmbeddedExtrasTitles returns the EnableEmbeddedExtrasTitles field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableEmbeddedExtrasTitles() bool {
	if o == nil || IsNil(o.EnableEmbeddedExtrasTitles) {
		var ret bool
		return ret
	}
	return *o.EnableEmbeddedExtrasTitles
}

// GetEnableEmbeddedExtrasTitlesOk returns a tuple with the EnableEmbeddedExtrasTitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableEmbeddedExtrasTitlesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmbeddedExtrasTitles) {
		return nil, false
	}
	return o.EnableEmbeddedExtrasTitles, true
}

// HasEnableEmbeddedExtrasTitles returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableEmbeddedExtrasTitles() bool {
	if o != nil && !IsNil(o.EnableEmbeddedExtrasTitles) {
		return true
	}

	return false
}

// SetEnableEmbeddedExtrasTitles gets a reference to the given bool and assigns it to the EnableEmbeddedExtrasTitles field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableEmbeddedExtrasTitles(v bool) {
	o.EnableEmbeddedExtrasTitles = &v
}

// GetEnableEmbeddedEpisodeInfos returns the EnableEmbeddedEpisodeInfos field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableEmbeddedEpisodeInfos() bool {
	if o == nil || IsNil(o.EnableEmbeddedEpisodeInfos) {
		var ret bool
		return ret
	}
	return *o.EnableEmbeddedEpisodeInfos
}

// GetEnableEmbeddedEpisodeInfosOk returns a tuple with the EnableEmbeddedEpisodeInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetEnableEmbeddedEpisodeInfosOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmbeddedEpisodeInfos) {
		return nil, false
	}
	return o.EnableEmbeddedEpisodeInfos, true
}

// HasEnableEmbeddedEpisodeInfos returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasEnableEmbeddedEpisodeInfos() bool {
	if o != nil && !IsNil(o.EnableEmbeddedEpisodeInfos) {
		return true
	}

	return false
}

// SetEnableEmbeddedEpisodeInfos gets a reference to the given bool and assigns it to the EnableEmbeddedEpisodeInfos field.
func (o *AddVirtualFolderDtoLibraryOptions) SetEnableEmbeddedEpisodeInfos(v bool) {
	o.EnableEmbeddedEpisodeInfos = &v
}

// GetAutomaticRefreshIntervalDays returns the AutomaticRefreshIntervalDays field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetAutomaticRefreshIntervalDays() int32 {
	if o == nil || IsNil(o.AutomaticRefreshIntervalDays) {
		var ret int32
		return ret
	}
	return *o.AutomaticRefreshIntervalDays
}

// GetAutomaticRefreshIntervalDaysOk returns a tuple with the AutomaticRefreshIntervalDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetAutomaticRefreshIntervalDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.AutomaticRefreshIntervalDays) {
		return nil, false
	}
	return o.AutomaticRefreshIntervalDays, true
}

// HasAutomaticRefreshIntervalDays returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasAutomaticRefreshIntervalDays() bool {
	if o != nil && !IsNil(o.AutomaticRefreshIntervalDays) {
		return true
	}

	return false
}

// SetAutomaticRefreshIntervalDays gets a reference to the given int32 and assigns it to the AutomaticRefreshIntervalDays field.
func (o *AddVirtualFolderDtoLibraryOptions) SetAutomaticRefreshIntervalDays(v int32) {
	o.AutomaticRefreshIntervalDays = &v
}

// GetPreferredMetadataLanguage returns the PreferredMetadataLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddVirtualFolderDtoLibraryOptions) GetPreferredMetadataLanguage() string {
	if o == nil || IsNil(o.PreferredMetadataLanguage.Get()) {
		var ret string
		return ret
	}
	return *o.PreferredMetadataLanguage.Get()
}

// GetPreferredMetadataLanguageOk returns a tuple with the PreferredMetadataLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddVirtualFolderDtoLibraryOptions) GetPreferredMetadataLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredMetadataLanguage.Get(), o.PreferredMetadataLanguage.IsSet()
}

// HasPreferredMetadataLanguage returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasPreferredMetadataLanguage() bool {
	if o != nil && o.PreferredMetadataLanguage.IsSet() {
		return true
	}

	return false
}

// SetPreferredMetadataLanguage gets a reference to the given NullableString and assigns it to the PreferredMetadataLanguage field.
func (o *AddVirtualFolderDtoLibraryOptions) SetPreferredMetadataLanguage(v string) {
	o.PreferredMetadataLanguage.Set(&v)
}
// SetPreferredMetadataLanguageNil sets the value for PreferredMetadataLanguage to be an explicit nil
func (o *AddVirtualFolderDtoLibraryOptions) SetPreferredMetadataLanguageNil() {
	o.PreferredMetadataLanguage.Set(nil)
}

// UnsetPreferredMetadataLanguage ensures that no value is present for PreferredMetadataLanguage, not even an explicit nil
func (o *AddVirtualFolderDtoLibraryOptions) UnsetPreferredMetadataLanguage() {
	o.PreferredMetadataLanguage.Unset()
}

// GetMetadataCountryCode returns the MetadataCountryCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddVirtualFolderDtoLibraryOptions) GetMetadataCountryCode() string {
	if o == nil || IsNil(o.MetadataCountryCode.Get()) {
		var ret string
		return ret
	}
	return *o.MetadataCountryCode.Get()
}

// GetMetadataCountryCodeOk returns a tuple with the MetadataCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddVirtualFolderDtoLibraryOptions) GetMetadataCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataCountryCode.Get(), o.MetadataCountryCode.IsSet()
}

// HasMetadataCountryCode returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasMetadataCountryCode() bool {
	if o != nil && o.MetadataCountryCode.IsSet() {
		return true
	}

	return false
}

// SetMetadataCountryCode gets a reference to the given NullableString and assigns it to the MetadataCountryCode field.
func (o *AddVirtualFolderDtoLibraryOptions) SetMetadataCountryCode(v string) {
	o.MetadataCountryCode.Set(&v)
}
// SetMetadataCountryCodeNil sets the value for MetadataCountryCode to be an explicit nil
func (o *AddVirtualFolderDtoLibraryOptions) SetMetadataCountryCodeNil() {
	o.MetadataCountryCode.Set(nil)
}

// UnsetMetadataCountryCode ensures that no value is present for MetadataCountryCode, not even an explicit nil
func (o *AddVirtualFolderDtoLibraryOptions) UnsetMetadataCountryCode() {
	o.MetadataCountryCode.Unset()
}

// GetSeasonZeroDisplayName returns the SeasonZeroDisplayName field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetSeasonZeroDisplayName() string {
	if o == nil || IsNil(o.SeasonZeroDisplayName) {
		var ret string
		return ret
	}
	return *o.SeasonZeroDisplayName
}

// GetSeasonZeroDisplayNameOk returns a tuple with the SeasonZeroDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetSeasonZeroDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonZeroDisplayName) {
		return nil, false
	}
	return o.SeasonZeroDisplayName, true
}

// HasSeasonZeroDisplayName returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasSeasonZeroDisplayName() bool {
	if o != nil && !IsNil(o.SeasonZeroDisplayName) {
		return true
	}

	return false
}

// SetSeasonZeroDisplayName gets a reference to the given string and assigns it to the SeasonZeroDisplayName field.
func (o *AddVirtualFolderDtoLibraryOptions) SetSeasonZeroDisplayName(v string) {
	o.SeasonZeroDisplayName = &v
}

// GetMetadataSavers returns the MetadataSavers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddVirtualFolderDtoLibraryOptions) GetMetadataSavers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MetadataSavers
}

// GetMetadataSaversOk returns a tuple with the MetadataSavers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddVirtualFolderDtoLibraryOptions) GetMetadataSaversOk() ([]string, bool) {
	if o == nil || IsNil(o.MetadataSavers) {
		return nil, false
	}
	return o.MetadataSavers, true
}

// HasMetadataSavers returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasMetadataSavers() bool {
	if o != nil && !IsNil(o.MetadataSavers) {
		return true
	}

	return false
}

// SetMetadataSavers gets a reference to the given []string and assigns it to the MetadataSavers field.
func (o *AddVirtualFolderDtoLibraryOptions) SetMetadataSavers(v []string) {
	o.MetadataSavers = v
}

// GetDisabledLocalMetadataReaders returns the DisabledLocalMetadataReaders field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetDisabledLocalMetadataReaders() []string {
	if o == nil || IsNil(o.DisabledLocalMetadataReaders) {
		var ret []string
		return ret
	}
	return o.DisabledLocalMetadataReaders
}

// GetDisabledLocalMetadataReadersOk returns a tuple with the DisabledLocalMetadataReaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetDisabledLocalMetadataReadersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledLocalMetadataReaders) {
		return nil, false
	}
	return o.DisabledLocalMetadataReaders, true
}

// HasDisabledLocalMetadataReaders returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasDisabledLocalMetadataReaders() bool {
	if o != nil && !IsNil(o.DisabledLocalMetadataReaders) {
		return true
	}

	return false
}

// SetDisabledLocalMetadataReaders gets a reference to the given []string and assigns it to the DisabledLocalMetadataReaders field.
func (o *AddVirtualFolderDtoLibraryOptions) SetDisabledLocalMetadataReaders(v []string) {
	o.DisabledLocalMetadataReaders = v
}

// GetLocalMetadataReaderOrder returns the LocalMetadataReaderOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddVirtualFolderDtoLibraryOptions) GetLocalMetadataReaderOrder() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.LocalMetadataReaderOrder
}

// GetLocalMetadataReaderOrderOk returns a tuple with the LocalMetadataReaderOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddVirtualFolderDtoLibraryOptions) GetLocalMetadataReaderOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.LocalMetadataReaderOrder) {
		return nil, false
	}
	return o.LocalMetadataReaderOrder, true
}

// HasLocalMetadataReaderOrder returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasLocalMetadataReaderOrder() bool {
	if o != nil && !IsNil(o.LocalMetadataReaderOrder) {
		return true
	}

	return false
}

// SetLocalMetadataReaderOrder gets a reference to the given []string and assigns it to the LocalMetadataReaderOrder field.
func (o *AddVirtualFolderDtoLibraryOptions) SetLocalMetadataReaderOrder(v []string) {
	o.LocalMetadataReaderOrder = v
}

// GetDisabledSubtitleFetchers returns the DisabledSubtitleFetchers field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetDisabledSubtitleFetchers() []string {
	if o == nil || IsNil(o.DisabledSubtitleFetchers) {
		var ret []string
		return ret
	}
	return o.DisabledSubtitleFetchers
}

// GetDisabledSubtitleFetchersOk returns a tuple with the DisabledSubtitleFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetDisabledSubtitleFetchersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledSubtitleFetchers) {
		return nil, false
	}
	return o.DisabledSubtitleFetchers, true
}

// HasDisabledSubtitleFetchers returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasDisabledSubtitleFetchers() bool {
	if o != nil && !IsNil(o.DisabledSubtitleFetchers) {
		return true
	}

	return false
}

// SetDisabledSubtitleFetchers gets a reference to the given []string and assigns it to the DisabledSubtitleFetchers field.
func (o *AddVirtualFolderDtoLibraryOptions) SetDisabledSubtitleFetchers(v []string) {
	o.DisabledSubtitleFetchers = v
}

// GetSubtitleFetcherOrder returns the SubtitleFetcherOrder field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetSubtitleFetcherOrder() []string {
	if o == nil || IsNil(o.SubtitleFetcherOrder) {
		var ret []string
		return ret
	}
	return o.SubtitleFetcherOrder
}

// GetSubtitleFetcherOrderOk returns a tuple with the SubtitleFetcherOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetSubtitleFetcherOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.SubtitleFetcherOrder) {
		return nil, false
	}
	return o.SubtitleFetcherOrder, true
}

// HasSubtitleFetcherOrder returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasSubtitleFetcherOrder() bool {
	if o != nil && !IsNil(o.SubtitleFetcherOrder) {
		return true
	}

	return false
}

// SetSubtitleFetcherOrder gets a reference to the given []string and assigns it to the SubtitleFetcherOrder field.
func (o *AddVirtualFolderDtoLibraryOptions) SetSubtitleFetcherOrder(v []string) {
	o.SubtitleFetcherOrder = v
}

// GetSkipSubtitlesIfEmbeddedSubtitlesPresent returns the SkipSubtitlesIfEmbeddedSubtitlesPresent field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetSkipSubtitlesIfEmbeddedSubtitlesPresent() bool {
	if o == nil || IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		var ret bool
		return ret
	}
	return *o.SkipSubtitlesIfEmbeddedSubtitlesPresent
}

// GetSkipSubtitlesIfEmbeddedSubtitlesPresentOk returns a tuple with the SkipSubtitlesIfEmbeddedSubtitlesPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetSkipSubtitlesIfEmbeddedSubtitlesPresentOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		return nil, false
	}
	return o.SkipSubtitlesIfEmbeddedSubtitlesPresent, true
}

// HasSkipSubtitlesIfEmbeddedSubtitlesPresent returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasSkipSubtitlesIfEmbeddedSubtitlesPresent() bool {
	if o != nil && !IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		return true
	}

	return false
}

// SetSkipSubtitlesIfEmbeddedSubtitlesPresent gets a reference to the given bool and assigns it to the SkipSubtitlesIfEmbeddedSubtitlesPresent field.
func (o *AddVirtualFolderDtoLibraryOptions) SetSkipSubtitlesIfEmbeddedSubtitlesPresent(v bool) {
	o.SkipSubtitlesIfEmbeddedSubtitlesPresent = &v
}

// GetSkipSubtitlesIfAudioTrackMatches returns the SkipSubtitlesIfAudioTrackMatches field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetSkipSubtitlesIfAudioTrackMatches() bool {
	if o == nil || IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		var ret bool
		return ret
	}
	return *o.SkipSubtitlesIfAudioTrackMatches
}

// GetSkipSubtitlesIfAudioTrackMatchesOk returns a tuple with the SkipSubtitlesIfAudioTrackMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetSkipSubtitlesIfAudioTrackMatchesOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		return nil, false
	}
	return o.SkipSubtitlesIfAudioTrackMatches, true
}

// HasSkipSubtitlesIfAudioTrackMatches returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasSkipSubtitlesIfAudioTrackMatches() bool {
	if o != nil && !IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		return true
	}

	return false
}

// SetSkipSubtitlesIfAudioTrackMatches gets a reference to the given bool and assigns it to the SkipSubtitlesIfAudioTrackMatches field.
func (o *AddVirtualFolderDtoLibraryOptions) SetSkipSubtitlesIfAudioTrackMatches(v bool) {
	o.SkipSubtitlesIfAudioTrackMatches = &v
}

// GetSubtitleDownloadLanguages returns the SubtitleDownloadLanguages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddVirtualFolderDtoLibraryOptions) GetSubtitleDownloadLanguages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SubtitleDownloadLanguages
}

// GetSubtitleDownloadLanguagesOk returns a tuple with the SubtitleDownloadLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddVirtualFolderDtoLibraryOptions) GetSubtitleDownloadLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.SubtitleDownloadLanguages) {
		return nil, false
	}
	return o.SubtitleDownloadLanguages, true
}

// HasSubtitleDownloadLanguages returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasSubtitleDownloadLanguages() bool {
	if o != nil && !IsNil(o.SubtitleDownloadLanguages) {
		return true
	}

	return false
}

// SetSubtitleDownloadLanguages gets a reference to the given []string and assigns it to the SubtitleDownloadLanguages field.
func (o *AddVirtualFolderDtoLibraryOptions) SetSubtitleDownloadLanguages(v []string) {
	o.SubtitleDownloadLanguages = v
}

// GetRequirePerfectSubtitleMatch returns the RequirePerfectSubtitleMatch field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetRequirePerfectSubtitleMatch() bool {
	if o == nil || IsNil(o.RequirePerfectSubtitleMatch) {
		var ret bool
		return ret
	}
	return *o.RequirePerfectSubtitleMatch
}

// GetRequirePerfectSubtitleMatchOk returns a tuple with the RequirePerfectSubtitleMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetRequirePerfectSubtitleMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.RequirePerfectSubtitleMatch) {
		return nil, false
	}
	return o.RequirePerfectSubtitleMatch, true
}

// HasRequirePerfectSubtitleMatch returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasRequirePerfectSubtitleMatch() bool {
	if o != nil && !IsNil(o.RequirePerfectSubtitleMatch) {
		return true
	}

	return false
}

// SetRequirePerfectSubtitleMatch gets a reference to the given bool and assigns it to the RequirePerfectSubtitleMatch field.
func (o *AddVirtualFolderDtoLibraryOptions) SetRequirePerfectSubtitleMatch(v bool) {
	o.RequirePerfectSubtitleMatch = &v
}

// GetSaveSubtitlesWithMedia returns the SaveSubtitlesWithMedia field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetSaveSubtitlesWithMedia() bool {
	if o == nil || IsNil(o.SaveSubtitlesWithMedia) {
		var ret bool
		return ret
	}
	return *o.SaveSubtitlesWithMedia
}

// GetSaveSubtitlesWithMediaOk returns a tuple with the SaveSubtitlesWithMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetSaveSubtitlesWithMediaOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveSubtitlesWithMedia) {
		return nil, false
	}
	return o.SaveSubtitlesWithMedia, true
}

// HasSaveSubtitlesWithMedia returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasSaveSubtitlesWithMedia() bool {
	if o != nil && !IsNil(o.SaveSubtitlesWithMedia) {
		return true
	}

	return false
}

// SetSaveSubtitlesWithMedia gets a reference to the given bool and assigns it to the SaveSubtitlesWithMedia field.
func (o *AddVirtualFolderDtoLibraryOptions) SetSaveSubtitlesWithMedia(v bool) {
	o.SaveSubtitlesWithMedia = &v
}

// GetSaveLyricsWithMedia returns the SaveLyricsWithMedia field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetSaveLyricsWithMedia() bool {
	if o == nil || IsNil(o.SaveLyricsWithMedia) {
		var ret bool
		return ret
	}
	return *o.SaveLyricsWithMedia
}

// GetSaveLyricsWithMediaOk returns a tuple with the SaveLyricsWithMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetSaveLyricsWithMediaOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveLyricsWithMedia) {
		return nil, false
	}
	return o.SaveLyricsWithMedia, true
}

// HasSaveLyricsWithMedia returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasSaveLyricsWithMedia() bool {
	if o != nil && !IsNil(o.SaveLyricsWithMedia) {
		return true
	}

	return false
}

// SetSaveLyricsWithMedia gets a reference to the given bool and assigns it to the SaveLyricsWithMedia field.
func (o *AddVirtualFolderDtoLibraryOptions) SetSaveLyricsWithMedia(v bool) {
	o.SaveLyricsWithMedia = &v
}

// GetAutomaticallyAddToCollection returns the AutomaticallyAddToCollection field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetAutomaticallyAddToCollection() bool {
	if o == nil || IsNil(o.AutomaticallyAddToCollection) {
		var ret bool
		return ret
	}
	return *o.AutomaticallyAddToCollection
}

// GetAutomaticallyAddToCollectionOk returns a tuple with the AutomaticallyAddToCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetAutomaticallyAddToCollectionOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticallyAddToCollection) {
		return nil, false
	}
	return o.AutomaticallyAddToCollection, true
}

// HasAutomaticallyAddToCollection returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasAutomaticallyAddToCollection() bool {
	if o != nil && !IsNil(o.AutomaticallyAddToCollection) {
		return true
	}

	return false
}

// SetAutomaticallyAddToCollection gets a reference to the given bool and assigns it to the AutomaticallyAddToCollection field.
func (o *AddVirtualFolderDtoLibraryOptions) SetAutomaticallyAddToCollection(v bool) {
	o.AutomaticallyAddToCollection = &v
}

// GetAllowEmbeddedSubtitles returns the AllowEmbeddedSubtitles field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetAllowEmbeddedSubtitles() EmbeddedSubtitleOptions {
	if o == nil || IsNil(o.AllowEmbeddedSubtitles) {
		var ret EmbeddedSubtitleOptions
		return ret
	}
	return *o.AllowEmbeddedSubtitles
}

// GetAllowEmbeddedSubtitlesOk returns a tuple with the AllowEmbeddedSubtitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetAllowEmbeddedSubtitlesOk() (*EmbeddedSubtitleOptions, bool) {
	if o == nil || IsNil(o.AllowEmbeddedSubtitles) {
		return nil, false
	}
	return o.AllowEmbeddedSubtitles, true
}

// HasAllowEmbeddedSubtitles returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasAllowEmbeddedSubtitles() bool {
	if o != nil && !IsNil(o.AllowEmbeddedSubtitles) {
		return true
	}

	return false
}

// SetAllowEmbeddedSubtitles gets a reference to the given EmbeddedSubtitleOptions and assigns it to the AllowEmbeddedSubtitles field.
func (o *AddVirtualFolderDtoLibraryOptions) SetAllowEmbeddedSubtitles(v EmbeddedSubtitleOptions) {
	o.AllowEmbeddedSubtitles = &v
}

// GetTypeOptions returns the TypeOptions field value if set, zero value otherwise.
func (o *AddVirtualFolderDtoLibraryOptions) GetTypeOptions() []TypeOptions {
	if o == nil || IsNil(o.TypeOptions) {
		var ret []TypeOptions
		return ret
	}
	return o.TypeOptions
}

// GetTypeOptionsOk returns a tuple with the TypeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVirtualFolderDtoLibraryOptions) GetTypeOptionsOk() ([]TypeOptions, bool) {
	if o == nil || IsNil(o.TypeOptions) {
		return nil, false
	}
	return o.TypeOptions, true
}

// HasTypeOptions returns a boolean if a field has been set.
func (o *AddVirtualFolderDtoLibraryOptions) HasTypeOptions() bool {
	if o != nil && !IsNil(o.TypeOptions) {
		return true
	}

	return false
}

// SetTypeOptions gets a reference to the given []TypeOptions and assigns it to the TypeOptions field.
func (o *AddVirtualFolderDtoLibraryOptions) SetTypeOptions(v []TypeOptions) {
	o.TypeOptions = v
}

func (o AddVirtualFolderDtoLibraryOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddVirtualFolderDtoLibraryOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.EnablePhotos) {
		toSerialize["EnablePhotos"] = o.EnablePhotos
	}
	if !IsNil(o.EnableRealtimeMonitor) {
		toSerialize["EnableRealtimeMonitor"] = o.EnableRealtimeMonitor
	}
	if !IsNil(o.EnableLUFSScan) {
		toSerialize["EnableLUFSScan"] = o.EnableLUFSScan
	}
	if !IsNil(o.EnableChapterImageExtraction) {
		toSerialize["EnableChapterImageExtraction"] = o.EnableChapterImageExtraction
	}
	if !IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		toSerialize["ExtractChapterImagesDuringLibraryScan"] = o.ExtractChapterImagesDuringLibraryScan
	}
	if !IsNil(o.EnableTrickplayImageExtraction) {
		toSerialize["EnableTrickplayImageExtraction"] = o.EnableTrickplayImageExtraction
	}
	if !IsNil(o.ExtractTrickplayImagesDuringLibraryScan) {
		toSerialize["ExtractTrickplayImagesDuringLibraryScan"] = o.ExtractTrickplayImagesDuringLibraryScan
	}
	if !IsNil(o.PathInfos) {
		toSerialize["PathInfos"] = o.PathInfos
	}
	if !IsNil(o.SaveLocalMetadata) {
		toSerialize["SaveLocalMetadata"] = o.SaveLocalMetadata
	}
	if !IsNil(o.EnableInternetProviders) {
		toSerialize["EnableInternetProviders"] = o.EnableInternetProviders
	}
	if !IsNil(o.EnableAutomaticSeriesGrouping) {
		toSerialize["EnableAutomaticSeriesGrouping"] = o.EnableAutomaticSeriesGrouping
	}
	if !IsNil(o.EnableEmbeddedTitles) {
		toSerialize["EnableEmbeddedTitles"] = o.EnableEmbeddedTitles
	}
	if !IsNil(o.EnableEmbeddedExtrasTitles) {
		toSerialize["EnableEmbeddedExtrasTitles"] = o.EnableEmbeddedExtrasTitles
	}
	if !IsNil(o.EnableEmbeddedEpisodeInfos) {
		toSerialize["EnableEmbeddedEpisodeInfos"] = o.EnableEmbeddedEpisodeInfos
	}
	if !IsNil(o.AutomaticRefreshIntervalDays) {
		toSerialize["AutomaticRefreshIntervalDays"] = o.AutomaticRefreshIntervalDays
	}
	if o.PreferredMetadataLanguage.IsSet() {
		toSerialize["PreferredMetadataLanguage"] = o.PreferredMetadataLanguage.Get()
	}
	if o.MetadataCountryCode.IsSet() {
		toSerialize["MetadataCountryCode"] = o.MetadataCountryCode.Get()
	}
	if !IsNil(o.SeasonZeroDisplayName) {
		toSerialize["SeasonZeroDisplayName"] = o.SeasonZeroDisplayName
	}
	if o.MetadataSavers != nil {
		toSerialize["MetadataSavers"] = o.MetadataSavers
	}
	if !IsNil(o.DisabledLocalMetadataReaders) {
		toSerialize["DisabledLocalMetadataReaders"] = o.DisabledLocalMetadataReaders
	}
	if o.LocalMetadataReaderOrder != nil {
		toSerialize["LocalMetadataReaderOrder"] = o.LocalMetadataReaderOrder
	}
	if !IsNil(o.DisabledSubtitleFetchers) {
		toSerialize["DisabledSubtitleFetchers"] = o.DisabledSubtitleFetchers
	}
	if !IsNil(o.SubtitleFetcherOrder) {
		toSerialize["SubtitleFetcherOrder"] = o.SubtitleFetcherOrder
	}
	if !IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		toSerialize["SkipSubtitlesIfEmbeddedSubtitlesPresent"] = o.SkipSubtitlesIfEmbeddedSubtitlesPresent
	}
	if !IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		toSerialize["SkipSubtitlesIfAudioTrackMatches"] = o.SkipSubtitlesIfAudioTrackMatches
	}
	if o.SubtitleDownloadLanguages != nil {
		toSerialize["SubtitleDownloadLanguages"] = o.SubtitleDownloadLanguages
	}
	if !IsNil(o.RequirePerfectSubtitleMatch) {
		toSerialize["RequirePerfectSubtitleMatch"] = o.RequirePerfectSubtitleMatch
	}
	if !IsNil(o.SaveSubtitlesWithMedia) {
		toSerialize["SaveSubtitlesWithMedia"] = o.SaveSubtitlesWithMedia
	}
	if !IsNil(o.SaveLyricsWithMedia) {
		toSerialize["SaveLyricsWithMedia"] = o.SaveLyricsWithMedia
	}
	if !IsNil(o.AutomaticallyAddToCollection) {
		toSerialize["AutomaticallyAddToCollection"] = o.AutomaticallyAddToCollection
	}
	if !IsNil(o.AllowEmbeddedSubtitles) {
		toSerialize["AllowEmbeddedSubtitles"] = o.AllowEmbeddedSubtitles
	}
	if !IsNil(o.TypeOptions) {
		toSerialize["TypeOptions"] = o.TypeOptions
	}
	return toSerialize, nil
}

type NullableAddVirtualFolderDtoLibraryOptions struct {
	value *AddVirtualFolderDtoLibraryOptions
	isSet bool
}

func (v NullableAddVirtualFolderDtoLibraryOptions) Get() *AddVirtualFolderDtoLibraryOptions {
	return v.value
}

func (v *NullableAddVirtualFolderDtoLibraryOptions) Set(val *AddVirtualFolderDtoLibraryOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableAddVirtualFolderDtoLibraryOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableAddVirtualFolderDtoLibraryOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddVirtualFolderDtoLibraryOptions(val *AddVirtualFolderDtoLibraryOptions) *NullableAddVirtualFolderDtoLibraryOptions {
	return &NullableAddVirtualFolderDtoLibraryOptions{value: val, isSet: true}
}

func (v NullableAddVirtualFolderDtoLibraryOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddVirtualFolderDtoLibraryOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


