/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// DatabaseLockingBehaviorTypes Defines all possible methods for locking database access for concurrent queries.
type DatabaseLockingBehaviorTypes string

// List of DatabaseLockingBehaviorTypes
const (
	DATABASELOCKINGBEHAVIORTYPES_NO_LOCK DatabaseLockingBehaviorTypes = "NoLock"
	DATABASELOCKINGBEHAVIORTYPES_PESSIMISTIC DatabaseLockingBehaviorTypes = "Pessimistic"
	DATABASELOCKINGBEHAVIORTYPES_OPTIMISTIC DatabaseLockingBehaviorTypes = "Optimistic"
)

// All allowed values of DatabaseLockingBehaviorTypes enum
var AllowedDatabaseLockingBehaviorTypesEnumValues = []DatabaseLockingBehaviorTypes{
	"NoLock",
	"Pessimistic",
	"Optimistic",
}

func (v *DatabaseLockingBehaviorTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatabaseLockingBehaviorTypes(value)
	for _, existing := range AllowedDatabaseLockingBehaviorTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatabaseLockingBehaviorTypes", value)
}

// NewDatabaseLockingBehaviorTypesFromValue returns a pointer to a valid DatabaseLockingBehaviorTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatabaseLockingBehaviorTypesFromValue(v string) (*DatabaseLockingBehaviorTypes, error) {
	ev := DatabaseLockingBehaviorTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatabaseLockingBehaviorTypes: valid values are %v", v, AllowedDatabaseLockingBehaviorTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatabaseLockingBehaviorTypes) IsValid() bool {
	for _, existing := range AllowedDatabaseLockingBehaviorTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatabaseLockingBehaviorTypes value
func (v DatabaseLockingBehaviorTypes) Ptr() *DatabaseLockingBehaviorTypes {
	return &v
}

type NullableDatabaseLockingBehaviorTypes struct {
	value *DatabaseLockingBehaviorTypes
	isSet bool
}

func (v NullableDatabaseLockingBehaviorTypes) Get() *DatabaseLockingBehaviorTypes {
	return v.value
}

func (v *NullableDatabaseLockingBehaviorTypes) Set(val *DatabaseLockingBehaviorTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseLockingBehaviorTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseLockingBehaviorTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseLockingBehaviorTypes(val *DatabaseLockingBehaviorTypes) *NullableDatabaseLockingBehaviorTypes {
	return &NullableDatabaseLockingBehaviorTypes{value: val, isSet: true}
}

func (v NullableDatabaseLockingBehaviorTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseLockingBehaviorTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

