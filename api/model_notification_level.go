/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// NotificationLevel the model 'NotificationLevel'
type NotificationLevel string

// List of NotificationLevel
const (
	NOTIFICATIONLEVEL_NORMAL NotificationLevel = "Normal"
	NOTIFICATIONLEVEL_WARNING NotificationLevel = "Warning"
	NOTIFICATIONLEVEL_ERROR NotificationLevel = "Error"
)

// All allowed values of NotificationLevel enum
var AllowedNotificationLevelEnumValues = []NotificationLevel{
	"Normal",
	"Warning",
	"Error",
}

func (v *NotificationLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationLevel(value)
	for _, existing := range AllowedNotificationLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationLevel", value)
}

// NewNotificationLevelFromValue returns a pointer to a valid NotificationLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationLevelFromValue(v string) (*NotificationLevel, error) {
	ev := NotificationLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationLevel: valid values are %v", v, AllowedNotificationLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationLevel) IsValid() bool {
	for _, existing := range AllowedNotificationLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationLevel value
func (v NotificationLevel) Ptr() *NotificationLevel {
	return &v
}

type NullableNotificationLevel struct {
	value *NotificationLevel
	isSet bool
}

func (v NullableNotificationLevel) Get() *NotificationLevel {
	return v.value
}

func (v *NullableNotificationLevel) Set(val *NotificationLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationLevel(val *NotificationLevel) *NullableNotificationLevel {
	return &NullableNotificationLevel{value: val, isSet: true}
}

func (v NullableNotificationLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

