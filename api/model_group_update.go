/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GroupUpdate - Represents the list of possible group update types
type GroupUpdate struct {
	SyncPlayGroupDoesNotExistUpdate *SyncPlayGroupDoesNotExistUpdate
	SyncPlayGroupJoinedUpdate *SyncPlayGroupJoinedUpdate
	SyncPlayGroupLeftUpdate *SyncPlayGroupLeftUpdate
	SyncPlayLibraryAccessDeniedUpdate *SyncPlayLibraryAccessDeniedUpdate
	SyncPlayNotInGroupUpdate *SyncPlayNotInGroupUpdate
	SyncPlayPlayQueueUpdate *SyncPlayPlayQueueUpdate
	SyncPlayStateUpdate *SyncPlayStateUpdate
	SyncPlayUserJoinedUpdate *SyncPlayUserJoinedUpdate
	SyncPlayUserLeftUpdate *SyncPlayUserLeftUpdate
}

// SyncPlayGroupDoesNotExistUpdateAsGroupUpdate is a convenience function that returns SyncPlayGroupDoesNotExistUpdate wrapped in GroupUpdate
func SyncPlayGroupDoesNotExistUpdateAsGroupUpdate(v *SyncPlayGroupDoesNotExistUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayGroupDoesNotExistUpdate: v,
	}
}

// SyncPlayGroupJoinedUpdateAsGroupUpdate is a convenience function that returns SyncPlayGroupJoinedUpdate wrapped in GroupUpdate
func SyncPlayGroupJoinedUpdateAsGroupUpdate(v *SyncPlayGroupJoinedUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayGroupJoinedUpdate: v,
	}
}

// SyncPlayGroupLeftUpdateAsGroupUpdate is a convenience function that returns SyncPlayGroupLeftUpdate wrapped in GroupUpdate
func SyncPlayGroupLeftUpdateAsGroupUpdate(v *SyncPlayGroupLeftUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayGroupLeftUpdate: v,
	}
}

// SyncPlayLibraryAccessDeniedUpdateAsGroupUpdate is a convenience function that returns SyncPlayLibraryAccessDeniedUpdate wrapped in GroupUpdate
func SyncPlayLibraryAccessDeniedUpdateAsGroupUpdate(v *SyncPlayLibraryAccessDeniedUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayLibraryAccessDeniedUpdate: v,
	}
}

// SyncPlayNotInGroupUpdateAsGroupUpdate is a convenience function that returns SyncPlayNotInGroupUpdate wrapped in GroupUpdate
func SyncPlayNotInGroupUpdateAsGroupUpdate(v *SyncPlayNotInGroupUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayNotInGroupUpdate: v,
	}
}

// SyncPlayPlayQueueUpdateAsGroupUpdate is a convenience function that returns SyncPlayPlayQueueUpdate wrapped in GroupUpdate
func SyncPlayPlayQueueUpdateAsGroupUpdate(v *SyncPlayPlayQueueUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayPlayQueueUpdate: v,
	}
}

// SyncPlayStateUpdateAsGroupUpdate is a convenience function that returns SyncPlayStateUpdate wrapped in GroupUpdate
func SyncPlayStateUpdateAsGroupUpdate(v *SyncPlayStateUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayStateUpdate: v,
	}
}

// SyncPlayUserJoinedUpdateAsGroupUpdate is a convenience function that returns SyncPlayUserJoinedUpdate wrapped in GroupUpdate
func SyncPlayUserJoinedUpdateAsGroupUpdate(v *SyncPlayUserJoinedUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayUserJoinedUpdate: v,
	}
}

// SyncPlayUserLeftUpdateAsGroupUpdate is a convenience function that returns SyncPlayUserLeftUpdate wrapped in GroupUpdate
func SyncPlayUserLeftUpdateAsGroupUpdate(v *SyncPlayUserLeftUpdate) GroupUpdate {
	return GroupUpdate{
		SyncPlayUserLeftUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GroupUpdate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SyncPlayGroupDoesNotExistUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayGroupDoesNotExistUpdate)
	if err == nil {
		jsonSyncPlayGroupDoesNotExistUpdate, _ := json.Marshal(dst.SyncPlayGroupDoesNotExistUpdate)
		if string(jsonSyncPlayGroupDoesNotExistUpdate) == "{}" { // empty struct
			dst.SyncPlayGroupDoesNotExistUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayGroupDoesNotExistUpdate); err != nil {
				dst.SyncPlayGroupDoesNotExistUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayGroupDoesNotExistUpdate = nil
	}

	// try to unmarshal data into SyncPlayGroupJoinedUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayGroupJoinedUpdate)
	if err == nil {
		jsonSyncPlayGroupJoinedUpdate, _ := json.Marshal(dst.SyncPlayGroupJoinedUpdate)
		if string(jsonSyncPlayGroupJoinedUpdate) == "{}" { // empty struct
			dst.SyncPlayGroupJoinedUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayGroupJoinedUpdate); err != nil {
				dst.SyncPlayGroupJoinedUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayGroupJoinedUpdate = nil
	}

	// try to unmarshal data into SyncPlayGroupLeftUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayGroupLeftUpdate)
	if err == nil {
		jsonSyncPlayGroupLeftUpdate, _ := json.Marshal(dst.SyncPlayGroupLeftUpdate)
		if string(jsonSyncPlayGroupLeftUpdate) == "{}" { // empty struct
			dst.SyncPlayGroupLeftUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayGroupLeftUpdate); err != nil {
				dst.SyncPlayGroupLeftUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayGroupLeftUpdate = nil
	}

	// try to unmarshal data into SyncPlayLibraryAccessDeniedUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayLibraryAccessDeniedUpdate)
	if err == nil {
		jsonSyncPlayLibraryAccessDeniedUpdate, _ := json.Marshal(dst.SyncPlayLibraryAccessDeniedUpdate)
		if string(jsonSyncPlayLibraryAccessDeniedUpdate) == "{}" { // empty struct
			dst.SyncPlayLibraryAccessDeniedUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayLibraryAccessDeniedUpdate); err != nil {
				dst.SyncPlayLibraryAccessDeniedUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayLibraryAccessDeniedUpdate = nil
	}

	// try to unmarshal data into SyncPlayNotInGroupUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayNotInGroupUpdate)
	if err == nil {
		jsonSyncPlayNotInGroupUpdate, _ := json.Marshal(dst.SyncPlayNotInGroupUpdate)
		if string(jsonSyncPlayNotInGroupUpdate) == "{}" { // empty struct
			dst.SyncPlayNotInGroupUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayNotInGroupUpdate); err != nil {
				dst.SyncPlayNotInGroupUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayNotInGroupUpdate = nil
	}

	// try to unmarshal data into SyncPlayPlayQueueUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayPlayQueueUpdate)
	if err == nil {
		jsonSyncPlayPlayQueueUpdate, _ := json.Marshal(dst.SyncPlayPlayQueueUpdate)
		if string(jsonSyncPlayPlayQueueUpdate) == "{}" { // empty struct
			dst.SyncPlayPlayQueueUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayPlayQueueUpdate); err != nil {
				dst.SyncPlayPlayQueueUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayPlayQueueUpdate = nil
	}

	// try to unmarshal data into SyncPlayStateUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayStateUpdate)
	if err == nil {
		jsonSyncPlayStateUpdate, _ := json.Marshal(dst.SyncPlayStateUpdate)
		if string(jsonSyncPlayStateUpdate) == "{}" { // empty struct
			dst.SyncPlayStateUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayStateUpdate); err != nil {
				dst.SyncPlayStateUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayStateUpdate = nil
	}

	// try to unmarshal data into SyncPlayUserJoinedUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayUserJoinedUpdate)
	if err == nil {
		jsonSyncPlayUserJoinedUpdate, _ := json.Marshal(dst.SyncPlayUserJoinedUpdate)
		if string(jsonSyncPlayUserJoinedUpdate) == "{}" { // empty struct
			dst.SyncPlayUserJoinedUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayUserJoinedUpdate); err != nil {
				dst.SyncPlayUserJoinedUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayUserJoinedUpdate = nil
	}

	// try to unmarshal data into SyncPlayUserLeftUpdate
	err = newStrictDecoder(data).Decode(&dst.SyncPlayUserLeftUpdate)
	if err == nil {
		jsonSyncPlayUserLeftUpdate, _ := json.Marshal(dst.SyncPlayUserLeftUpdate)
		if string(jsonSyncPlayUserLeftUpdate) == "{}" { // empty struct
			dst.SyncPlayUserLeftUpdate = nil
		} else {
			if err = validator.Validate(dst.SyncPlayUserLeftUpdate); err != nil {
				dst.SyncPlayUserLeftUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SyncPlayUserLeftUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SyncPlayGroupDoesNotExistUpdate = nil
		dst.SyncPlayGroupJoinedUpdate = nil
		dst.SyncPlayGroupLeftUpdate = nil
		dst.SyncPlayLibraryAccessDeniedUpdate = nil
		dst.SyncPlayNotInGroupUpdate = nil
		dst.SyncPlayPlayQueueUpdate = nil
		dst.SyncPlayStateUpdate = nil
		dst.SyncPlayUserJoinedUpdate = nil
		dst.SyncPlayUserLeftUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GroupUpdate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GroupUpdate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GroupUpdate) MarshalJSON() ([]byte, error) {
	if src.SyncPlayGroupDoesNotExistUpdate != nil {
		return json.Marshal(&src.SyncPlayGroupDoesNotExistUpdate)
	}

	if src.SyncPlayGroupJoinedUpdate != nil {
		return json.Marshal(&src.SyncPlayGroupJoinedUpdate)
	}

	if src.SyncPlayGroupLeftUpdate != nil {
		return json.Marshal(&src.SyncPlayGroupLeftUpdate)
	}

	if src.SyncPlayLibraryAccessDeniedUpdate != nil {
		return json.Marshal(&src.SyncPlayLibraryAccessDeniedUpdate)
	}

	if src.SyncPlayNotInGroupUpdate != nil {
		return json.Marshal(&src.SyncPlayNotInGroupUpdate)
	}

	if src.SyncPlayPlayQueueUpdate != nil {
		return json.Marshal(&src.SyncPlayPlayQueueUpdate)
	}

	if src.SyncPlayStateUpdate != nil {
		return json.Marshal(&src.SyncPlayStateUpdate)
	}

	if src.SyncPlayUserJoinedUpdate != nil {
		return json.Marshal(&src.SyncPlayUserJoinedUpdate)
	}

	if src.SyncPlayUserLeftUpdate != nil {
		return json.Marshal(&src.SyncPlayUserLeftUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GroupUpdate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SyncPlayGroupDoesNotExistUpdate != nil {
		return obj.SyncPlayGroupDoesNotExistUpdate
	}

	if obj.SyncPlayGroupJoinedUpdate != nil {
		return obj.SyncPlayGroupJoinedUpdate
	}

	if obj.SyncPlayGroupLeftUpdate != nil {
		return obj.SyncPlayGroupLeftUpdate
	}

	if obj.SyncPlayLibraryAccessDeniedUpdate != nil {
		return obj.SyncPlayLibraryAccessDeniedUpdate
	}

	if obj.SyncPlayNotInGroupUpdate != nil {
		return obj.SyncPlayNotInGroupUpdate
	}

	if obj.SyncPlayPlayQueueUpdate != nil {
		return obj.SyncPlayPlayQueueUpdate
	}

	if obj.SyncPlayStateUpdate != nil {
		return obj.SyncPlayStateUpdate
	}

	if obj.SyncPlayUserJoinedUpdate != nil {
		return obj.SyncPlayUserJoinedUpdate
	}

	if obj.SyncPlayUserLeftUpdate != nil {
		return obj.SyncPlayUserLeftUpdate
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GroupUpdate) GetActualInstanceValue() (interface{}) {
	if obj.SyncPlayGroupDoesNotExistUpdate != nil {
		return *obj.SyncPlayGroupDoesNotExistUpdate
	}

	if obj.SyncPlayGroupJoinedUpdate != nil {
		return *obj.SyncPlayGroupJoinedUpdate
	}

	if obj.SyncPlayGroupLeftUpdate != nil {
		return *obj.SyncPlayGroupLeftUpdate
	}

	if obj.SyncPlayLibraryAccessDeniedUpdate != nil {
		return *obj.SyncPlayLibraryAccessDeniedUpdate
	}

	if obj.SyncPlayNotInGroupUpdate != nil {
		return *obj.SyncPlayNotInGroupUpdate
	}

	if obj.SyncPlayPlayQueueUpdate != nil {
		return *obj.SyncPlayPlayQueueUpdate
	}

	if obj.SyncPlayStateUpdate != nil {
		return *obj.SyncPlayStateUpdate
	}

	if obj.SyncPlayUserJoinedUpdate != nil {
		return *obj.SyncPlayUserJoinedUpdate
	}

	if obj.SyncPlayUserLeftUpdate != nil {
		return *obj.SyncPlayUserLeftUpdate
	}

	// all schemas are nil
	return nil
}

type NullableGroupUpdate struct {
	value *GroupUpdate
	isSet bool
}

func (v NullableGroupUpdate) Get() *GroupUpdate {
	return v.value
}

func (v *NullableGroupUpdate) Set(val *GroupUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupUpdate(val *GroupUpdate) *NullableGroupUpdate {
	return &NullableGroupUpdate{value: val, isSet: true}
}

func (v NullableGroupUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


