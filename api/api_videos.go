/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


type VideosAPI interface {

	/*
	DeleteAlternateSources Removes alternate video sources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiDeleteAlternateSourcesRequest
	*/
	DeleteAlternateSources(ctx context.Context, itemId string) ApiDeleteAlternateSourcesRequest

	// DeleteAlternateSourcesExecute executes the request
	DeleteAlternateSourcesExecute(r ApiDeleteAlternateSourcesRequest) (*http.Response, error)

	/*
	GetAdditionalPart Gets additional parts for a video.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiGetAdditionalPartRequest
	*/
	GetAdditionalPart(ctx context.Context, itemId string) ApiGetAdditionalPartRequest

	// GetAdditionalPartExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetAdditionalPartExecute(r ApiGetAdditionalPartRequest) (*BaseItemDtoQueryResult, *http.Response, error)

	/*
	GetVideoStream Gets a video stream.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiGetVideoStreamRequest
	*/
	GetVideoStream(ctx context.Context, itemId string) ApiGetVideoStreamRequest

	// GetVideoStreamExecute executes the request
	//  @return *os.File
	GetVideoStreamExecute(r ApiGetVideoStreamRequest) (*os.File, *http.Response, error)

	/*
	GetVideoStreamByContainer Gets a video stream.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@param container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
	@return ApiGetVideoStreamByContainerRequest
	*/
	GetVideoStreamByContainer(ctx context.Context, itemId string, container string) ApiGetVideoStreamByContainerRequest

	// GetVideoStreamByContainerExecute executes the request
	//  @return *os.File
	GetVideoStreamByContainerExecute(r ApiGetVideoStreamByContainerRequest) (*os.File, *http.Response, error)

	/*
	HeadVideoStream Gets a video stream.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiHeadVideoStreamRequest
	*/
	HeadVideoStream(ctx context.Context, itemId string) ApiHeadVideoStreamRequest

	// HeadVideoStreamExecute executes the request
	//  @return *os.File
	HeadVideoStreamExecute(r ApiHeadVideoStreamRequest) (*os.File, *http.Response, error)

	/*
	HeadVideoStreamByContainer Gets a video stream.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@param container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
	@return ApiHeadVideoStreamByContainerRequest
	*/
	HeadVideoStreamByContainer(ctx context.Context, itemId string, container string) ApiHeadVideoStreamByContainerRequest

	// HeadVideoStreamByContainerExecute executes the request
	//  @return *os.File
	HeadVideoStreamByContainerExecute(r ApiHeadVideoStreamByContainerRequest) (*os.File, *http.Response, error)

	/*
	MergeVersions Merges videos into a single record.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMergeVersionsRequest
	*/
	MergeVersions(ctx context.Context) ApiMergeVersionsRequest

	// MergeVersionsExecute executes the request
	MergeVersionsExecute(r ApiMergeVersionsRequest) (*http.Response, error)
}

// VideosAPIService VideosAPI service
type VideosAPIService service

type ApiDeleteAlternateSourcesRequest struct {
	ctx context.Context
	ApiService VideosAPI
	itemId string
}

func (r ApiDeleteAlternateSourcesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAlternateSourcesExecute(r)
}

/*
DeleteAlternateSources Removes alternate video sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiDeleteAlternateSourcesRequest
*/
func (a *VideosAPIService) DeleteAlternateSources(ctx context.Context, itemId string) ApiDeleteAlternateSourcesRequest {
	return ApiDeleteAlternateSourcesRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *VideosAPIService) DeleteAlternateSourcesExecute(r ApiDeleteAlternateSourcesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.DeleteAlternateSources")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/AlternateSources"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAdditionalPartRequest struct {
	ctx context.Context
	ApiService VideosAPI
	itemId string
	userId *string
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetAdditionalPartRequest) UserId(userId string) ApiGetAdditionalPartRequest {
	r.userId = &userId
	return r
}

func (r ApiGetAdditionalPartRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetAdditionalPartExecute(r)
}

/*
GetAdditionalPart Gets additional parts for a video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiGetAdditionalPartRequest
*/
func (a *VideosAPIService) GetAdditionalPart(ctx context.Context, itemId string) ApiGetAdditionalPartRequest {
	return ApiGetAdditionalPartRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *VideosAPIService) GetAdditionalPartExecute(r ApiGetAdditionalPartRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.GetAdditionalPart")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/AdditionalParts"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoStreamRequest struct {
	ctx context.Context
	ApiService VideosAPI
	itemId string
	container *string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *SubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *EncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
func (r ApiGetVideoStreamRequest) Container(container string) ApiGetVideoStreamRequest {
	r.container = &container
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r ApiGetVideoStreamRequest) Static(static bool) ApiGetVideoStreamRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r ApiGetVideoStreamRequest) Params(params string) ApiGetVideoStreamRequest {
	r.params = &params
	return r
}

// The tag.
func (r ApiGetVideoStreamRequest) Tag(tag string) ApiGetVideoStreamRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
// Deprecated
func (r ApiGetVideoStreamRequest) DeviceProfileId(deviceProfileId string) ApiGetVideoStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r ApiGetVideoStreamRequest) PlaySessionId(playSessionId string) ApiGetVideoStreamRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r ApiGetVideoStreamRequest) SegmentContainer(segmentContainer string) ApiGetVideoStreamRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r ApiGetVideoStreamRequest) SegmentLength(segmentLength int32) ApiGetVideoStreamRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r ApiGetVideoStreamRequest) MinSegments(minSegments int32) ApiGetVideoStreamRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r ApiGetVideoStreamRequest) MediaSourceId(mediaSourceId string) ApiGetVideoStreamRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetVideoStreamRequest) DeviceId(deviceId string) ApiGetVideoStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r ApiGetVideoStreamRequest) AudioCodec(audioCodec string) ApiGetVideoStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetVideoStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetVideoStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r ApiGetVideoStreamRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) ApiGetVideoStreamRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r ApiGetVideoStreamRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) ApiGetVideoStreamRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r ApiGetVideoStreamRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) ApiGetVideoStreamRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r ApiGetVideoStreamRequest) AudioSampleRate(audioSampleRate int32) ApiGetVideoStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r ApiGetVideoStreamRequest) MaxAudioBitDepth(maxAudioBitDepth int32) ApiGetVideoStreamRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetVideoStreamRequest) AudioBitRate(audioBitRate int32) ApiGetVideoStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r ApiGetVideoStreamRequest) AudioChannels(audioChannels int32) ApiGetVideoStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r ApiGetVideoStreamRequest) MaxAudioChannels(maxAudioChannels int32) ApiGetVideoStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r ApiGetVideoStreamRequest) Profile(profile string) ApiGetVideoStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r ApiGetVideoStreamRequest) Level(level string) ApiGetVideoStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideoStreamRequest) Framerate(framerate float32) ApiGetVideoStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideoStreamRequest) MaxFramerate(maxFramerate float32) ApiGetVideoStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetVideoStreamRequest) CopyTimestamps(copyTimestamps bool) ApiGetVideoStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r ApiGetVideoStreamRequest) StartTimeTicks(startTimeTicks int64) ApiGetVideoStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetVideoStreamRequest) Width(width int32) ApiGetVideoStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetVideoStreamRequest) Height(height int32) ApiGetVideoStreamRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetVideoStreamRequest) MaxWidth(maxWidth int32) ApiGetVideoStreamRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetVideoStreamRequest) MaxHeight(maxHeight int32) ApiGetVideoStreamRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetVideoStreamRequest) VideoBitRate(videoBitRate int32) ApiGetVideoStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetVideoStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetVideoStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetVideoStreamRequest) SubtitleMethod(subtitleMethod SubtitleDeliveryMethod) ApiGetVideoStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetVideoStreamRequest) MaxRefFrames(maxRefFrames int32) ApiGetVideoStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r ApiGetVideoStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetVideoStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r ApiGetVideoStreamRequest) RequireAvc(requireAvc bool) ApiGetVideoStreamRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r ApiGetVideoStreamRequest) DeInterlace(deInterlace bool) ApiGetVideoStreamRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r ApiGetVideoStreamRequest) RequireNonAnamorphic(requireNonAnamorphic bool) ApiGetVideoStreamRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r ApiGetVideoStreamRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) ApiGetVideoStreamRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r ApiGetVideoStreamRequest) CpuCoreLimit(cpuCoreLimit int32) ApiGetVideoStreamRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r ApiGetVideoStreamRequest) LiveStreamId(liveStreamId string) ApiGetVideoStreamRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r ApiGetVideoStreamRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) ApiGetVideoStreamRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r ApiGetVideoStreamRequest) VideoCodec(videoCodec string) ApiGetVideoStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r ApiGetVideoStreamRequest) SubtitleCodec(subtitleCodec string) ApiGetVideoStreamRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r ApiGetVideoStreamRequest) TranscodeReasons(transcodeReasons string) ApiGetVideoStreamRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetVideoStreamRequest) AudioStreamIndex(audioStreamIndex int32) ApiGetVideoStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetVideoStreamRequest) VideoStreamIndex(videoStreamIndex int32) ApiGetVideoStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r ApiGetVideoStreamRequest) Context(context EncodingContext) ApiGetVideoStreamRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r ApiGetVideoStreamRequest) StreamOptions(streamOptions map[string]string) ApiGetVideoStreamRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r ApiGetVideoStreamRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) ApiGetVideoStreamRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r ApiGetVideoStreamRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetVideoStreamExecute(r)
}

/*
GetVideoStream Gets a video stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiGetVideoStreamRequest
*/
func (a *VideosAPIService) GetVideoStream(ctx context.Context, itemId string) ApiGetVideoStreamRequest {
	return ApiGetVideoStreamRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VideosAPIService) GetVideoStreamExecute(r ApiGetVideoStreamRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.GetVideoStream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.container != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "container", r.container, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"video/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoStreamByContainerRequest struct {
	ctx context.Context
	ApiService VideosAPI
	itemId string
	container string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *SubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *EncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r ApiGetVideoStreamByContainerRequest) Static(static bool) ApiGetVideoStreamByContainerRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r ApiGetVideoStreamByContainerRequest) Params(params string) ApiGetVideoStreamByContainerRequest {
	r.params = &params
	return r
}

// The tag.
func (r ApiGetVideoStreamByContainerRequest) Tag(tag string) ApiGetVideoStreamByContainerRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiGetVideoStreamByContainerRequest) DeviceProfileId(deviceProfileId string) ApiGetVideoStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r ApiGetVideoStreamByContainerRequest) PlaySessionId(playSessionId string) ApiGetVideoStreamByContainerRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r ApiGetVideoStreamByContainerRequest) SegmentContainer(segmentContainer string) ApiGetVideoStreamByContainerRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r ApiGetVideoStreamByContainerRequest) SegmentLength(segmentLength int32) ApiGetVideoStreamByContainerRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r ApiGetVideoStreamByContainerRequest) MinSegments(minSegments int32) ApiGetVideoStreamByContainerRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r ApiGetVideoStreamByContainerRequest) MediaSourceId(mediaSourceId string) ApiGetVideoStreamByContainerRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiGetVideoStreamByContainerRequest) DeviceId(deviceId string) ApiGetVideoStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r ApiGetVideoStreamByContainerRequest) AudioCodec(audioCodec string) ApiGetVideoStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiGetVideoStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiGetVideoStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r ApiGetVideoStreamByContainerRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) ApiGetVideoStreamByContainerRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r ApiGetVideoStreamByContainerRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) ApiGetVideoStreamByContainerRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r ApiGetVideoStreamByContainerRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) ApiGetVideoStreamByContainerRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r ApiGetVideoStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) ApiGetVideoStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r ApiGetVideoStreamByContainerRequest) MaxAudioBitDepth(maxAudioBitDepth int32) ApiGetVideoStreamByContainerRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiGetVideoStreamByContainerRequest) AudioBitRate(audioBitRate int32) ApiGetVideoStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r ApiGetVideoStreamByContainerRequest) AudioChannels(audioChannels int32) ApiGetVideoStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r ApiGetVideoStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) ApiGetVideoStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r ApiGetVideoStreamByContainerRequest) Profile(profile string) ApiGetVideoStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r ApiGetVideoStreamByContainerRequest) Level(level string) ApiGetVideoStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideoStreamByContainerRequest) Framerate(framerate float32) ApiGetVideoStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiGetVideoStreamByContainerRequest) MaxFramerate(maxFramerate float32) ApiGetVideoStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiGetVideoStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) ApiGetVideoStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r ApiGetVideoStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) ApiGetVideoStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiGetVideoStreamByContainerRequest) Width(width int32) ApiGetVideoStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiGetVideoStreamByContainerRequest) Height(height int32) ApiGetVideoStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiGetVideoStreamByContainerRequest) MaxWidth(maxWidth int32) ApiGetVideoStreamByContainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiGetVideoStreamByContainerRequest) MaxHeight(maxHeight int32) ApiGetVideoStreamByContainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiGetVideoStreamByContainerRequest) VideoBitRate(videoBitRate int32) ApiGetVideoStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiGetVideoStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiGetVideoStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiGetVideoStreamByContainerRequest) SubtitleMethod(subtitleMethod SubtitleDeliveryMethod) ApiGetVideoStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiGetVideoStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) ApiGetVideoStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r ApiGetVideoStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) ApiGetVideoStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r ApiGetVideoStreamByContainerRequest) RequireAvc(requireAvc bool) ApiGetVideoStreamByContainerRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r ApiGetVideoStreamByContainerRequest) DeInterlace(deInterlace bool) ApiGetVideoStreamByContainerRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r ApiGetVideoStreamByContainerRequest) RequireNonAnamorphic(requireNonAnamorphic bool) ApiGetVideoStreamByContainerRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r ApiGetVideoStreamByContainerRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) ApiGetVideoStreamByContainerRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r ApiGetVideoStreamByContainerRequest) CpuCoreLimit(cpuCoreLimit int32) ApiGetVideoStreamByContainerRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r ApiGetVideoStreamByContainerRequest) LiveStreamId(liveStreamId string) ApiGetVideoStreamByContainerRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r ApiGetVideoStreamByContainerRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) ApiGetVideoStreamByContainerRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r ApiGetVideoStreamByContainerRequest) VideoCodec(videoCodec string) ApiGetVideoStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r ApiGetVideoStreamByContainerRequest) SubtitleCodec(subtitleCodec string) ApiGetVideoStreamByContainerRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r ApiGetVideoStreamByContainerRequest) TranscodeReasons(transcodeReasons string) ApiGetVideoStreamByContainerRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiGetVideoStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) ApiGetVideoStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiGetVideoStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) ApiGetVideoStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r ApiGetVideoStreamByContainerRequest) Context(context EncodingContext) ApiGetVideoStreamByContainerRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r ApiGetVideoStreamByContainerRequest) StreamOptions(streamOptions map[string]string) ApiGetVideoStreamByContainerRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r ApiGetVideoStreamByContainerRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) ApiGetVideoStreamByContainerRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r ApiGetVideoStreamByContainerRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetVideoStreamByContainerExecute(r)
}

/*
GetVideoStreamByContainer Gets a video stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
 @return ApiGetVideoStreamByContainerRequest
*/
func (a *VideosAPIService) GetVideoStreamByContainer(ctx context.Context, itemId string, container string) ApiGetVideoStreamByContainerRequest {
	return ApiGetVideoStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		container: container,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VideosAPIService) GetVideoStreamByContainerExecute(r ApiGetVideoStreamByContainerRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.GetVideoStreamByContainer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/stream.{container}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"video/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHeadVideoStreamRequest struct {
	ctx context.Context
	ApiService VideosAPI
	itemId string
	container *string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *SubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *EncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
func (r ApiHeadVideoStreamRequest) Container(container string) ApiHeadVideoStreamRequest {
	r.container = &container
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r ApiHeadVideoStreamRequest) Static(static bool) ApiHeadVideoStreamRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r ApiHeadVideoStreamRequest) Params(params string) ApiHeadVideoStreamRequest {
	r.params = &params
	return r
}

// The tag.
func (r ApiHeadVideoStreamRequest) Tag(tag string) ApiHeadVideoStreamRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
// Deprecated
func (r ApiHeadVideoStreamRequest) DeviceProfileId(deviceProfileId string) ApiHeadVideoStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r ApiHeadVideoStreamRequest) PlaySessionId(playSessionId string) ApiHeadVideoStreamRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r ApiHeadVideoStreamRequest) SegmentContainer(segmentContainer string) ApiHeadVideoStreamRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r ApiHeadVideoStreamRequest) SegmentLength(segmentLength int32) ApiHeadVideoStreamRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r ApiHeadVideoStreamRequest) MinSegments(minSegments int32) ApiHeadVideoStreamRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r ApiHeadVideoStreamRequest) MediaSourceId(mediaSourceId string) ApiHeadVideoStreamRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiHeadVideoStreamRequest) DeviceId(deviceId string) ApiHeadVideoStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r ApiHeadVideoStreamRequest) AudioCodec(audioCodec string) ApiHeadVideoStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiHeadVideoStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiHeadVideoStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r ApiHeadVideoStreamRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) ApiHeadVideoStreamRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r ApiHeadVideoStreamRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) ApiHeadVideoStreamRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r ApiHeadVideoStreamRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) ApiHeadVideoStreamRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r ApiHeadVideoStreamRequest) AudioSampleRate(audioSampleRate int32) ApiHeadVideoStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r ApiHeadVideoStreamRequest) MaxAudioBitDepth(maxAudioBitDepth int32) ApiHeadVideoStreamRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiHeadVideoStreamRequest) AudioBitRate(audioBitRate int32) ApiHeadVideoStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r ApiHeadVideoStreamRequest) AudioChannels(audioChannels int32) ApiHeadVideoStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r ApiHeadVideoStreamRequest) MaxAudioChannels(maxAudioChannels int32) ApiHeadVideoStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r ApiHeadVideoStreamRequest) Profile(profile string) ApiHeadVideoStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r ApiHeadVideoStreamRequest) Level(level string) ApiHeadVideoStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadVideoStreamRequest) Framerate(framerate float32) ApiHeadVideoStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadVideoStreamRequest) MaxFramerate(maxFramerate float32) ApiHeadVideoStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiHeadVideoStreamRequest) CopyTimestamps(copyTimestamps bool) ApiHeadVideoStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r ApiHeadVideoStreamRequest) StartTimeTicks(startTimeTicks int64) ApiHeadVideoStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiHeadVideoStreamRequest) Width(width int32) ApiHeadVideoStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiHeadVideoStreamRequest) Height(height int32) ApiHeadVideoStreamRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiHeadVideoStreamRequest) MaxWidth(maxWidth int32) ApiHeadVideoStreamRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiHeadVideoStreamRequest) MaxHeight(maxHeight int32) ApiHeadVideoStreamRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiHeadVideoStreamRequest) VideoBitRate(videoBitRate int32) ApiHeadVideoStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiHeadVideoStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiHeadVideoStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiHeadVideoStreamRequest) SubtitleMethod(subtitleMethod SubtitleDeliveryMethod) ApiHeadVideoStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiHeadVideoStreamRequest) MaxRefFrames(maxRefFrames int32) ApiHeadVideoStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r ApiHeadVideoStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) ApiHeadVideoStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r ApiHeadVideoStreamRequest) RequireAvc(requireAvc bool) ApiHeadVideoStreamRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r ApiHeadVideoStreamRequest) DeInterlace(deInterlace bool) ApiHeadVideoStreamRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r ApiHeadVideoStreamRequest) RequireNonAnamorphic(requireNonAnamorphic bool) ApiHeadVideoStreamRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r ApiHeadVideoStreamRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) ApiHeadVideoStreamRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r ApiHeadVideoStreamRequest) CpuCoreLimit(cpuCoreLimit int32) ApiHeadVideoStreamRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r ApiHeadVideoStreamRequest) LiveStreamId(liveStreamId string) ApiHeadVideoStreamRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r ApiHeadVideoStreamRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) ApiHeadVideoStreamRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r ApiHeadVideoStreamRequest) VideoCodec(videoCodec string) ApiHeadVideoStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r ApiHeadVideoStreamRequest) SubtitleCodec(subtitleCodec string) ApiHeadVideoStreamRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r ApiHeadVideoStreamRequest) TranscodeReasons(transcodeReasons string) ApiHeadVideoStreamRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiHeadVideoStreamRequest) AudioStreamIndex(audioStreamIndex int32) ApiHeadVideoStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiHeadVideoStreamRequest) VideoStreamIndex(videoStreamIndex int32) ApiHeadVideoStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r ApiHeadVideoStreamRequest) Context(context EncodingContext) ApiHeadVideoStreamRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r ApiHeadVideoStreamRequest) StreamOptions(streamOptions map[string]string) ApiHeadVideoStreamRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r ApiHeadVideoStreamRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) ApiHeadVideoStreamRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r ApiHeadVideoStreamRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.HeadVideoStreamExecute(r)
}

/*
HeadVideoStream Gets a video stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiHeadVideoStreamRequest
*/
func (a *VideosAPIService) HeadVideoStream(ctx context.Context, itemId string) ApiHeadVideoStreamRequest {
	return ApiHeadVideoStreamRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VideosAPIService) HeadVideoStreamExecute(r ApiHeadVideoStreamRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.HeadVideoStream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.container != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "container", r.container, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"video/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHeadVideoStreamByContainerRequest struct {
	ctx context.Context
	ApiService VideosAPI
	itemId string
	container string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *SubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *EncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r ApiHeadVideoStreamByContainerRequest) Static(static bool) ApiHeadVideoStreamByContainerRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r ApiHeadVideoStreamByContainerRequest) Params(params string) ApiHeadVideoStreamByContainerRequest {
	r.params = &params
	return r
}

// The tag.
func (r ApiHeadVideoStreamByContainerRequest) Tag(tag string) ApiHeadVideoStreamByContainerRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
func (r ApiHeadVideoStreamByContainerRequest) DeviceProfileId(deviceProfileId string) ApiHeadVideoStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r ApiHeadVideoStreamByContainerRequest) PlaySessionId(playSessionId string) ApiHeadVideoStreamByContainerRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r ApiHeadVideoStreamByContainerRequest) SegmentContainer(segmentContainer string) ApiHeadVideoStreamByContainerRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r ApiHeadVideoStreamByContainerRequest) SegmentLength(segmentLength int32) ApiHeadVideoStreamByContainerRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r ApiHeadVideoStreamByContainerRequest) MinSegments(minSegments int32) ApiHeadVideoStreamByContainerRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r ApiHeadVideoStreamByContainerRequest) MediaSourceId(mediaSourceId string) ApiHeadVideoStreamByContainerRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r ApiHeadVideoStreamByContainerRequest) DeviceId(deviceId string) ApiHeadVideoStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r ApiHeadVideoStreamByContainerRequest) AudioCodec(audioCodec string) ApiHeadVideoStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r ApiHeadVideoStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) ApiHeadVideoStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r ApiHeadVideoStreamByContainerRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) ApiHeadVideoStreamByContainerRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r ApiHeadVideoStreamByContainerRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) ApiHeadVideoStreamByContainerRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r ApiHeadVideoStreamByContainerRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) ApiHeadVideoStreamByContainerRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r ApiHeadVideoStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) ApiHeadVideoStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r ApiHeadVideoStreamByContainerRequest) MaxAudioBitDepth(maxAudioBitDepth int32) ApiHeadVideoStreamByContainerRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r ApiHeadVideoStreamByContainerRequest) AudioBitRate(audioBitRate int32) ApiHeadVideoStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r ApiHeadVideoStreamByContainerRequest) AudioChannels(audioChannels int32) ApiHeadVideoStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r ApiHeadVideoStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) ApiHeadVideoStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r ApiHeadVideoStreamByContainerRequest) Profile(profile string) ApiHeadVideoStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r ApiHeadVideoStreamByContainerRequest) Level(level string) ApiHeadVideoStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadVideoStreamByContainerRequest) Framerate(framerate float32) ApiHeadVideoStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r ApiHeadVideoStreamByContainerRequest) MaxFramerate(maxFramerate float32) ApiHeadVideoStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r ApiHeadVideoStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) ApiHeadVideoStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r ApiHeadVideoStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) ApiHeadVideoStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r ApiHeadVideoStreamByContainerRequest) Width(width int32) ApiHeadVideoStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r ApiHeadVideoStreamByContainerRequest) Height(height int32) ApiHeadVideoStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r ApiHeadVideoStreamByContainerRequest) MaxWidth(maxWidth int32) ApiHeadVideoStreamByContainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r ApiHeadVideoStreamByContainerRequest) MaxHeight(maxHeight int32) ApiHeadVideoStreamByContainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r ApiHeadVideoStreamByContainerRequest) VideoBitRate(videoBitRate int32) ApiHeadVideoStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r ApiHeadVideoStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiHeadVideoStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r ApiHeadVideoStreamByContainerRequest) SubtitleMethod(subtitleMethod SubtitleDeliveryMethod) ApiHeadVideoStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r ApiHeadVideoStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) ApiHeadVideoStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r ApiHeadVideoStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) ApiHeadVideoStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r ApiHeadVideoStreamByContainerRequest) RequireAvc(requireAvc bool) ApiHeadVideoStreamByContainerRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r ApiHeadVideoStreamByContainerRequest) DeInterlace(deInterlace bool) ApiHeadVideoStreamByContainerRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r ApiHeadVideoStreamByContainerRequest) RequireNonAnamorphic(requireNonAnamorphic bool) ApiHeadVideoStreamByContainerRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r ApiHeadVideoStreamByContainerRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) ApiHeadVideoStreamByContainerRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r ApiHeadVideoStreamByContainerRequest) CpuCoreLimit(cpuCoreLimit int32) ApiHeadVideoStreamByContainerRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r ApiHeadVideoStreamByContainerRequest) LiveStreamId(liveStreamId string) ApiHeadVideoStreamByContainerRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r ApiHeadVideoStreamByContainerRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) ApiHeadVideoStreamByContainerRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r ApiHeadVideoStreamByContainerRequest) VideoCodec(videoCodec string) ApiHeadVideoStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r ApiHeadVideoStreamByContainerRequest) SubtitleCodec(subtitleCodec string) ApiHeadVideoStreamByContainerRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r ApiHeadVideoStreamByContainerRequest) TranscodeReasons(transcodeReasons string) ApiHeadVideoStreamByContainerRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r ApiHeadVideoStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) ApiHeadVideoStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r ApiHeadVideoStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) ApiHeadVideoStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r ApiHeadVideoStreamByContainerRequest) Context(context EncodingContext) ApiHeadVideoStreamByContainerRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r ApiHeadVideoStreamByContainerRequest) StreamOptions(streamOptions map[string]string) ApiHeadVideoStreamByContainerRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r ApiHeadVideoStreamByContainerRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) ApiHeadVideoStreamByContainerRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r ApiHeadVideoStreamByContainerRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.HeadVideoStreamByContainerExecute(r)
}

/*
HeadVideoStreamByContainer Gets a video stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
 @return ApiHeadVideoStreamByContainerRequest
*/
func (a *VideosAPIService) HeadVideoStreamByContainer(ctx context.Context, itemId string, container string) ApiHeadVideoStreamByContainerRequest {
	return ApiHeadVideoStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		container: container,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VideosAPIService) HeadVideoStreamByContainerExecute(r ApiHeadVideoStreamByContainerRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.HeadVideoStreamByContainer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/stream.{container}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"video/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMergeVersionsRequest struct {
	ctx context.Context
	ApiService VideosAPI
	ids *[]string
}

// Item id list. This allows multiple, comma delimited.
func (r ApiMergeVersionsRequest) Ids(ids []string) ApiMergeVersionsRequest {
	r.ids = &ids
	return r
}

func (r ApiMergeVersionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.MergeVersionsExecute(r)
}

/*
MergeVersions Merges videos into a single record.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMergeVersionsRequest
*/
func (a *VideosAPIService) MergeVersions(ctx context.Context) ApiMergeVersionsRequest {
	return ApiMergeVersionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VideosAPIService) MergeVersionsExecute(r ApiMergeVersionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.MergeVersions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/MergeVersions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	{
		t := *r.ids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ids", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
