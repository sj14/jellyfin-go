/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type PlaystateAPI interface {

	/*
	MarkPlayedItem Marks an item as played for user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId Item id.
	@return ApiMarkPlayedItemRequest
	*/
	MarkPlayedItem(ctx context.Context, itemId string) ApiMarkPlayedItemRequest

	// MarkPlayedItemExecute executes the request
	//  @return UserItemDataDto
	MarkPlayedItemExecute(r ApiMarkPlayedItemRequest) (*UserItemDataDto, *http.Response, error)

	/*
	MarkUnplayedItem Marks an item as unplayed for user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId Item id.
	@return ApiMarkUnplayedItemRequest
	*/
	MarkUnplayedItem(ctx context.Context, itemId string) ApiMarkUnplayedItemRequest

	// MarkUnplayedItemExecute executes the request
	//  @return UserItemDataDto
	MarkUnplayedItemExecute(r ApiMarkUnplayedItemRequest) (*UserItemDataDto, *http.Response, error)

	/*
	OnPlaybackProgress Reports a session's playback progress.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId Item id.
	@return ApiOnPlaybackProgressRequest
	*/
	OnPlaybackProgress(ctx context.Context, itemId string) ApiOnPlaybackProgressRequest

	// OnPlaybackProgressExecute executes the request
	OnPlaybackProgressExecute(r ApiOnPlaybackProgressRequest) (*http.Response, error)

	/*
	OnPlaybackStart Reports that a session has begun playing an item.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId Item id.
	@return ApiOnPlaybackStartRequest
	*/
	OnPlaybackStart(ctx context.Context, itemId string) ApiOnPlaybackStartRequest

	// OnPlaybackStartExecute executes the request
	OnPlaybackStartExecute(r ApiOnPlaybackStartRequest) (*http.Response, error)

	/*
	OnPlaybackStopped Reports that a session has stopped playing an item.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId Item id.
	@return ApiOnPlaybackStoppedRequest
	*/
	OnPlaybackStopped(ctx context.Context, itemId string) ApiOnPlaybackStoppedRequest

	// OnPlaybackStoppedExecute executes the request
	OnPlaybackStoppedExecute(r ApiOnPlaybackStoppedRequest) (*http.Response, error)

	/*
	PingPlaybackSession Pings a playback session.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPingPlaybackSessionRequest
	*/
	PingPlaybackSession(ctx context.Context) ApiPingPlaybackSessionRequest

	// PingPlaybackSessionExecute executes the request
	PingPlaybackSessionExecute(r ApiPingPlaybackSessionRequest) (*http.Response, error)

	/*
	ReportPlaybackProgress Reports playback progress within a session.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReportPlaybackProgressRequest
	*/
	ReportPlaybackProgress(ctx context.Context) ApiReportPlaybackProgressRequest

	// ReportPlaybackProgressExecute executes the request
	ReportPlaybackProgressExecute(r ApiReportPlaybackProgressRequest) (*http.Response, error)

	/*
	ReportPlaybackStart Reports playback has started within a session.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReportPlaybackStartRequest
	*/
	ReportPlaybackStart(ctx context.Context) ApiReportPlaybackStartRequest

	// ReportPlaybackStartExecute executes the request
	ReportPlaybackStartExecute(r ApiReportPlaybackStartRequest) (*http.Response, error)

	/*
	ReportPlaybackStopped Reports playback has stopped within a session.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReportPlaybackStoppedRequest
	*/
	ReportPlaybackStopped(ctx context.Context) ApiReportPlaybackStoppedRequest

	// ReportPlaybackStoppedExecute executes the request
	ReportPlaybackStoppedExecute(r ApiReportPlaybackStoppedRequest) (*http.Response, error)
}

// PlaystateAPIService PlaystateAPI service
type PlaystateAPIService service

type ApiMarkPlayedItemRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	itemId string
	userId *string
	datePlayed *time.Time
}

// User id.
func (r ApiMarkPlayedItemRequest) UserId(userId string) ApiMarkPlayedItemRequest {
	r.userId = &userId
	return r
}

// Optional. The date the item was played.
func (r ApiMarkPlayedItemRequest) DatePlayed(datePlayed time.Time) ApiMarkPlayedItemRequest {
	r.datePlayed = &datePlayed
	return r
}

func (r ApiMarkPlayedItemRequest) Execute() (*UserItemDataDto, *http.Response, error) {
	return r.ApiService.MarkPlayedItemExecute(r)
}

/*
MarkPlayedItem Marks an item as played for user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return ApiMarkPlayedItemRequest
*/
func (a *PlaystateAPIService) MarkPlayedItem(ctx context.Context, itemId string) ApiMarkPlayedItemRequest {
	return ApiMarkPlayedItemRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return UserItemDataDto
func (a *PlaystateAPIService) MarkPlayedItemExecute(r ApiMarkPlayedItemRequest) (*UserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.MarkPlayedItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserPlayedItems/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.datePlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "datePlayed", r.datePlayed, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMarkUnplayedItemRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	itemId string
	userId *string
}

// User id.
func (r ApiMarkUnplayedItemRequest) UserId(userId string) ApiMarkUnplayedItemRequest {
	r.userId = &userId
	return r
}

func (r ApiMarkUnplayedItemRequest) Execute() (*UserItemDataDto, *http.Response, error) {
	return r.ApiService.MarkUnplayedItemExecute(r)
}

/*
MarkUnplayedItem Marks an item as unplayed for user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return ApiMarkUnplayedItemRequest
*/
func (a *PlaystateAPIService) MarkUnplayedItem(ctx context.Context, itemId string) ApiMarkUnplayedItemRequest {
	return ApiMarkUnplayedItemRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return UserItemDataDto
func (a *PlaystateAPIService) MarkUnplayedItemExecute(r ApiMarkUnplayedItemRequest) (*UserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.MarkUnplayedItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserPlayedItems/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOnPlaybackProgressRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	itemId string
	mediaSourceId *string
	positionTicks *int64
	audioStreamIndex *int32
	subtitleStreamIndex *int32
	volumeLevel *int32
	playMethod *PlayMethod
	liveStreamId *string
	playSessionId *string
	repeatMode *RepeatMode
	isPaused *bool
	isMuted *bool
}

// The id of the MediaSource.
func (r ApiOnPlaybackProgressRequest) MediaSourceId(mediaSourceId string) ApiOnPlaybackProgressRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms.
func (r ApiOnPlaybackProgressRequest) PositionTicks(positionTicks int64) ApiOnPlaybackProgressRequest {
	r.positionTicks = &positionTicks
	return r
}

// The audio stream index.
func (r ApiOnPlaybackProgressRequest) AudioStreamIndex(audioStreamIndex int32) ApiOnPlaybackProgressRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// The subtitle stream index.
func (r ApiOnPlaybackProgressRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiOnPlaybackProgressRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Scale of 0-100.
func (r ApiOnPlaybackProgressRequest) VolumeLevel(volumeLevel int32) ApiOnPlaybackProgressRequest {
	r.volumeLevel = &volumeLevel
	return r
}

// The play method.
func (r ApiOnPlaybackProgressRequest) PlayMethod(playMethod PlayMethod) ApiOnPlaybackProgressRequest {
	r.playMethod = &playMethod
	return r
}

// The live stream id.
func (r ApiOnPlaybackProgressRequest) LiveStreamId(liveStreamId string) ApiOnPlaybackProgressRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// The play session id.
func (r ApiOnPlaybackProgressRequest) PlaySessionId(playSessionId string) ApiOnPlaybackProgressRequest {
	r.playSessionId = &playSessionId
	return r
}

// The repeat mode.
func (r ApiOnPlaybackProgressRequest) RepeatMode(repeatMode RepeatMode) ApiOnPlaybackProgressRequest {
	r.repeatMode = &repeatMode
	return r
}

// Indicates if the player is paused.
func (r ApiOnPlaybackProgressRequest) IsPaused(isPaused bool) ApiOnPlaybackProgressRequest {
	r.isPaused = &isPaused
	return r
}

// Indicates if the player is muted.
func (r ApiOnPlaybackProgressRequest) IsMuted(isMuted bool) ApiOnPlaybackProgressRequest {
	r.isMuted = &isMuted
	return r
}

func (r ApiOnPlaybackProgressRequest) Execute() (*http.Response, error) {
	return r.ApiService.OnPlaybackProgressExecute(r)
}

/*
OnPlaybackProgress Reports a session's playback progress.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return ApiOnPlaybackProgressRequest
*/
func (a *PlaystateAPIService) OnPlaybackProgress(ctx context.Context, itemId string) ApiOnPlaybackProgressRequest {
	return ApiOnPlaybackProgressRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) OnPlaybackProgressExecute(r ApiOnPlaybackProgressRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.OnPlaybackProgress")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PlayingItems/{itemId}/Progress"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.positionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "positionTicks", r.positionTicks, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.volumeLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeLevel", r.volumeLevel, "form", "")
	}
	if r.playMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playMethod", r.playMethod, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.repeatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repeatMode", r.repeatMode, "form", "")
	}
	if r.isPaused != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isPaused", r.isPaused, "form", "")
	} else {
		var defaultValue bool = false
		r.isPaused = &defaultValue
	}
	if r.isMuted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isMuted", r.isMuted, "form", "")
	} else {
		var defaultValue bool = false
		r.isMuted = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOnPlaybackStartRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	itemId string
	mediaSourceId *string
	audioStreamIndex *int32
	subtitleStreamIndex *int32
	playMethod *PlayMethod
	liveStreamId *string
	playSessionId *string
	canSeek *bool
}

// The id of the MediaSource.
func (r ApiOnPlaybackStartRequest) MediaSourceId(mediaSourceId string) ApiOnPlaybackStartRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The audio stream index.
func (r ApiOnPlaybackStartRequest) AudioStreamIndex(audioStreamIndex int32) ApiOnPlaybackStartRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// The subtitle stream index.
func (r ApiOnPlaybackStartRequest) SubtitleStreamIndex(subtitleStreamIndex int32) ApiOnPlaybackStartRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// The play method.
func (r ApiOnPlaybackStartRequest) PlayMethod(playMethod PlayMethod) ApiOnPlaybackStartRequest {
	r.playMethod = &playMethod
	return r
}

// The live stream id.
func (r ApiOnPlaybackStartRequest) LiveStreamId(liveStreamId string) ApiOnPlaybackStartRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// The play session id.
func (r ApiOnPlaybackStartRequest) PlaySessionId(playSessionId string) ApiOnPlaybackStartRequest {
	r.playSessionId = &playSessionId
	return r
}

// Indicates if the client can seek.
func (r ApiOnPlaybackStartRequest) CanSeek(canSeek bool) ApiOnPlaybackStartRequest {
	r.canSeek = &canSeek
	return r
}

func (r ApiOnPlaybackStartRequest) Execute() (*http.Response, error) {
	return r.ApiService.OnPlaybackStartExecute(r)
}

/*
OnPlaybackStart Reports that a session has begun playing an item.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return ApiOnPlaybackStartRequest
*/
func (a *PlaystateAPIService) OnPlaybackStart(ctx context.Context, itemId string) ApiOnPlaybackStartRequest {
	return ApiOnPlaybackStartRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) OnPlaybackStartExecute(r ApiOnPlaybackStartRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.OnPlaybackStart")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PlayingItems/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.playMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playMethod", r.playMethod, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.canSeek != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "canSeek", r.canSeek, "form", "")
	} else {
		var defaultValue bool = false
		r.canSeek = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOnPlaybackStoppedRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	itemId string
	mediaSourceId *string
	nextMediaType *string
	positionTicks *int64
	liveStreamId *string
	playSessionId *string
}

// The id of the MediaSource.
func (r ApiOnPlaybackStoppedRequest) MediaSourceId(mediaSourceId string) ApiOnPlaybackStoppedRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The next media type that will play.
func (r ApiOnPlaybackStoppedRequest) NextMediaType(nextMediaType string) ApiOnPlaybackStoppedRequest {
	r.nextMediaType = &nextMediaType
	return r
}

// Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms.
func (r ApiOnPlaybackStoppedRequest) PositionTicks(positionTicks int64) ApiOnPlaybackStoppedRequest {
	r.positionTicks = &positionTicks
	return r
}

// The live stream id.
func (r ApiOnPlaybackStoppedRequest) LiveStreamId(liveStreamId string) ApiOnPlaybackStoppedRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// The play session id.
func (r ApiOnPlaybackStoppedRequest) PlaySessionId(playSessionId string) ApiOnPlaybackStoppedRequest {
	r.playSessionId = &playSessionId
	return r
}

func (r ApiOnPlaybackStoppedRequest) Execute() (*http.Response, error) {
	return r.ApiService.OnPlaybackStoppedExecute(r)
}

/*
OnPlaybackStopped Reports that a session has stopped playing an item.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return ApiOnPlaybackStoppedRequest
*/
func (a *PlaystateAPIService) OnPlaybackStopped(ctx context.Context, itemId string) ApiOnPlaybackStoppedRequest {
	return ApiOnPlaybackStoppedRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) OnPlaybackStoppedExecute(r ApiOnPlaybackStoppedRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.OnPlaybackStopped")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PlayingItems/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.nextMediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextMediaType", r.nextMediaType, "form", "")
	}
	if r.positionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "positionTicks", r.positionTicks, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPingPlaybackSessionRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	playSessionId *string
}

// Playback session id.
func (r ApiPingPlaybackSessionRequest) PlaySessionId(playSessionId string) ApiPingPlaybackSessionRequest {
	r.playSessionId = &playSessionId
	return r
}

func (r ApiPingPlaybackSessionRequest) Execute() (*http.Response, error) {
	return r.ApiService.PingPlaybackSessionExecute(r)
}

/*
PingPlaybackSession Pings a playback session.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPingPlaybackSessionRequest
*/
func (a *PlaystateAPIService) PingPlaybackSession(ctx context.Context) ApiPingPlaybackSessionRequest {
	return ApiPingPlaybackSessionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) PingPlaybackSessionExecute(r ApiPingPlaybackSessionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.PingPlaybackSession")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Ping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.playSessionId == nil {
		return nil, reportError("playSessionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportPlaybackProgressRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	playbackProgressInfo *PlaybackProgressInfo
}

// The playback progress info.
func (r ApiReportPlaybackProgressRequest) PlaybackProgressInfo(playbackProgressInfo PlaybackProgressInfo) ApiReportPlaybackProgressRequest {
	r.playbackProgressInfo = &playbackProgressInfo
	return r
}

func (r ApiReportPlaybackProgressRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReportPlaybackProgressExecute(r)
}

/*
ReportPlaybackProgress Reports playback progress within a session.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportPlaybackProgressRequest
*/
func (a *PlaystateAPIService) ReportPlaybackProgress(ctx context.Context) ApiReportPlaybackProgressRequest {
	return ApiReportPlaybackProgressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) ReportPlaybackProgressExecute(r ApiReportPlaybackProgressRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.ReportPlaybackProgress")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Progress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.playbackProgressInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportPlaybackStartRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	playbackStartInfo *PlaybackStartInfo
}

// The playback start info.
func (r ApiReportPlaybackStartRequest) PlaybackStartInfo(playbackStartInfo PlaybackStartInfo) ApiReportPlaybackStartRequest {
	r.playbackStartInfo = &playbackStartInfo
	return r
}

func (r ApiReportPlaybackStartRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReportPlaybackStartExecute(r)
}

/*
ReportPlaybackStart Reports playback has started within a session.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportPlaybackStartRequest
*/
func (a *PlaystateAPIService) ReportPlaybackStart(ctx context.Context) ApiReportPlaybackStartRequest {
	return ApiReportPlaybackStartRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) ReportPlaybackStartExecute(r ApiReportPlaybackStartRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.ReportPlaybackStart")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.playbackStartInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportPlaybackStoppedRequest struct {
	ctx context.Context
	ApiService PlaystateAPI
	playbackStopInfo *PlaybackStopInfo
}

// The playback stop info.
func (r ApiReportPlaybackStoppedRequest) PlaybackStopInfo(playbackStopInfo PlaybackStopInfo) ApiReportPlaybackStoppedRequest {
	r.playbackStopInfo = &playbackStopInfo
	return r
}

func (r ApiReportPlaybackStoppedRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReportPlaybackStoppedExecute(r)
}

/*
ReportPlaybackStopped Reports playback has stopped within a session.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportPlaybackStoppedRequest
*/
func (a *PlaystateAPIService) ReportPlaybackStopped(ctx context.Context) ApiReportPlaybackStoppedRequest {
	return ApiReportPlaybackStoppedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) ReportPlaybackStoppedExecute(r ApiReportPlaybackStoppedRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.ReportPlaybackStopped")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Stopped"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.playbackStopInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
