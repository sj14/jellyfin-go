/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
	"reflect"
)


type TrailersAPI interface {

	/*
	GetTrailers Finds movies and trailers similar to a given trailer.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTrailersRequest
	*/
	GetTrailers(ctx context.Context) ApiGetTrailersRequest

	// GetTrailersExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetTrailersExecute(r ApiGetTrailersRequest) (*BaseItemDtoQueryResult, *http.Response, error)
}

// TrailersAPIService TrailersAPI service
type TrailersAPIService service

type ApiGetTrailersRequest struct {
	ctx context.Context
	ApiService TrailersAPI
	userId *string
	maxOfficialRating *string
	hasThemeSong *bool
	hasThemeVideo *bool
	hasSubtitles *bool
	hasSpecialFeature *bool
	hasTrailer *bool
	adjacentTo *string
	parentIndexNumber *int32
	hasParentalRating *bool
	isHd *bool
	is4K *bool
	locationTypes *[]LocationType
	excludeLocationTypes *[]LocationType
	isMissing *bool
	isUnaired *bool
	minCommunityRating *float64
	minCriticRating *float64
	minPremiereDate *time.Time
	minDateLastSaved *time.Time
	minDateLastSavedForUser *time.Time
	maxPremiereDate *time.Time
	hasOverview *bool
	hasImdbId *bool
	hasTmdbId *bool
	hasTvdbId *bool
	isMovie *bool
	isSeries *bool
	isNews *bool
	isKids *bool
	isSports *bool
	excludeItemIds *[]string
	startIndex *int32
	limit *int32
	recursive *bool
	searchTerm *string
	sortOrder *[]SortOrder
	parentId *string
	fields *[]ItemFields
	excludeItemTypes *[]BaseItemKind
	filters *[]ItemFilter
	isFavorite *bool
	mediaTypes *[]MediaType
	imageTypes *[]ImageType
	sortBy *[]ItemSortBy
	isPlayed *bool
	genres *[]string
	officialRatings *[]string
	tags *[]string
	years *[]int32
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
	person *string
	personIds *[]string
	personTypes *[]string
	studios *[]string
	artists *[]string
	excludeArtistIds *[]string
	artistIds *[]string
	albumArtistIds *[]string
	contributingArtistIds *[]string
	albums *[]string
	albumIds *[]string
	ids *[]string
	videoTypes *[]VideoType
	minOfficialRating *string
	isLocked *bool
	isPlaceHolder *bool
	hasOfficialRating *bool
	collapseBoxSetItems *bool
	minWidth *int32
	minHeight *int32
	maxWidth *int32
	maxHeight *int32
	is3D *bool
	seriesStatus *[]SeriesStatus
	nameStartsWithOrGreater *string
	nameStartsWith *string
	nameLessThan *string
	studioIds *[]string
	genreIds *[]string
	enableTotalRecordCount *bool
	enableImages *bool
}

// The user id supplied as query parameter; this is required when not using an API key.
func (r ApiGetTrailersRequest) UserId(userId string) ApiGetTrailersRequest {
	r.userId = &userId
	return r
}

// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetTrailersRequest) MaxOfficialRating(maxOfficialRating string) ApiGetTrailersRequest {
	r.maxOfficialRating = &maxOfficialRating
	return r
}

// Optional filter by items with theme songs.
func (r ApiGetTrailersRequest) HasThemeSong(hasThemeSong bool) ApiGetTrailersRequest {
	r.hasThemeSong = &hasThemeSong
	return r
}

// Optional filter by items with theme videos.
func (r ApiGetTrailersRequest) HasThemeVideo(hasThemeVideo bool) ApiGetTrailersRequest {
	r.hasThemeVideo = &hasThemeVideo
	return r
}

// Optional filter by items with subtitles.
func (r ApiGetTrailersRequest) HasSubtitles(hasSubtitles bool) ApiGetTrailersRequest {
	r.hasSubtitles = &hasSubtitles
	return r
}

// Optional filter by items with special features.
func (r ApiGetTrailersRequest) HasSpecialFeature(hasSpecialFeature bool) ApiGetTrailersRequest {
	r.hasSpecialFeature = &hasSpecialFeature
	return r
}

// Optional filter by items with trailers.
func (r ApiGetTrailersRequest) HasTrailer(hasTrailer bool) ApiGetTrailersRequest {
	r.hasTrailer = &hasTrailer
	return r
}

// Optional. Return items that are siblings of a supplied item.
func (r ApiGetTrailersRequest) AdjacentTo(adjacentTo string) ApiGetTrailersRequest {
	r.adjacentTo = &adjacentTo
	return r
}

// Optional filter by parent index number.
func (r ApiGetTrailersRequest) ParentIndexNumber(parentIndexNumber int32) ApiGetTrailersRequest {
	r.parentIndexNumber = &parentIndexNumber
	return r
}

// Optional filter by items that have or do not have a parental rating.
func (r ApiGetTrailersRequest) HasParentalRating(hasParentalRating bool) ApiGetTrailersRequest {
	r.hasParentalRating = &hasParentalRating
	return r
}

// Optional filter by items that are HD or not.
func (r ApiGetTrailersRequest) IsHd(isHd bool) ApiGetTrailersRequest {
	r.isHd = &isHd
	return r
}

// Optional filter by items that are 4K or not.
func (r ApiGetTrailersRequest) Is4K(is4K bool) ApiGetTrailersRequest {
	r.is4K = &is4K
	return r
}

// Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
func (r ApiGetTrailersRequest) LocationTypes(locationTypes []LocationType) ApiGetTrailersRequest {
	r.locationTypes = &locationTypes
	return r
}

// Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
func (r ApiGetTrailersRequest) ExcludeLocationTypes(excludeLocationTypes []LocationType) ApiGetTrailersRequest {
	r.excludeLocationTypes = &excludeLocationTypes
	return r
}

// Optional filter by items that are missing episodes or not.
func (r ApiGetTrailersRequest) IsMissing(isMissing bool) ApiGetTrailersRequest {
	r.isMissing = &isMissing
	return r
}

// Optional filter by items that are unaired episodes or not.
func (r ApiGetTrailersRequest) IsUnaired(isUnaired bool) ApiGetTrailersRequest {
	r.isUnaired = &isUnaired
	return r
}

// Optional filter by minimum community rating.
func (r ApiGetTrailersRequest) MinCommunityRating(minCommunityRating float64) ApiGetTrailersRequest {
	r.minCommunityRating = &minCommunityRating
	return r
}

// Optional filter by minimum critic rating.
func (r ApiGetTrailersRequest) MinCriticRating(minCriticRating float64) ApiGetTrailersRequest {
	r.minCriticRating = &minCriticRating
	return r
}

// Optional. The minimum premiere date. Format &#x3D; ISO.
func (r ApiGetTrailersRequest) MinPremiereDate(minPremiereDate time.Time) ApiGetTrailersRequest {
	r.minPremiereDate = &minPremiereDate
	return r
}

// Optional. The minimum last saved date. Format &#x3D; ISO.
func (r ApiGetTrailersRequest) MinDateLastSaved(minDateLastSaved time.Time) ApiGetTrailersRequest {
	r.minDateLastSaved = &minDateLastSaved
	return r
}

// Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
func (r ApiGetTrailersRequest) MinDateLastSavedForUser(minDateLastSavedForUser time.Time) ApiGetTrailersRequest {
	r.minDateLastSavedForUser = &minDateLastSavedForUser
	return r
}

// Optional. The maximum premiere date. Format &#x3D; ISO.
func (r ApiGetTrailersRequest) MaxPremiereDate(maxPremiereDate time.Time) ApiGetTrailersRequest {
	r.maxPremiereDate = &maxPremiereDate
	return r
}

// Optional filter by items that have an overview or not.
func (r ApiGetTrailersRequest) HasOverview(hasOverview bool) ApiGetTrailersRequest {
	r.hasOverview = &hasOverview
	return r
}

// Optional filter by items that have an IMDb id or not.
func (r ApiGetTrailersRequest) HasImdbId(hasImdbId bool) ApiGetTrailersRequest {
	r.hasImdbId = &hasImdbId
	return r
}

// Optional filter by items that have a TMDb id or not.
func (r ApiGetTrailersRequest) HasTmdbId(hasTmdbId bool) ApiGetTrailersRequest {
	r.hasTmdbId = &hasTmdbId
	return r
}

// Optional filter by items that have a TVDb id or not.
func (r ApiGetTrailersRequest) HasTvdbId(hasTvdbId bool) ApiGetTrailersRequest {
	r.hasTvdbId = &hasTvdbId
	return r
}

// Optional filter for live tv movies.
func (r ApiGetTrailersRequest) IsMovie(isMovie bool) ApiGetTrailersRequest {
	r.isMovie = &isMovie
	return r
}

// Optional filter for live tv series.
func (r ApiGetTrailersRequest) IsSeries(isSeries bool) ApiGetTrailersRequest {
	r.isSeries = &isSeries
	return r
}

// Optional filter for live tv news.
func (r ApiGetTrailersRequest) IsNews(isNews bool) ApiGetTrailersRequest {
	r.isNews = &isNews
	return r
}

// Optional filter for live tv kids.
func (r ApiGetTrailersRequest) IsKids(isKids bool) ApiGetTrailersRequest {
	r.isKids = &isKids
	return r
}

// Optional filter for live tv sports.
func (r ApiGetTrailersRequest) IsSports(isSports bool) ApiGetTrailersRequest {
	r.isSports = &isSports
	return r
}

// Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
func (r ApiGetTrailersRequest) ExcludeItemIds(excludeItemIds []string) ApiGetTrailersRequest {
	r.excludeItemIds = &excludeItemIds
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ApiGetTrailersRequest) StartIndex(startIndex int32) ApiGetTrailersRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetTrailersRequest) Limit(limit int32) ApiGetTrailersRequest {
	r.limit = &limit
	return r
}

// When searching within folders, this determines whether or not the search will be recursive. true/false.
func (r ApiGetTrailersRequest) Recursive(recursive bool) ApiGetTrailersRequest {
	r.recursive = &recursive
	return r
}

// Optional. Filter based on a search term.
func (r ApiGetTrailersRequest) SearchTerm(searchTerm string) ApiGetTrailersRequest {
	r.searchTerm = &searchTerm
	return r
}

// Sort Order - Ascending, Descending.
func (r ApiGetTrailersRequest) SortOrder(sortOrder []SortOrder) ApiGetTrailersRequest {
	r.sortOrder = &sortOrder
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root.
func (r ApiGetTrailersRequest) ParentId(parentId string) ApiGetTrailersRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
func (r ApiGetTrailersRequest) Fields(fields []ItemFields) ApiGetTrailersRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
func (r ApiGetTrailersRequest) ExcludeItemTypes(excludeItemTypes []BaseItemKind) ApiGetTrailersRequest {
	r.excludeItemTypes = &excludeItemTypes
	return r
}

// Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
func (r ApiGetTrailersRequest) Filters(filters []ItemFilter) ApiGetTrailersRequest {
	r.filters = &filters
	return r
}

// Optional filter by items that are marked as favorite, or not.
func (r ApiGetTrailersRequest) IsFavorite(isFavorite bool) ApiGetTrailersRequest {
	r.isFavorite = &isFavorite
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ApiGetTrailersRequest) MediaTypes(mediaTypes []MediaType) ApiGetTrailersRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
func (r ApiGetTrailersRequest) ImageTypes(imageTypes []ImageType) ApiGetTrailersRequest {
	r.imageTypes = &imageTypes
	return r
}

// Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
func (r ApiGetTrailersRequest) SortBy(sortBy []ItemSortBy) ApiGetTrailersRequest {
	r.sortBy = &sortBy
	return r
}

// Optional filter by items that are played, or not.
func (r ApiGetTrailersRequest) IsPlayed(isPlayed bool) ApiGetTrailersRequest {
	r.isPlayed = &isPlayed
	return r
}

// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) Genres(genres []string) ApiGetTrailersRequest {
	r.genres = &genres
	return r
}

// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) OfficialRatings(officialRatings []string) ApiGetTrailersRequest {
	r.officialRatings = &officialRatings
	return r
}

// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) Tags(tags []string) ApiGetTrailersRequest {
	r.tags = &tags
	return r
}

// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
func (r ApiGetTrailersRequest) Years(years []int32) ApiGetTrailersRequest {
	r.years = &years
	return r
}

// Optional, include user data.
func (r ApiGetTrailersRequest) EnableUserData(enableUserData bool) ApiGetTrailersRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type.
func (r ApiGetTrailersRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetTrailersRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetTrailersRequest) EnableImageTypes(enableImageTypes []ImageType) ApiGetTrailersRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ApiGetTrailersRequest) Person(person string) ApiGetTrailersRequest {
	r.person = &person
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person id.
func (r ApiGetTrailersRequest) PersonIds(personIds []string) ApiGetTrailersRequest {
	r.personIds = &personIds
	return r
}

// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
func (r ApiGetTrailersRequest) PersonTypes(personTypes []string) ApiGetTrailersRequest {
	r.personTypes = &personTypes
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) Studios(studios []string) ApiGetTrailersRequest {
	r.studios = &studios
	return r
}

// Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) Artists(artists []string) ApiGetTrailersRequest {
	r.artists = &artists
	return r
}

// Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) ExcludeArtistIds(excludeArtistIds []string) ApiGetTrailersRequest {
	r.excludeArtistIds = &excludeArtistIds
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified artist id.
func (r ApiGetTrailersRequest) ArtistIds(artistIds []string) ApiGetTrailersRequest {
	r.artistIds = &artistIds
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified album artist id.
func (r ApiGetTrailersRequest) AlbumArtistIds(albumArtistIds []string) ApiGetTrailersRequest {
	r.albumArtistIds = &albumArtistIds
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
func (r ApiGetTrailersRequest) ContributingArtistIds(contributingArtistIds []string) ApiGetTrailersRequest {
	r.contributingArtistIds = &contributingArtistIds
	return r
}

// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) Albums(albums []string) ApiGetTrailersRequest {
	r.albums = &albums
	return r
}

// Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) AlbumIds(albumIds []string) ApiGetTrailersRequest {
	r.albumIds = &albumIds
	return r
}

// Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited.
func (r ApiGetTrailersRequest) Ids(ids []string) ApiGetTrailersRequest {
	r.ids = &ids
	return r
}

// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
func (r ApiGetTrailersRequest) VideoTypes(videoTypes []VideoType) ApiGetTrailersRequest {
	r.videoTypes = &videoTypes
	return r
}

// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
func (r ApiGetTrailersRequest) MinOfficialRating(minOfficialRating string) ApiGetTrailersRequest {
	r.minOfficialRating = &minOfficialRating
	return r
}

// Optional filter by items that are locked.
func (r ApiGetTrailersRequest) IsLocked(isLocked bool) ApiGetTrailersRequest {
	r.isLocked = &isLocked
	return r
}

// Optional filter by items that are placeholders.
func (r ApiGetTrailersRequest) IsPlaceHolder(isPlaceHolder bool) ApiGetTrailersRequest {
	r.isPlaceHolder = &isPlaceHolder
	return r
}

// Optional filter by items that have official ratings.
func (r ApiGetTrailersRequest) HasOfficialRating(hasOfficialRating bool) ApiGetTrailersRequest {
	r.hasOfficialRating = &hasOfficialRating
	return r
}

// Whether or not to hide items behind their boxsets.
func (r ApiGetTrailersRequest) CollapseBoxSetItems(collapseBoxSetItems bool) ApiGetTrailersRequest {
	r.collapseBoxSetItems = &collapseBoxSetItems
	return r
}

// Optional. Filter by the minimum width of the item.
func (r ApiGetTrailersRequest) MinWidth(minWidth int32) ApiGetTrailersRequest {
	r.minWidth = &minWidth
	return r
}

// Optional. Filter by the minimum height of the item.
func (r ApiGetTrailersRequest) MinHeight(minHeight int32) ApiGetTrailersRequest {
	r.minHeight = &minHeight
	return r
}

// Optional. Filter by the maximum width of the item.
func (r ApiGetTrailersRequest) MaxWidth(maxWidth int32) ApiGetTrailersRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. Filter by the maximum height of the item.
func (r ApiGetTrailersRequest) MaxHeight(maxHeight int32) ApiGetTrailersRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional filter by items that are 3D, or not.
func (r ApiGetTrailersRequest) Is3D(is3D bool) ApiGetTrailersRequest {
	r.is3D = &is3D
	return r
}

// Optional filter by Series Status. Allows multiple, comma delimited.
func (r ApiGetTrailersRequest) SeriesStatus(seriesStatus []SeriesStatus) ApiGetTrailersRequest {
	r.seriesStatus = &seriesStatus
	return r
}

// Optional filter by items whose name is sorted equally or greater than a given input string.
func (r ApiGetTrailersRequest) NameStartsWithOrGreater(nameStartsWithOrGreater string) ApiGetTrailersRequest {
	r.nameStartsWithOrGreater = &nameStartsWithOrGreater
	return r
}

// Optional filter by items whose name is sorted equally than a given input string.
func (r ApiGetTrailersRequest) NameStartsWith(nameStartsWith string) ApiGetTrailersRequest {
	r.nameStartsWith = &nameStartsWith
	return r
}

// Optional filter by items whose name is equally or lesser than a given input string.
func (r ApiGetTrailersRequest) NameLessThan(nameLessThan string) ApiGetTrailersRequest {
	r.nameLessThan = &nameLessThan
	return r
}

// Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) StudioIds(studioIds []string) ApiGetTrailersRequest {
	r.studioIds = &studioIds
	return r
}

// Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
func (r ApiGetTrailersRequest) GenreIds(genreIds []string) ApiGetTrailersRequest {
	r.genreIds = &genreIds
	return r
}

// Optional. Enable the total record count.
func (r ApiGetTrailersRequest) EnableTotalRecordCount(enableTotalRecordCount bool) ApiGetTrailersRequest {
	r.enableTotalRecordCount = &enableTotalRecordCount
	return r
}

// Optional, include image information in output.
func (r ApiGetTrailersRequest) EnableImages(enableImages bool) ApiGetTrailersRequest {
	r.enableImages = &enableImages
	return r
}

func (r ApiGetTrailersRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetTrailersExecute(r)
}

/*
GetTrailers Finds movies and trailers similar to a given trailer.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTrailersRequest
*/
func (a *TrailersAPIService) GetTrailers(ctx context.Context) ApiGetTrailersRequest {
	return ApiGetTrailersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *TrailersAPIService) GetTrailersExecute(r ApiGetTrailersRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrailersAPIService.GetTrailers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Trailers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.maxOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxOfficialRating", r.maxOfficialRating, "form", "")
	}
	if r.hasThemeSong != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasThemeSong", r.hasThemeSong, "form", "")
	}
	if r.hasThemeVideo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasThemeVideo", r.hasThemeVideo, "form", "")
	}
	if r.hasSubtitles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasSubtitles", r.hasSubtitles, "form", "")
	}
	if r.hasSpecialFeature != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasSpecialFeature", r.hasSpecialFeature, "form", "")
	}
	if r.hasTrailer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasTrailer", r.hasTrailer, "form", "")
	}
	if r.adjacentTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adjacentTo", r.adjacentTo, "form", "")
	}
	if r.parentIndexNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentIndexNumber", r.parentIndexNumber, "form", "")
	}
	if r.hasParentalRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasParentalRating", r.hasParentalRating, "form", "")
	}
	if r.isHd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isHd", r.isHd, "form", "")
	}
	if r.is4K != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is4K", r.is4K, "form", "")
	}
	if r.locationTypes != nil {
		t := *r.locationTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "locationTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "locationTypes", t, "form", "multi")
		}
	}
	if r.excludeLocationTypes != nil {
		t := *r.excludeLocationTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeLocationTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeLocationTypes", t, "form", "multi")
		}
	}
	if r.isMissing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isMissing", r.isMissing, "form", "")
	}
	if r.isUnaired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isUnaired", r.isUnaired, "form", "")
	}
	if r.minCommunityRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCommunityRating", r.minCommunityRating, "form", "")
	}
	if r.minCriticRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCriticRating", r.minCriticRating, "form", "")
	}
	if r.minPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minPremiereDate", r.minPremiereDate, "form", "")
	}
	if r.minDateLastSaved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minDateLastSaved", r.minDateLastSaved, "form", "")
	}
	if r.minDateLastSavedForUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minDateLastSavedForUser", r.minDateLastSavedForUser, "form", "")
	}
	if r.maxPremiereDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxPremiereDate", r.maxPremiereDate, "form", "")
	}
	if r.hasOverview != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasOverview", r.hasOverview, "form", "")
	}
	if r.hasImdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasImdbId", r.hasImdbId, "form", "")
	}
	if r.hasTmdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasTmdbId", r.hasTmdbId, "form", "")
	}
	if r.hasTvdbId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasTvdbId", r.hasTvdbId, "form", "")
	}
	if r.isMovie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isMovie", r.isMovie, "form", "")
	}
	if r.isSeries != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isSeries", r.isSeries, "form", "")
	}
	if r.isNews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isNews", r.isNews, "form", "")
	}
	if r.isKids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isKids", r.isKids, "form", "")
	}
	if r.isSports != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isSports", r.isSports, "form", "")
	}
	if r.excludeItemIds != nil {
		t := *r.excludeItemIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeItemIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeItemIds", t, "form", "multi")
		}
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.recursive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recursive", r.recursive, "form", "")
	}
	if r.searchTerm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchTerm", r.searchTerm, "form", "")
	}
	if r.sortOrder != nil {
		t := *r.sortOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", t, "form", "multi")
		}
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeItemTypes != nil {
		t := *r.excludeItemTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeItemTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeItemTypes", t, "form", "multi")
		}
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filters", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filters", t, "form", "multi")
		}
	}
	if r.isFavorite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isFavorite", r.isFavorite, "form", "")
	}
	if r.mediaTypes != nil {
		t := *r.mediaTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mediaTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mediaTypes", t, "form", "multi")
		}
	}
	if r.imageTypes != nil {
		t := *r.imageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypes", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.isPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isPlayed", r.isPlayed, "form", "")
	}
	if r.genres != nil {
		t := *r.genres
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "genres", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "genres", t, "form", "multi")
		}
	}
	if r.officialRatings != nil {
		t := *r.officialRatings
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "officialRatings", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "officialRatings", t, "form", "multi")
		}
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.years != nil {
		t := *r.years
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "years", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "years", t, "form", "multi")
		}
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	if r.person != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "person", r.person, "form", "")
	}
	if r.personIds != nil {
		t := *r.personIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "personIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "personIds", t, "form", "multi")
		}
	}
	if r.personTypes != nil {
		t := *r.personTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "personTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "personTypes", t, "form", "multi")
		}
	}
	if r.studios != nil {
		t := *r.studios
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "studios", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "studios", t, "form", "multi")
		}
	}
	if r.artists != nil {
		t := *r.artists
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "artists", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "artists", t, "form", "multi")
		}
	}
	if r.excludeArtistIds != nil {
		t := *r.excludeArtistIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeArtistIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeArtistIds", t, "form", "multi")
		}
	}
	if r.artistIds != nil {
		t := *r.artistIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "artistIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "artistIds", t, "form", "multi")
		}
	}
	if r.albumArtistIds != nil {
		t := *r.albumArtistIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "albumArtistIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "albumArtistIds", t, "form", "multi")
		}
	}
	if r.contributingArtistIds != nil {
		t := *r.contributingArtistIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contributingArtistIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contributingArtistIds", t, "form", "multi")
		}
	}
	if r.albums != nil {
		t := *r.albums
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "albums", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "albums", t, "form", "multi")
		}
	}
	if r.albumIds != nil {
		t := *r.albumIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "albumIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "albumIds", t, "form", "multi")
		}
	}
	if r.ids != nil {
		t := *r.ids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ids", t, "form", "multi")
		}
	}
	if r.videoTypes != nil {
		t := *r.videoTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "videoTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "videoTypes", t, "form", "multi")
		}
	}
	if r.minOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minOfficialRating", r.minOfficialRating, "form", "")
	}
	if r.isLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isLocked", r.isLocked, "form", "")
	}
	if r.isPlaceHolder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isPlaceHolder", r.isPlaceHolder, "form", "")
	}
	if r.hasOfficialRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasOfficialRating", r.hasOfficialRating, "form", "")
	}
	if r.collapseBoxSetItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collapseBoxSetItems", r.collapseBoxSetItems, "form", "")
	}
	if r.minWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minWidth", r.minWidth, "form", "")
	}
	if r.minHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minHeight", r.minHeight, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.is3D != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is3D", r.is3D, "form", "")
	}
	if r.seriesStatus != nil {
		t := *r.seriesStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "seriesStatus", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "seriesStatus", t, "form", "multi")
		}
	}
	if r.nameStartsWithOrGreater != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameStartsWithOrGreater", r.nameStartsWithOrGreater, "form", "")
	}
	if r.nameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameStartsWith", r.nameStartsWith, "form", "")
	}
	if r.nameLessThan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameLessThan", r.nameLessThan, "form", "")
	}
	if r.studioIds != nil {
		t := *r.studioIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "studioIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "studioIds", t, "form", "multi")
		}
	}
	if r.genreIds != nil {
		t := *r.genreIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "genreIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "genreIds", t, "form", "multi")
		}
	}
	if r.enableTotalRecordCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableTotalRecordCount", r.enableTotalRecordCount, "form", "")
	} else {
		var defaultValue bool = true
		r.enableTotalRecordCount = &defaultValue
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	} else {
		var defaultValue bool = true
		r.enableImages = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
