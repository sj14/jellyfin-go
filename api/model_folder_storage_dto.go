/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the FolderStorageDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderStorageDto{}

// FolderStorageDto Contains information about a specific folder.
type FolderStorageDto struct {
	// Gets the path of the folder in question.
	Path *string `json:"Path,omitempty"`
	// Gets the free space of the underlying storage device of the Jellyfin.Api.Models.SystemInfoDtos.FolderStorageDto.Path.
	FreeSpace *int64 `json:"FreeSpace,omitempty"`
	// Gets the used space of the underlying storage device of the Jellyfin.Api.Models.SystemInfoDtos.FolderStorageDto.Path.
	UsedSpace *int64 `json:"UsedSpace,omitempty"`
	// Gets the kind of storage device of the Jellyfin.Api.Models.SystemInfoDtos.FolderStorageDto.Path.
	StorageType NullableString `json:"StorageType,omitempty"`
	// Gets the Device Identifier.
	DeviceId NullableString `json:"DeviceId,omitempty"`
}

// NewFolderStorageDto instantiates a new FolderStorageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderStorageDto() *FolderStorageDto {
	this := FolderStorageDto{}
	return &this
}

// NewFolderStorageDtoWithDefaults instantiates a new FolderStorageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderStorageDtoWithDefaults() *FolderStorageDto {
	this := FolderStorageDto{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FolderStorageDto) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderStorageDto) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FolderStorageDto) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FolderStorageDto) SetPath(v string) {
	o.Path = &v
}

// GetFreeSpace returns the FreeSpace field value if set, zero value otherwise.
func (o *FolderStorageDto) GetFreeSpace() int64 {
	if o == nil || IsNil(o.FreeSpace) {
		var ret int64
		return ret
	}
	return *o.FreeSpace
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderStorageDto) GetFreeSpaceOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeSpace) {
		return nil, false
	}
	return o.FreeSpace, true
}

// HasFreeSpace returns a boolean if a field has been set.
func (o *FolderStorageDto) HasFreeSpace() bool {
	if o != nil && !IsNil(o.FreeSpace) {
		return true
	}

	return false
}

// SetFreeSpace gets a reference to the given int64 and assigns it to the FreeSpace field.
func (o *FolderStorageDto) SetFreeSpace(v int64) {
	o.FreeSpace = &v
}

// GetUsedSpace returns the UsedSpace field value if set, zero value otherwise.
func (o *FolderStorageDto) GetUsedSpace() int64 {
	if o == nil || IsNil(o.UsedSpace) {
		var ret int64
		return ret
	}
	return *o.UsedSpace
}

// GetUsedSpaceOk returns a tuple with the UsedSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderStorageDto) GetUsedSpaceOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedSpace) {
		return nil, false
	}
	return o.UsedSpace, true
}

// HasUsedSpace returns a boolean if a field has been set.
func (o *FolderStorageDto) HasUsedSpace() bool {
	if o != nil && !IsNil(o.UsedSpace) {
		return true
	}

	return false
}

// SetUsedSpace gets a reference to the given int64 and assigns it to the UsedSpace field.
func (o *FolderStorageDto) SetUsedSpace(v int64) {
	o.UsedSpace = &v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderStorageDto) GetStorageType() string {
	if o == nil || IsNil(o.StorageType.Get()) {
		var ret string
		return ret
	}
	return *o.StorageType.Get()
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderStorageDto) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageType.Get(), o.StorageType.IsSet()
}

// HasStorageType returns a boolean if a field has been set.
func (o *FolderStorageDto) HasStorageType() bool {
	if o != nil && o.StorageType.IsSet() {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given NullableString and assigns it to the StorageType field.
func (o *FolderStorageDto) SetStorageType(v string) {
	o.StorageType.Set(&v)
}
// SetStorageTypeNil sets the value for StorageType to be an explicit nil
func (o *FolderStorageDto) SetStorageTypeNil() {
	o.StorageType.Set(nil)
}

// UnsetStorageType ensures that no value is present for StorageType, not even an explicit nil
func (o *FolderStorageDto) UnsetStorageType() {
	o.StorageType.Unset()
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderStorageDto) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceId.Get()
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderStorageDto) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceId.Get(), o.DeviceId.IsSet()
}

// HasDeviceId returns a boolean if a field has been set.
func (o *FolderStorageDto) HasDeviceId() bool {
	if o != nil && o.DeviceId.IsSet() {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given NullableString and assigns it to the DeviceId field.
func (o *FolderStorageDto) SetDeviceId(v string) {
	o.DeviceId.Set(&v)
}
// SetDeviceIdNil sets the value for DeviceId to be an explicit nil
func (o *FolderStorageDto) SetDeviceIdNil() {
	o.DeviceId.Set(nil)
}

// UnsetDeviceId ensures that no value is present for DeviceId, not even an explicit nil
func (o *FolderStorageDto) UnsetDeviceId() {
	o.DeviceId.Unset()
}

func (o FolderStorageDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderStorageDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	if !IsNil(o.FreeSpace) {
		toSerialize["FreeSpace"] = o.FreeSpace
	}
	if !IsNil(o.UsedSpace) {
		toSerialize["UsedSpace"] = o.UsedSpace
	}
	if o.StorageType.IsSet() {
		toSerialize["StorageType"] = o.StorageType.Get()
	}
	if o.DeviceId.IsSet() {
		toSerialize["DeviceId"] = o.DeviceId.Get()
	}
	return toSerialize, nil
}

type NullableFolderStorageDto struct {
	value *FolderStorageDto
	isSet bool
}

func (v NullableFolderStorageDto) Get() *FolderStorageDto {
	return v.value
}

func (v *NullableFolderStorageDto) Set(val *FolderStorageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderStorageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderStorageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderStorageDto(val *FolderStorageDto) *NullableFolderStorageDto {
	return &NullableFolderStorageDto{value: val, isSet: true}
}

func (v NullableFolderStorageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderStorageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


