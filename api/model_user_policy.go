/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPolicy{}

// UserPolicy struct for UserPolicy
type UserPolicy struct {
	// Gets or sets a value indicating whether this instance is administrator.
	IsAdministrator *bool `json:"IsAdministrator,omitempty"`
	// Gets or sets a value indicating whether this instance is hidden.
	IsHidden *bool `json:"IsHidden,omitempty"`
	// Gets or sets a value indicating whether this instance can manage collections.
	EnableCollectionManagement *bool `json:"EnableCollectionManagement,omitempty"`
	// Gets or sets a value indicating whether this instance can manage subtitles.
	EnableSubtitleManagement *bool `json:"EnableSubtitleManagement,omitempty"`
	// Gets or sets a value indicating whether this user can manage lyrics.
	EnableLyricManagement *bool `json:"EnableLyricManagement,omitempty"`
	// Gets or sets a value indicating whether this instance is disabled.
	IsDisabled *bool `json:"IsDisabled,omitempty"`
	// Gets or sets the max parental rating.
	MaxParentalRating NullableInt32 `json:"MaxParentalRating,omitempty"`
	BlockedTags []string `json:"BlockedTags,omitempty"`
	AllowedTags []string `json:"AllowedTags,omitempty"`
	EnableUserPreferenceAccess *bool `json:"EnableUserPreferenceAccess,omitempty"`
	AccessSchedules []AccessSchedule `json:"AccessSchedules,omitempty"`
	BlockUnratedItems []UnratedItem `json:"BlockUnratedItems,omitempty"`
	EnableRemoteControlOfOtherUsers *bool `json:"EnableRemoteControlOfOtherUsers,omitempty"`
	EnableSharedDeviceControl *bool `json:"EnableSharedDeviceControl,omitempty"`
	EnableRemoteAccess *bool `json:"EnableRemoteAccess,omitempty"`
	EnableLiveTvManagement *bool `json:"EnableLiveTvManagement,omitempty"`
	EnableLiveTvAccess *bool `json:"EnableLiveTvAccess,omitempty"`
	EnableMediaPlayback *bool `json:"EnableMediaPlayback,omitempty"`
	EnableAudioPlaybackTranscoding *bool `json:"EnableAudioPlaybackTranscoding,omitempty"`
	EnableVideoPlaybackTranscoding *bool `json:"EnableVideoPlaybackTranscoding,omitempty"`
	EnablePlaybackRemuxing *bool `json:"EnablePlaybackRemuxing,omitempty"`
	ForceRemoteSourceTranscoding *bool `json:"ForceRemoteSourceTranscoding,omitempty"`
	EnableContentDeletion *bool `json:"EnableContentDeletion,omitempty"`
	EnableContentDeletionFromFolders []string `json:"EnableContentDeletionFromFolders,omitempty"`
	EnableContentDownloading *bool `json:"EnableContentDownloading,omitempty"`
	// Gets or sets a value indicating whether [enable synchronize].
	EnableSyncTranscoding *bool `json:"EnableSyncTranscoding,omitempty"`
	EnableMediaConversion *bool `json:"EnableMediaConversion,omitempty"`
	EnabledDevices []string `json:"EnabledDevices,omitempty"`
	EnableAllDevices *bool `json:"EnableAllDevices,omitempty"`
	EnabledChannels []string `json:"EnabledChannels,omitempty"`
	EnableAllChannels *bool `json:"EnableAllChannels,omitempty"`
	EnabledFolders []string `json:"EnabledFolders,omitempty"`
	EnableAllFolders *bool `json:"EnableAllFolders,omitempty"`
	InvalidLoginAttemptCount *int32 `json:"InvalidLoginAttemptCount,omitempty"`
	LoginAttemptsBeforeLockout *int32 `json:"LoginAttemptsBeforeLockout,omitempty"`
	MaxActiveSessions *int32 `json:"MaxActiveSessions,omitempty"`
	EnablePublicSharing *bool `json:"EnablePublicSharing,omitempty"`
	BlockedMediaFolders []string `json:"BlockedMediaFolders,omitempty"`
	BlockedChannels []string `json:"BlockedChannels,omitempty"`
	RemoteClientBitrateLimit *int32 `json:"RemoteClientBitrateLimit,omitempty"`
	AuthenticationProviderId string `json:"AuthenticationProviderId"`
	PasswordResetProviderId string `json:"PasswordResetProviderId"`
	// Enum SyncPlayUserAccessType.
	SyncPlayAccess *SyncPlayUserAccessType `json:"SyncPlayAccess,omitempty"`
}

type _UserPolicy UserPolicy

// NewUserPolicy instantiates a new UserPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPolicy(authenticationProviderId string, passwordResetProviderId string) *UserPolicy {
	this := UserPolicy{}
	var enableCollectionManagement bool = false
	this.EnableCollectionManagement = &enableCollectionManagement
	var enableSubtitleManagement bool = false
	this.EnableSubtitleManagement = &enableSubtitleManagement
	var enableLyricManagement bool = false
	this.EnableLyricManagement = &enableLyricManagement
	this.AuthenticationProviderId = authenticationProviderId
	this.PasswordResetProviderId = passwordResetProviderId
	return &this
}

// NewUserPolicyWithDefaults instantiates a new UserPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPolicyWithDefaults() *UserPolicy {
	this := UserPolicy{}
	var enableCollectionManagement bool = false
	this.EnableCollectionManagement = &enableCollectionManagement
	var enableSubtitleManagement bool = false
	this.EnableSubtitleManagement = &enableSubtitleManagement
	var enableLyricManagement bool = false
	this.EnableLyricManagement = &enableLyricManagement
	return &this
}

// GetIsAdministrator returns the IsAdministrator field value if set, zero value otherwise.
func (o *UserPolicy) GetIsAdministrator() bool {
	if o == nil || IsNil(o.IsAdministrator) {
		var ret bool
		return ret
	}
	return *o.IsAdministrator
}

// GetIsAdministratorOk returns a tuple with the IsAdministrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetIsAdministratorOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdministrator) {
		return nil, false
	}
	return o.IsAdministrator, true
}

// HasIsAdministrator returns a boolean if a field has been set.
func (o *UserPolicy) HasIsAdministrator() bool {
	if o != nil && !IsNil(o.IsAdministrator) {
		return true
	}

	return false
}

// SetIsAdministrator gets a reference to the given bool and assigns it to the IsAdministrator field.
func (o *UserPolicy) SetIsAdministrator(v bool) {
	o.IsAdministrator = &v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *UserPolicy) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *UserPolicy) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *UserPolicy) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetEnableCollectionManagement returns the EnableCollectionManagement field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableCollectionManagement() bool {
	if o == nil || IsNil(o.EnableCollectionManagement) {
		var ret bool
		return ret
	}
	return *o.EnableCollectionManagement
}

// GetEnableCollectionManagementOk returns a tuple with the EnableCollectionManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableCollectionManagementOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCollectionManagement) {
		return nil, false
	}
	return o.EnableCollectionManagement, true
}

// HasEnableCollectionManagement returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableCollectionManagement() bool {
	if o != nil && !IsNil(o.EnableCollectionManagement) {
		return true
	}

	return false
}

// SetEnableCollectionManagement gets a reference to the given bool and assigns it to the EnableCollectionManagement field.
func (o *UserPolicy) SetEnableCollectionManagement(v bool) {
	o.EnableCollectionManagement = &v
}

// GetEnableSubtitleManagement returns the EnableSubtitleManagement field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableSubtitleManagement() bool {
	if o == nil || IsNil(o.EnableSubtitleManagement) {
		var ret bool
		return ret
	}
	return *o.EnableSubtitleManagement
}

// GetEnableSubtitleManagementOk returns a tuple with the EnableSubtitleManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableSubtitleManagementOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSubtitleManagement) {
		return nil, false
	}
	return o.EnableSubtitleManagement, true
}

// HasEnableSubtitleManagement returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableSubtitleManagement() bool {
	if o != nil && !IsNil(o.EnableSubtitleManagement) {
		return true
	}

	return false
}

// SetEnableSubtitleManagement gets a reference to the given bool and assigns it to the EnableSubtitleManagement field.
func (o *UserPolicy) SetEnableSubtitleManagement(v bool) {
	o.EnableSubtitleManagement = &v
}

// GetEnableLyricManagement returns the EnableLyricManagement field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableLyricManagement() bool {
	if o == nil || IsNil(o.EnableLyricManagement) {
		var ret bool
		return ret
	}
	return *o.EnableLyricManagement
}

// GetEnableLyricManagementOk returns a tuple with the EnableLyricManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableLyricManagementOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLyricManagement) {
		return nil, false
	}
	return o.EnableLyricManagement, true
}

// HasEnableLyricManagement returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableLyricManagement() bool {
	if o != nil && !IsNil(o.EnableLyricManagement) {
		return true
	}

	return false
}

// SetEnableLyricManagement gets a reference to the given bool and assigns it to the EnableLyricManagement field.
func (o *UserPolicy) SetEnableLyricManagement(v bool) {
	o.EnableLyricManagement = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *UserPolicy) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *UserPolicy) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *UserPolicy) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetMaxParentalRating returns the MaxParentalRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetMaxParentalRating() int32 {
	if o == nil || IsNil(o.MaxParentalRating.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxParentalRating.Get()
}

// GetMaxParentalRatingOk returns a tuple with the MaxParentalRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetMaxParentalRatingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxParentalRating.Get(), o.MaxParentalRating.IsSet()
}

// HasMaxParentalRating returns a boolean if a field has been set.
func (o *UserPolicy) HasMaxParentalRating() bool {
	if o != nil && o.MaxParentalRating.IsSet() {
		return true
	}

	return false
}

// SetMaxParentalRating gets a reference to the given NullableInt32 and assigns it to the MaxParentalRating field.
func (o *UserPolicy) SetMaxParentalRating(v int32) {
	o.MaxParentalRating.Set(&v)
}
// SetMaxParentalRatingNil sets the value for MaxParentalRating to be an explicit nil
func (o *UserPolicy) SetMaxParentalRatingNil() {
	o.MaxParentalRating.Set(nil)
}

// UnsetMaxParentalRating ensures that no value is present for MaxParentalRating, not even an explicit nil
func (o *UserPolicy) UnsetMaxParentalRating() {
	o.MaxParentalRating.Unset()
}

// GetBlockedTags returns the BlockedTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetBlockedTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BlockedTags
}

// GetBlockedTagsOk returns a tuple with the BlockedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetBlockedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedTags) {
		return nil, false
	}
	return o.BlockedTags, true
}

// HasBlockedTags returns a boolean if a field has been set.
func (o *UserPolicy) HasBlockedTags() bool {
	if o != nil && !IsNil(o.BlockedTags) {
		return true
	}

	return false
}

// SetBlockedTags gets a reference to the given []string and assigns it to the BlockedTags field.
func (o *UserPolicy) SetBlockedTags(v []string) {
	o.BlockedTags = v
}

// GetAllowedTags returns the AllowedTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetAllowedTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedTags
}

// GetAllowedTagsOk returns a tuple with the AllowedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetAllowedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedTags) {
		return nil, false
	}
	return o.AllowedTags, true
}

// HasAllowedTags returns a boolean if a field has been set.
func (o *UserPolicy) HasAllowedTags() bool {
	if o != nil && !IsNil(o.AllowedTags) {
		return true
	}

	return false
}

// SetAllowedTags gets a reference to the given []string and assigns it to the AllowedTags field.
func (o *UserPolicy) SetAllowedTags(v []string) {
	o.AllowedTags = v
}

// GetEnableUserPreferenceAccess returns the EnableUserPreferenceAccess field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableUserPreferenceAccess() bool {
	if o == nil || IsNil(o.EnableUserPreferenceAccess) {
		var ret bool
		return ret
	}
	return *o.EnableUserPreferenceAccess
}

// GetEnableUserPreferenceAccessOk returns a tuple with the EnableUserPreferenceAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableUserPreferenceAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUserPreferenceAccess) {
		return nil, false
	}
	return o.EnableUserPreferenceAccess, true
}

// HasEnableUserPreferenceAccess returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableUserPreferenceAccess() bool {
	if o != nil && !IsNil(o.EnableUserPreferenceAccess) {
		return true
	}

	return false
}

// SetEnableUserPreferenceAccess gets a reference to the given bool and assigns it to the EnableUserPreferenceAccess field.
func (o *UserPolicy) SetEnableUserPreferenceAccess(v bool) {
	o.EnableUserPreferenceAccess = &v
}

// GetAccessSchedules returns the AccessSchedules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetAccessSchedules() []AccessSchedule {
	if o == nil {
		var ret []AccessSchedule
		return ret
	}
	return o.AccessSchedules
}

// GetAccessSchedulesOk returns a tuple with the AccessSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetAccessSchedulesOk() ([]AccessSchedule, bool) {
	if o == nil || IsNil(o.AccessSchedules) {
		return nil, false
	}
	return o.AccessSchedules, true
}

// HasAccessSchedules returns a boolean if a field has been set.
func (o *UserPolicy) HasAccessSchedules() bool {
	if o != nil && !IsNil(o.AccessSchedules) {
		return true
	}

	return false
}

// SetAccessSchedules gets a reference to the given []AccessSchedule and assigns it to the AccessSchedules field.
func (o *UserPolicy) SetAccessSchedules(v []AccessSchedule) {
	o.AccessSchedules = v
}

// GetBlockUnratedItems returns the BlockUnratedItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetBlockUnratedItems() []UnratedItem {
	if o == nil {
		var ret []UnratedItem
		return ret
	}
	return o.BlockUnratedItems
}

// GetBlockUnratedItemsOk returns a tuple with the BlockUnratedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetBlockUnratedItemsOk() ([]UnratedItem, bool) {
	if o == nil || IsNil(o.BlockUnratedItems) {
		return nil, false
	}
	return o.BlockUnratedItems, true
}

// HasBlockUnratedItems returns a boolean if a field has been set.
func (o *UserPolicy) HasBlockUnratedItems() bool {
	if o != nil && !IsNil(o.BlockUnratedItems) {
		return true
	}

	return false
}

// SetBlockUnratedItems gets a reference to the given []UnratedItem and assigns it to the BlockUnratedItems field.
func (o *UserPolicy) SetBlockUnratedItems(v []UnratedItem) {
	o.BlockUnratedItems = v
}

// GetEnableRemoteControlOfOtherUsers returns the EnableRemoteControlOfOtherUsers field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableRemoteControlOfOtherUsers() bool {
	if o == nil || IsNil(o.EnableRemoteControlOfOtherUsers) {
		var ret bool
		return ret
	}
	return *o.EnableRemoteControlOfOtherUsers
}

// GetEnableRemoteControlOfOtherUsersOk returns a tuple with the EnableRemoteControlOfOtherUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableRemoteControlOfOtherUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRemoteControlOfOtherUsers) {
		return nil, false
	}
	return o.EnableRemoteControlOfOtherUsers, true
}

// HasEnableRemoteControlOfOtherUsers returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableRemoteControlOfOtherUsers() bool {
	if o != nil && !IsNil(o.EnableRemoteControlOfOtherUsers) {
		return true
	}

	return false
}

// SetEnableRemoteControlOfOtherUsers gets a reference to the given bool and assigns it to the EnableRemoteControlOfOtherUsers field.
func (o *UserPolicy) SetEnableRemoteControlOfOtherUsers(v bool) {
	o.EnableRemoteControlOfOtherUsers = &v
}

// GetEnableSharedDeviceControl returns the EnableSharedDeviceControl field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableSharedDeviceControl() bool {
	if o == nil || IsNil(o.EnableSharedDeviceControl) {
		var ret bool
		return ret
	}
	return *o.EnableSharedDeviceControl
}

// GetEnableSharedDeviceControlOk returns a tuple with the EnableSharedDeviceControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableSharedDeviceControlOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSharedDeviceControl) {
		return nil, false
	}
	return o.EnableSharedDeviceControl, true
}

// HasEnableSharedDeviceControl returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableSharedDeviceControl() bool {
	if o != nil && !IsNil(o.EnableSharedDeviceControl) {
		return true
	}

	return false
}

// SetEnableSharedDeviceControl gets a reference to the given bool and assigns it to the EnableSharedDeviceControl field.
func (o *UserPolicy) SetEnableSharedDeviceControl(v bool) {
	o.EnableSharedDeviceControl = &v
}

// GetEnableRemoteAccess returns the EnableRemoteAccess field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableRemoteAccess() bool {
	if o == nil || IsNil(o.EnableRemoteAccess) {
		var ret bool
		return ret
	}
	return *o.EnableRemoteAccess
}

// GetEnableRemoteAccessOk returns a tuple with the EnableRemoteAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableRemoteAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRemoteAccess) {
		return nil, false
	}
	return o.EnableRemoteAccess, true
}

// HasEnableRemoteAccess returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableRemoteAccess() bool {
	if o != nil && !IsNil(o.EnableRemoteAccess) {
		return true
	}

	return false
}

// SetEnableRemoteAccess gets a reference to the given bool and assigns it to the EnableRemoteAccess field.
func (o *UserPolicy) SetEnableRemoteAccess(v bool) {
	o.EnableRemoteAccess = &v
}

// GetEnableLiveTvManagement returns the EnableLiveTvManagement field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableLiveTvManagement() bool {
	if o == nil || IsNil(o.EnableLiveTvManagement) {
		var ret bool
		return ret
	}
	return *o.EnableLiveTvManagement
}

// GetEnableLiveTvManagementOk returns a tuple with the EnableLiveTvManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableLiveTvManagementOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLiveTvManagement) {
		return nil, false
	}
	return o.EnableLiveTvManagement, true
}

// HasEnableLiveTvManagement returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableLiveTvManagement() bool {
	if o != nil && !IsNil(o.EnableLiveTvManagement) {
		return true
	}

	return false
}

// SetEnableLiveTvManagement gets a reference to the given bool and assigns it to the EnableLiveTvManagement field.
func (o *UserPolicy) SetEnableLiveTvManagement(v bool) {
	o.EnableLiveTvManagement = &v
}

// GetEnableLiveTvAccess returns the EnableLiveTvAccess field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableLiveTvAccess() bool {
	if o == nil || IsNil(o.EnableLiveTvAccess) {
		var ret bool
		return ret
	}
	return *o.EnableLiveTvAccess
}

// GetEnableLiveTvAccessOk returns a tuple with the EnableLiveTvAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableLiveTvAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLiveTvAccess) {
		return nil, false
	}
	return o.EnableLiveTvAccess, true
}

// HasEnableLiveTvAccess returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableLiveTvAccess() bool {
	if o != nil && !IsNil(o.EnableLiveTvAccess) {
		return true
	}

	return false
}

// SetEnableLiveTvAccess gets a reference to the given bool and assigns it to the EnableLiveTvAccess field.
func (o *UserPolicy) SetEnableLiveTvAccess(v bool) {
	o.EnableLiveTvAccess = &v
}

// GetEnableMediaPlayback returns the EnableMediaPlayback field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableMediaPlayback() bool {
	if o == nil || IsNil(o.EnableMediaPlayback) {
		var ret bool
		return ret
	}
	return *o.EnableMediaPlayback
}

// GetEnableMediaPlaybackOk returns a tuple with the EnableMediaPlayback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableMediaPlaybackOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMediaPlayback) {
		return nil, false
	}
	return o.EnableMediaPlayback, true
}

// HasEnableMediaPlayback returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableMediaPlayback() bool {
	if o != nil && !IsNil(o.EnableMediaPlayback) {
		return true
	}

	return false
}

// SetEnableMediaPlayback gets a reference to the given bool and assigns it to the EnableMediaPlayback field.
func (o *UserPolicy) SetEnableMediaPlayback(v bool) {
	o.EnableMediaPlayback = &v
}

// GetEnableAudioPlaybackTranscoding returns the EnableAudioPlaybackTranscoding field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableAudioPlaybackTranscoding() bool {
	if o == nil || IsNil(o.EnableAudioPlaybackTranscoding) {
		var ret bool
		return ret
	}
	return *o.EnableAudioPlaybackTranscoding
}

// GetEnableAudioPlaybackTranscodingOk returns a tuple with the EnableAudioPlaybackTranscoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableAudioPlaybackTranscodingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAudioPlaybackTranscoding) {
		return nil, false
	}
	return o.EnableAudioPlaybackTranscoding, true
}

// HasEnableAudioPlaybackTranscoding returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableAudioPlaybackTranscoding() bool {
	if o != nil && !IsNil(o.EnableAudioPlaybackTranscoding) {
		return true
	}

	return false
}

// SetEnableAudioPlaybackTranscoding gets a reference to the given bool and assigns it to the EnableAudioPlaybackTranscoding field.
func (o *UserPolicy) SetEnableAudioPlaybackTranscoding(v bool) {
	o.EnableAudioPlaybackTranscoding = &v
}

// GetEnableVideoPlaybackTranscoding returns the EnableVideoPlaybackTranscoding field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableVideoPlaybackTranscoding() bool {
	if o == nil || IsNil(o.EnableVideoPlaybackTranscoding) {
		var ret bool
		return ret
	}
	return *o.EnableVideoPlaybackTranscoding
}

// GetEnableVideoPlaybackTranscodingOk returns a tuple with the EnableVideoPlaybackTranscoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableVideoPlaybackTranscodingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVideoPlaybackTranscoding) {
		return nil, false
	}
	return o.EnableVideoPlaybackTranscoding, true
}

// HasEnableVideoPlaybackTranscoding returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableVideoPlaybackTranscoding() bool {
	if o != nil && !IsNil(o.EnableVideoPlaybackTranscoding) {
		return true
	}

	return false
}

// SetEnableVideoPlaybackTranscoding gets a reference to the given bool and assigns it to the EnableVideoPlaybackTranscoding field.
func (o *UserPolicy) SetEnableVideoPlaybackTranscoding(v bool) {
	o.EnableVideoPlaybackTranscoding = &v
}

// GetEnablePlaybackRemuxing returns the EnablePlaybackRemuxing field value if set, zero value otherwise.
func (o *UserPolicy) GetEnablePlaybackRemuxing() bool {
	if o == nil || IsNil(o.EnablePlaybackRemuxing) {
		var ret bool
		return ret
	}
	return *o.EnablePlaybackRemuxing
}

// GetEnablePlaybackRemuxingOk returns a tuple with the EnablePlaybackRemuxing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnablePlaybackRemuxingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePlaybackRemuxing) {
		return nil, false
	}
	return o.EnablePlaybackRemuxing, true
}

// HasEnablePlaybackRemuxing returns a boolean if a field has been set.
func (o *UserPolicy) HasEnablePlaybackRemuxing() bool {
	if o != nil && !IsNil(o.EnablePlaybackRemuxing) {
		return true
	}

	return false
}

// SetEnablePlaybackRemuxing gets a reference to the given bool and assigns it to the EnablePlaybackRemuxing field.
func (o *UserPolicy) SetEnablePlaybackRemuxing(v bool) {
	o.EnablePlaybackRemuxing = &v
}

// GetForceRemoteSourceTranscoding returns the ForceRemoteSourceTranscoding field value if set, zero value otherwise.
func (o *UserPolicy) GetForceRemoteSourceTranscoding() bool {
	if o == nil || IsNil(o.ForceRemoteSourceTranscoding) {
		var ret bool
		return ret
	}
	return *o.ForceRemoteSourceTranscoding
}

// GetForceRemoteSourceTranscodingOk returns a tuple with the ForceRemoteSourceTranscoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetForceRemoteSourceTranscodingOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceRemoteSourceTranscoding) {
		return nil, false
	}
	return o.ForceRemoteSourceTranscoding, true
}

// HasForceRemoteSourceTranscoding returns a boolean if a field has been set.
func (o *UserPolicy) HasForceRemoteSourceTranscoding() bool {
	if o != nil && !IsNil(o.ForceRemoteSourceTranscoding) {
		return true
	}

	return false
}

// SetForceRemoteSourceTranscoding gets a reference to the given bool and assigns it to the ForceRemoteSourceTranscoding field.
func (o *UserPolicy) SetForceRemoteSourceTranscoding(v bool) {
	o.ForceRemoteSourceTranscoding = &v
}

// GetEnableContentDeletion returns the EnableContentDeletion field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableContentDeletion() bool {
	if o == nil || IsNil(o.EnableContentDeletion) {
		var ret bool
		return ret
	}
	return *o.EnableContentDeletion
}

// GetEnableContentDeletionOk returns a tuple with the EnableContentDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableContentDeletionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableContentDeletion) {
		return nil, false
	}
	return o.EnableContentDeletion, true
}

// HasEnableContentDeletion returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableContentDeletion() bool {
	if o != nil && !IsNil(o.EnableContentDeletion) {
		return true
	}

	return false
}

// SetEnableContentDeletion gets a reference to the given bool and assigns it to the EnableContentDeletion field.
func (o *UserPolicy) SetEnableContentDeletion(v bool) {
	o.EnableContentDeletion = &v
}

// GetEnableContentDeletionFromFolders returns the EnableContentDeletionFromFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetEnableContentDeletionFromFolders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EnableContentDeletionFromFolders
}

// GetEnableContentDeletionFromFoldersOk returns a tuple with the EnableContentDeletionFromFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetEnableContentDeletionFromFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnableContentDeletionFromFolders) {
		return nil, false
	}
	return o.EnableContentDeletionFromFolders, true
}

// HasEnableContentDeletionFromFolders returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableContentDeletionFromFolders() bool {
	if o != nil && !IsNil(o.EnableContentDeletionFromFolders) {
		return true
	}

	return false
}

// SetEnableContentDeletionFromFolders gets a reference to the given []string and assigns it to the EnableContentDeletionFromFolders field.
func (o *UserPolicy) SetEnableContentDeletionFromFolders(v []string) {
	o.EnableContentDeletionFromFolders = v
}

// GetEnableContentDownloading returns the EnableContentDownloading field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableContentDownloading() bool {
	if o == nil || IsNil(o.EnableContentDownloading) {
		var ret bool
		return ret
	}
	return *o.EnableContentDownloading
}

// GetEnableContentDownloadingOk returns a tuple with the EnableContentDownloading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableContentDownloadingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableContentDownloading) {
		return nil, false
	}
	return o.EnableContentDownloading, true
}

// HasEnableContentDownloading returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableContentDownloading() bool {
	if o != nil && !IsNil(o.EnableContentDownloading) {
		return true
	}

	return false
}

// SetEnableContentDownloading gets a reference to the given bool and assigns it to the EnableContentDownloading field.
func (o *UserPolicy) SetEnableContentDownloading(v bool) {
	o.EnableContentDownloading = &v
}

// GetEnableSyncTranscoding returns the EnableSyncTranscoding field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableSyncTranscoding() bool {
	if o == nil || IsNil(o.EnableSyncTranscoding) {
		var ret bool
		return ret
	}
	return *o.EnableSyncTranscoding
}

// GetEnableSyncTranscodingOk returns a tuple with the EnableSyncTranscoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableSyncTranscodingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSyncTranscoding) {
		return nil, false
	}
	return o.EnableSyncTranscoding, true
}

// HasEnableSyncTranscoding returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableSyncTranscoding() bool {
	if o != nil && !IsNil(o.EnableSyncTranscoding) {
		return true
	}

	return false
}

// SetEnableSyncTranscoding gets a reference to the given bool and assigns it to the EnableSyncTranscoding field.
func (o *UserPolicy) SetEnableSyncTranscoding(v bool) {
	o.EnableSyncTranscoding = &v
}

// GetEnableMediaConversion returns the EnableMediaConversion field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableMediaConversion() bool {
	if o == nil || IsNil(o.EnableMediaConversion) {
		var ret bool
		return ret
	}
	return *o.EnableMediaConversion
}

// GetEnableMediaConversionOk returns a tuple with the EnableMediaConversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableMediaConversionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMediaConversion) {
		return nil, false
	}
	return o.EnableMediaConversion, true
}

// HasEnableMediaConversion returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableMediaConversion() bool {
	if o != nil && !IsNil(o.EnableMediaConversion) {
		return true
	}

	return false
}

// SetEnableMediaConversion gets a reference to the given bool and assigns it to the EnableMediaConversion field.
func (o *UserPolicy) SetEnableMediaConversion(v bool) {
	o.EnableMediaConversion = &v
}

// GetEnabledDevices returns the EnabledDevices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetEnabledDevices() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EnabledDevices
}

// GetEnabledDevicesOk returns a tuple with the EnabledDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetEnabledDevicesOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledDevices) {
		return nil, false
	}
	return o.EnabledDevices, true
}

// HasEnabledDevices returns a boolean if a field has been set.
func (o *UserPolicy) HasEnabledDevices() bool {
	if o != nil && !IsNil(o.EnabledDevices) {
		return true
	}

	return false
}

// SetEnabledDevices gets a reference to the given []string and assigns it to the EnabledDevices field.
func (o *UserPolicy) SetEnabledDevices(v []string) {
	o.EnabledDevices = v
}

// GetEnableAllDevices returns the EnableAllDevices field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableAllDevices() bool {
	if o == nil || IsNil(o.EnableAllDevices) {
		var ret bool
		return ret
	}
	return *o.EnableAllDevices
}

// GetEnableAllDevicesOk returns a tuple with the EnableAllDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableAllDevicesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAllDevices) {
		return nil, false
	}
	return o.EnableAllDevices, true
}

// HasEnableAllDevices returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableAllDevices() bool {
	if o != nil && !IsNil(o.EnableAllDevices) {
		return true
	}

	return false
}

// SetEnableAllDevices gets a reference to the given bool and assigns it to the EnableAllDevices field.
func (o *UserPolicy) SetEnableAllDevices(v bool) {
	o.EnableAllDevices = &v
}

// GetEnabledChannels returns the EnabledChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetEnabledChannels() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EnabledChannels
}

// GetEnabledChannelsOk returns a tuple with the EnabledChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetEnabledChannelsOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledChannels) {
		return nil, false
	}
	return o.EnabledChannels, true
}

// HasEnabledChannels returns a boolean if a field has been set.
func (o *UserPolicy) HasEnabledChannels() bool {
	if o != nil && !IsNil(o.EnabledChannels) {
		return true
	}

	return false
}

// SetEnabledChannels gets a reference to the given []string and assigns it to the EnabledChannels field.
func (o *UserPolicy) SetEnabledChannels(v []string) {
	o.EnabledChannels = v
}

// GetEnableAllChannels returns the EnableAllChannels field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableAllChannels() bool {
	if o == nil || IsNil(o.EnableAllChannels) {
		var ret bool
		return ret
	}
	return *o.EnableAllChannels
}

// GetEnableAllChannelsOk returns a tuple with the EnableAllChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableAllChannelsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAllChannels) {
		return nil, false
	}
	return o.EnableAllChannels, true
}

// HasEnableAllChannels returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableAllChannels() bool {
	if o != nil && !IsNil(o.EnableAllChannels) {
		return true
	}

	return false
}

// SetEnableAllChannels gets a reference to the given bool and assigns it to the EnableAllChannels field.
func (o *UserPolicy) SetEnableAllChannels(v bool) {
	o.EnableAllChannels = &v
}

// GetEnabledFolders returns the EnabledFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetEnabledFolders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EnabledFolders
}

// GetEnabledFoldersOk returns a tuple with the EnabledFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetEnabledFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledFolders) {
		return nil, false
	}
	return o.EnabledFolders, true
}

// HasEnabledFolders returns a boolean if a field has been set.
func (o *UserPolicy) HasEnabledFolders() bool {
	if o != nil && !IsNil(o.EnabledFolders) {
		return true
	}

	return false
}

// SetEnabledFolders gets a reference to the given []string and assigns it to the EnabledFolders field.
func (o *UserPolicy) SetEnabledFolders(v []string) {
	o.EnabledFolders = v
}

// GetEnableAllFolders returns the EnableAllFolders field value if set, zero value otherwise.
func (o *UserPolicy) GetEnableAllFolders() bool {
	if o == nil || IsNil(o.EnableAllFolders) {
		var ret bool
		return ret
	}
	return *o.EnableAllFolders
}

// GetEnableAllFoldersOk returns a tuple with the EnableAllFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnableAllFoldersOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAllFolders) {
		return nil, false
	}
	return o.EnableAllFolders, true
}

// HasEnableAllFolders returns a boolean if a field has been set.
func (o *UserPolicy) HasEnableAllFolders() bool {
	if o != nil && !IsNil(o.EnableAllFolders) {
		return true
	}

	return false
}

// SetEnableAllFolders gets a reference to the given bool and assigns it to the EnableAllFolders field.
func (o *UserPolicy) SetEnableAllFolders(v bool) {
	o.EnableAllFolders = &v
}

// GetInvalidLoginAttemptCount returns the InvalidLoginAttemptCount field value if set, zero value otherwise.
func (o *UserPolicy) GetInvalidLoginAttemptCount() int32 {
	if o == nil || IsNil(o.InvalidLoginAttemptCount) {
		var ret int32
		return ret
	}
	return *o.InvalidLoginAttemptCount
}

// GetInvalidLoginAttemptCountOk returns a tuple with the InvalidLoginAttemptCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetInvalidLoginAttemptCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InvalidLoginAttemptCount) {
		return nil, false
	}
	return o.InvalidLoginAttemptCount, true
}

// HasInvalidLoginAttemptCount returns a boolean if a field has been set.
func (o *UserPolicy) HasInvalidLoginAttemptCount() bool {
	if o != nil && !IsNil(o.InvalidLoginAttemptCount) {
		return true
	}

	return false
}

// SetInvalidLoginAttemptCount gets a reference to the given int32 and assigns it to the InvalidLoginAttemptCount field.
func (o *UserPolicy) SetInvalidLoginAttemptCount(v int32) {
	o.InvalidLoginAttemptCount = &v
}

// GetLoginAttemptsBeforeLockout returns the LoginAttemptsBeforeLockout field value if set, zero value otherwise.
func (o *UserPolicy) GetLoginAttemptsBeforeLockout() int32 {
	if o == nil || IsNil(o.LoginAttemptsBeforeLockout) {
		var ret int32
		return ret
	}
	return *o.LoginAttemptsBeforeLockout
}

// GetLoginAttemptsBeforeLockoutOk returns a tuple with the LoginAttemptsBeforeLockout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetLoginAttemptsBeforeLockoutOk() (*int32, bool) {
	if o == nil || IsNil(o.LoginAttemptsBeforeLockout) {
		return nil, false
	}
	return o.LoginAttemptsBeforeLockout, true
}

// HasLoginAttemptsBeforeLockout returns a boolean if a field has been set.
func (o *UserPolicy) HasLoginAttemptsBeforeLockout() bool {
	if o != nil && !IsNil(o.LoginAttemptsBeforeLockout) {
		return true
	}

	return false
}

// SetLoginAttemptsBeforeLockout gets a reference to the given int32 and assigns it to the LoginAttemptsBeforeLockout field.
func (o *UserPolicy) SetLoginAttemptsBeforeLockout(v int32) {
	o.LoginAttemptsBeforeLockout = &v
}

// GetMaxActiveSessions returns the MaxActiveSessions field value if set, zero value otherwise.
func (o *UserPolicy) GetMaxActiveSessions() int32 {
	if o == nil || IsNil(o.MaxActiveSessions) {
		var ret int32
		return ret
	}
	return *o.MaxActiveSessions
}

// GetMaxActiveSessionsOk returns a tuple with the MaxActiveSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetMaxActiveSessionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxActiveSessions) {
		return nil, false
	}
	return o.MaxActiveSessions, true
}

// HasMaxActiveSessions returns a boolean if a field has been set.
func (o *UserPolicy) HasMaxActiveSessions() bool {
	if o != nil && !IsNil(o.MaxActiveSessions) {
		return true
	}

	return false
}

// SetMaxActiveSessions gets a reference to the given int32 and assigns it to the MaxActiveSessions field.
func (o *UserPolicy) SetMaxActiveSessions(v int32) {
	o.MaxActiveSessions = &v
}

// GetEnablePublicSharing returns the EnablePublicSharing field value if set, zero value otherwise.
func (o *UserPolicy) GetEnablePublicSharing() bool {
	if o == nil || IsNil(o.EnablePublicSharing) {
		var ret bool
		return ret
	}
	return *o.EnablePublicSharing
}

// GetEnablePublicSharingOk returns a tuple with the EnablePublicSharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetEnablePublicSharingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePublicSharing) {
		return nil, false
	}
	return o.EnablePublicSharing, true
}

// HasEnablePublicSharing returns a boolean if a field has been set.
func (o *UserPolicy) HasEnablePublicSharing() bool {
	if o != nil && !IsNil(o.EnablePublicSharing) {
		return true
	}

	return false
}

// SetEnablePublicSharing gets a reference to the given bool and assigns it to the EnablePublicSharing field.
func (o *UserPolicy) SetEnablePublicSharing(v bool) {
	o.EnablePublicSharing = &v
}

// GetBlockedMediaFolders returns the BlockedMediaFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetBlockedMediaFolders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BlockedMediaFolders
}

// GetBlockedMediaFoldersOk returns a tuple with the BlockedMediaFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetBlockedMediaFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedMediaFolders) {
		return nil, false
	}
	return o.BlockedMediaFolders, true
}

// HasBlockedMediaFolders returns a boolean if a field has been set.
func (o *UserPolicy) HasBlockedMediaFolders() bool {
	if o != nil && !IsNil(o.BlockedMediaFolders) {
		return true
	}

	return false
}

// SetBlockedMediaFolders gets a reference to the given []string and assigns it to the BlockedMediaFolders field.
func (o *UserPolicy) SetBlockedMediaFolders(v []string) {
	o.BlockedMediaFolders = v
}

// GetBlockedChannels returns the BlockedChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPolicy) GetBlockedChannels() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BlockedChannels
}

// GetBlockedChannelsOk returns a tuple with the BlockedChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPolicy) GetBlockedChannelsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedChannels) {
		return nil, false
	}
	return o.BlockedChannels, true
}

// HasBlockedChannels returns a boolean if a field has been set.
func (o *UserPolicy) HasBlockedChannels() bool {
	if o != nil && !IsNil(o.BlockedChannels) {
		return true
	}

	return false
}

// SetBlockedChannels gets a reference to the given []string and assigns it to the BlockedChannels field.
func (o *UserPolicy) SetBlockedChannels(v []string) {
	o.BlockedChannels = v
}

// GetRemoteClientBitrateLimit returns the RemoteClientBitrateLimit field value if set, zero value otherwise.
func (o *UserPolicy) GetRemoteClientBitrateLimit() int32 {
	if o == nil || IsNil(o.RemoteClientBitrateLimit) {
		var ret int32
		return ret
	}
	return *o.RemoteClientBitrateLimit
}

// GetRemoteClientBitrateLimitOk returns a tuple with the RemoteClientBitrateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetRemoteClientBitrateLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RemoteClientBitrateLimit) {
		return nil, false
	}
	return o.RemoteClientBitrateLimit, true
}

// HasRemoteClientBitrateLimit returns a boolean if a field has been set.
func (o *UserPolicy) HasRemoteClientBitrateLimit() bool {
	if o != nil && !IsNil(o.RemoteClientBitrateLimit) {
		return true
	}

	return false
}

// SetRemoteClientBitrateLimit gets a reference to the given int32 and assigns it to the RemoteClientBitrateLimit field.
func (o *UserPolicy) SetRemoteClientBitrateLimit(v int32) {
	o.RemoteClientBitrateLimit = &v
}

// GetAuthenticationProviderId returns the AuthenticationProviderId field value
func (o *UserPolicy) GetAuthenticationProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticationProviderId
}

// GetAuthenticationProviderIdOk returns a tuple with the AuthenticationProviderId field value
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetAuthenticationProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationProviderId, true
}

// SetAuthenticationProviderId sets field value
func (o *UserPolicy) SetAuthenticationProviderId(v string) {
	o.AuthenticationProviderId = v
}

// GetPasswordResetProviderId returns the PasswordResetProviderId field value
func (o *UserPolicy) GetPasswordResetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordResetProviderId
}

// GetPasswordResetProviderIdOk returns a tuple with the PasswordResetProviderId field value
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetPasswordResetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordResetProviderId, true
}

// SetPasswordResetProviderId sets field value
func (o *UserPolicy) SetPasswordResetProviderId(v string) {
	o.PasswordResetProviderId = v
}

// GetSyncPlayAccess returns the SyncPlayAccess field value if set, zero value otherwise.
func (o *UserPolicy) GetSyncPlayAccess() SyncPlayUserAccessType {
	if o == nil || IsNil(o.SyncPlayAccess) {
		var ret SyncPlayUserAccessType
		return ret
	}
	return *o.SyncPlayAccess
}

// GetSyncPlayAccessOk returns a tuple with the SyncPlayAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPolicy) GetSyncPlayAccessOk() (*SyncPlayUserAccessType, bool) {
	if o == nil || IsNil(o.SyncPlayAccess) {
		return nil, false
	}
	return o.SyncPlayAccess, true
}

// HasSyncPlayAccess returns a boolean if a field has been set.
func (o *UserPolicy) HasSyncPlayAccess() bool {
	if o != nil && !IsNil(o.SyncPlayAccess) {
		return true
	}

	return false
}

// SetSyncPlayAccess gets a reference to the given SyncPlayUserAccessType and assigns it to the SyncPlayAccess field.
func (o *UserPolicy) SetSyncPlayAccess(v SyncPlayUserAccessType) {
	o.SyncPlayAccess = &v
}

func (o UserPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsAdministrator) {
		toSerialize["IsAdministrator"] = o.IsAdministrator
	}
	if !IsNil(o.IsHidden) {
		toSerialize["IsHidden"] = o.IsHidden
	}
	if !IsNil(o.EnableCollectionManagement) {
		toSerialize["EnableCollectionManagement"] = o.EnableCollectionManagement
	}
	if !IsNil(o.EnableSubtitleManagement) {
		toSerialize["EnableSubtitleManagement"] = o.EnableSubtitleManagement
	}
	if !IsNil(o.EnableLyricManagement) {
		toSerialize["EnableLyricManagement"] = o.EnableLyricManagement
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["IsDisabled"] = o.IsDisabled
	}
	if o.MaxParentalRating.IsSet() {
		toSerialize["MaxParentalRating"] = o.MaxParentalRating.Get()
	}
	if o.BlockedTags != nil {
		toSerialize["BlockedTags"] = o.BlockedTags
	}
	if o.AllowedTags != nil {
		toSerialize["AllowedTags"] = o.AllowedTags
	}
	if !IsNil(o.EnableUserPreferenceAccess) {
		toSerialize["EnableUserPreferenceAccess"] = o.EnableUserPreferenceAccess
	}
	if o.AccessSchedules != nil {
		toSerialize["AccessSchedules"] = o.AccessSchedules
	}
	if o.BlockUnratedItems != nil {
		toSerialize["BlockUnratedItems"] = o.BlockUnratedItems
	}
	if !IsNil(o.EnableRemoteControlOfOtherUsers) {
		toSerialize["EnableRemoteControlOfOtherUsers"] = o.EnableRemoteControlOfOtherUsers
	}
	if !IsNil(o.EnableSharedDeviceControl) {
		toSerialize["EnableSharedDeviceControl"] = o.EnableSharedDeviceControl
	}
	if !IsNil(o.EnableRemoteAccess) {
		toSerialize["EnableRemoteAccess"] = o.EnableRemoteAccess
	}
	if !IsNil(o.EnableLiveTvManagement) {
		toSerialize["EnableLiveTvManagement"] = o.EnableLiveTvManagement
	}
	if !IsNil(o.EnableLiveTvAccess) {
		toSerialize["EnableLiveTvAccess"] = o.EnableLiveTvAccess
	}
	if !IsNil(o.EnableMediaPlayback) {
		toSerialize["EnableMediaPlayback"] = o.EnableMediaPlayback
	}
	if !IsNil(o.EnableAudioPlaybackTranscoding) {
		toSerialize["EnableAudioPlaybackTranscoding"] = o.EnableAudioPlaybackTranscoding
	}
	if !IsNil(o.EnableVideoPlaybackTranscoding) {
		toSerialize["EnableVideoPlaybackTranscoding"] = o.EnableVideoPlaybackTranscoding
	}
	if !IsNil(o.EnablePlaybackRemuxing) {
		toSerialize["EnablePlaybackRemuxing"] = o.EnablePlaybackRemuxing
	}
	if !IsNil(o.ForceRemoteSourceTranscoding) {
		toSerialize["ForceRemoteSourceTranscoding"] = o.ForceRemoteSourceTranscoding
	}
	if !IsNil(o.EnableContentDeletion) {
		toSerialize["EnableContentDeletion"] = o.EnableContentDeletion
	}
	if o.EnableContentDeletionFromFolders != nil {
		toSerialize["EnableContentDeletionFromFolders"] = o.EnableContentDeletionFromFolders
	}
	if !IsNil(o.EnableContentDownloading) {
		toSerialize["EnableContentDownloading"] = o.EnableContentDownloading
	}
	if !IsNil(o.EnableSyncTranscoding) {
		toSerialize["EnableSyncTranscoding"] = o.EnableSyncTranscoding
	}
	if !IsNil(o.EnableMediaConversion) {
		toSerialize["EnableMediaConversion"] = o.EnableMediaConversion
	}
	if o.EnabledDevices != nil {
		toSerialize["EnabledDevices"] = o.EnabledDevices
	}
	if !IsNil(o.EnableAllDevices) {
		toSerialize["EnableAllDevices"] = o.EnableAllDevices
	}
	if o.EnabledChannels != nil {
		toSerialize["EnabledChannels"] = o.EnabledChannels
	}
	if !IsNil(o.EnableAllChannels) {
		toSerialize["EnableAllChannels"] = o.EnableAllChannels
	}
	if o.EnabledFolders != nil {
		toSerialize["EnabledFolders"] = o.EnabledFolders
	}
	if !IsNil(o.EnableAllFolders) {
		toSerialize["EnableAllFolders"] = o.EnableAllFolders
	}
	if !IsNil(o.InvalidLoginAttemptCount) {
		toSerialize["InvalidLoginAttemptCount"] = o.InvalidLoginAttemptCount
	}
	if !IsNil(o.LoginAttemptsBeforeLockout) {
		toSerialize["LoginAttemptsBeforeLockout"] = o.LoginAttemptsBeforeLockout
	}
	if !IsNil(o.MaxActiveSessions) {
		toSerialize["MaxActiveSessions"] = o.MaxActiveSessions
	}
	if !IsNil(o.EnablePublicSharing) {
		toSerialize["EnablePublicSharing"] = o.EnablePublicSharing
	}
	if o.BlockedMediaFolders != nil {
		toSerialize["BlockedMediaFolders"] = o.BlockedMediaFolders
	}
	if o.BlockedChannels != nil {
		toSerialize["BlockedChannels"] = o.BlockedChannels
	}
	if !IsNil(o.RemoteClientBitrateLimit) {
		toSerialize["RemoteClientBitrateLimit"] = o.RemoteClientBitrateLimit
	}
	toSerialize["AuthenticationProviderId"] = o.AuthenticationProviderId
	toSerialize["PasswordResetProviderId"] = o.PasswordResetProviderId
	if !IsNil(o.SyncPlayAccess) {
		toSerialize["SyncPlayAccess"] = o.SyncPlayAccess
	}
	return toSerialize, nil
}

func (o *UserPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"AuthenticationProviderId",
		"PasswordResetProviderId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPolicy := _UserPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserPolicy)

	if err != nil {
		return err
	}

	*o = UserPolicy(varUserPolicy)

	return err
}

type NullableUserPolicy struct {
	value *UserPolicy
	isSet bool
}

func (v NullableUserPolicy) Get() *UserPolicy {
	return v.value
}

func (v *NullableUserPolicy) Set(val *UserPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPolicy(val *UserPolicy) *NullableUserPolicy {
	return &NullableUserPolicy{value: val, isSet: true}
}

func (v NullableUserPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


