/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the QueryFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryFilters{}

// QueryFilters struct for QueryFilters
type QueryFilters struct {
	Genres []NameGuidPair `json:"Genres,omitempty"`
	Tags []string `json:"Tags,omitempty"`
}

// NewQueryFilters instantiates a new QueryFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryFilters() *QueryFilters {
	this := QueryFilters{}
	return &this
}

// NewQueryFiltersWithDefaults instantiates a new QueryFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryFiltersWithDefaults() *QueryFilters {
	this := QueryFilters{}
	return &this
}

// GetGenres returns the Genres field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryFilters) GetGenres() []NameGuidPair {
	if o == nil {
		var ret []NameGuidPair
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryFilters) GetGenresOk() ([]NameGuidPair, bool) {
	if o == nil || IsNil(o.Genres) {
		return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *QueryFilters) HasGenres() bool {
	if o != nil && !IsNil(o.Genres) {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []NameGuidPair and assigns it to the Genres field.
func (o *QueryFilters) SetGenres(v []NameGuidPair) {
	o.Genres = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryFilters) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryFilters) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *QueryFilters) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *QueryFilters) SetTags(v []string) {
	o.Tags = v
}

func (o QueryFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Genres != nil {
		toSerialize["Genres"] = o.Genres
	}
	if o.Tags != nil {
		toSerialize["Tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableQueryFilters struct {
	value *QueryFilters
	isSet bool
}

func (v NullableQueryFilters) Get() *QueryFilters {
	return v.value
}

func (v *NullableQueryFilters) Set(val *QueryFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFilters(val *QueryFilters) *NullableQueryFilters {
	return &NullableQueryFilters{value: val, isSet: true}
}

func (v NullableQueryFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


