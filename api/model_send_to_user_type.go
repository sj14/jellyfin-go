/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SendToUserType the model 'SendToUserType'
type SendToUserType string

// List of SendToUserType
const (
	SENDTOUSERTYPE_ALL SendToUserType = "All"
	SENDTOUSERTYPE_ADMINS SendToUserType = "Admins"
	SENDTOUSERTYPE_CUSTOM SendToUserType = "Custom"
)

// All allowed values of SendToUserType enum
var AllowedSendToUserTypeEnumValues = []SendToUserType{
	"All",
	"Admins",
	"Custom",
}

func (v *SendToUserType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SendToUserType(value)
	for _, existing := range AllowedSendToUserTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SendToUserType", value)
}

// NewSendToUserTypeFromValue returns a pointer to a valid SendToUserType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSendToUserTypeFromValue(v string) (*SendToUserType, error) {
	ev := SendToUserType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SendToUserType: valid values are %v", v, AllowedSendToUserTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SendToUserType) IsValid() bool {
	for _, existing := range AllowedSendToUserTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SendToUserType value
func (v SendToUserType) Ptr() *SendToUserType {
	return &v
}

type NullableSendToUserType struct {
	value *SendToUserType
	isSet bool
}

func (v NullableSendToUserType) Get() *SendToUserType {
	return v.value
}

func (v *NullableSendToUserType) Set(val *SendToUserType) {
	v.value = val
	v.isSet = true
}

func (v NullableSendToUserType) IsSet() bool {
	return v.isSet
}

func (v *NullableSendToUserType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendToUserType(val *SendToUserType) *NullableSendToUserType {
	return &NullableSendToUserType{value: val, isSet: true}
}

func (v NullableSendToUserType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendToUserType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

