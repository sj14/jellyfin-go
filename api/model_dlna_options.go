/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DlnaOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DlnaOptions{}

// DlnaOptions The DlnaOptions class contains the user definable parameters for the dlna subsystems.
type DlnaOptions struct {
	// Gets or sets a value indicating whether gets or sets a value to indicate the status of the dlna playTo subsystem.
	EnablePlayTo *bool `json:"EnablePlayTo,omitempty"`
	// Gets or sets a value indicating whether gets or sets a value to indicate the status of the dlna server subsystem.
	EnableServer *bool `json:"EnableServer,omitempty"`
	// Gets or sets a value indicating whether detailed dlna server logs are sent to the console/log.  If the setting \"Emby.Dlna\": \"Debug\" msut be set in logging.default.json for this property to work.
	EnableDebugLog *bool `json:"EnableDebugLog,omitempty"`
	// Gets or sets a value indicating whether whether detailed playTo debug logs are sent to the console/log.  If the setting \"Emby.Dlna.PlayTo\": \"Debug\" msut be set in logging.default.json for this property to work.
	EnablePlayToTracing *bool `json:"EnablePlayToTracing,omitempty"`
	// Gets or sets the ssdp client discovery interval time (in seconds).  This is the time after which the server will send a ssdp search request.
	ClientDiscoveryIntervalSeconds *int32 `json:"ClientDiscoveryIntervalSeconds,omitempty"`
	// Gets or sets the frequency at which ssdp alive notifications are transmitted.
	AliveMessageIntervalSeconds *int32 `json:"AliveMessageIntervalSeconds,omitempty"`
	// Gets or sets the frequency at which ssdp alive notifications are transmitted. MIGRATING - TO BE REMOVED ONCE WEB HAS BEEN ALTERED.
	BlastAliveMessageIntervalSeconds *int32 `json:"BlastAliveMessageIntervalSeconds,omitempty"`
	// Gets or sets the default user account that the dlna server uses.
	DefaultUserId NullableString `json:"DefaultUserId,omitempty"`
	// Gets or sets a value indicating whether playTo device profiles should be created.
	AutoCreatePlayToProfiles *bool `json:"AutoCreatePlayToProfiles,omitempty"`
	// Gets or sets a value indicating whether to blast alive messages.
	BlastAliveMessages *bool `json:"BlastAliveMessages,omitempty"`
	// gets or sets a value indicating whether to send only matched host.
	SendOnlyMatchedHost *bool `json:"SendOnlyMatchedHost,omitempty"`
}

// NewDlnaOptions instantiates a new DlnaOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDlnaOptions() *DlnaOptions {
	this := DlnaOptions{}
	return &this
}

// NewDlnaOptionsWithDefaults instantiates a new DlnaOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDlnaOptionsWithDefaults() *DlnaOptions {
	this := DlnaOptions{}
	return &this
}

// GetEnablePlayTo returns the EnablePlayTo field value if set, zero value otherwise.
func (o *DlnaOptions) GetEnablePlayTo() bool {
	if o == nil || IsNil(o.EnablePlayTo) {
		var ret bool
		return ret
	}
	return *o.EnablePlayTo
}

// GetEnablePlayToOk returns a tuple with the EnablePlayTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetEnablePlayToOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePlayTo) {
		return nil, false
	}
	return o.EnablePlayTo, true
}

// HasEnablePlayTo returns a boolean if a field has been set.
func (o *DlnaOptions) HasEnablePlayTo() bool {
	if o != nil && !IsNil(o.EnablePlayTo) {
		return true
	}

	return false
}

// SetEnablePlayTo gets a reference to the given bool and assigns it to the EnablePlayTo field.
func (o *DlnaOptions) SetEnablePlayTo(v bool) {
	o.EnablePlayTo = &v
}

// GetEnableServer returns the EnableServer field value if set, zero value otherwise.
func (o *DlnaOptions) GetEnableServer() bool {
	if o == nil || IsNil(o.EnableServer) {
		var ret bool
		return ret
	}
	return *o.EnableServer
}

// GetEnableServerOk returns a tuple with the EnableServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetEnableServerOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableServer) {
		return nil, false
	}
	return o.EnableServer, true
}

// HasEnableServer returns a boolean if a field has been set.
func (o *DlnaOptions) HasEnableServer() bool {
	if o != nil && !IsNil(o.EnableServer) {
		return true
	}

	return false
}

// SetEnableServer gets a reference to the given bool and assigns it to the EnableServer field.
func (o *DlnaOptions) SetEnableServer(v bool) {
	o.EnableServer = &v
}

// GetEnableDebugLog returns the EnableDebugLog field value if set, zero value otherwise.
func (o *DlnaOptions) GetEnableDebugLog() bool {
	if o == nil || IsNil(o.EnableDebugLog) {
		var ret bool
		return ret
	}
	return *o.EnableDebugLog
}

// GetEnableDebugLogOk returns a tuple with the EnableDebugLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetEnableDebugLogOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDebugLog) {
		return nil, false
	}
	return o.EnableDebugLog, true
}

// HasEnableDebugLog returns a boolean if a field has been set.
func (o *DlnaOptions) HasEnableDebugLog() bool {
	if o != nil && !IsNil(o.EnableDebugLog) {
		return true
	}

	return false
}

// SetEnableDebugLog gets a reference to the given bool and assigns it to the EnableDebugLog field.
func (o *DlnaOptions) SetEnableDebugLog(v bool) {
	o.EnableDebugLog = &v
}

// GetEnablePlayToTracing returns the EnablePlayToTracing field value if set, zero value otherwise.
func (o *DlnaOptions) GetEnablePlayToTracing() bool {
	if o == nil || IsNil(o.EnablePlayToTracing) {
		var ret bool
		return ret
	}
	return *o.EnablePlayToTracing
}

// GetEnablePlayToTracingOk returns a tuple with the EnablePlayToTracing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetEnablePlayToTracingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePlayToTracing) {
		return nil, false
	}
	return o.EnablePlayToTracing, true
}

// HasEnablePlayToTracing returns a boolean if a field has been set.
func (o *DlnaOptions) HasEnablePlayToTracing() bool {
	if o != nil && !IsNil(o.EnablePlayToTracing) {
		return true
	}

	return false
}

// SetEnablePlayToTracing gets a reference to the given bool and assigns it to the EnablePlayToTracing field.
func (o *DlnaOptions) SetEnablePlayToTracing(v bool) {
	o.EnablePlayToTracing = &v
}

// GetClientDiscoveryIntervalSeconds returns the ClientDiscoveryIntervalSeconds field value if set, zero value otherwise.
func (o *DlnaOptions) GetClientDiscoveryIntervalSeconds() int32 {
	if o == nil || IsNil(o.ClientDiscoveryIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.ClientDiscoveryIntervalSeconds
}

// GetClientDiscoveryIntervalSecondsOk returns a tuple with the ClientDiscoveryIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetClientDiscoveryIntervalSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientDiscoveryIntervalSeconds) {
		return nil, false
	}
	return o.ClientDiscoveryIntervalSeconds, true
}

// HasClientDiscoveryIntervalSeconds returns a boolean if a field has been set.
func (o *DlnaOptions) HasClientDiscoveryIntervalSeconds() bool {
	if o != nil && !IsNil(o.ClientDiscoveryIntervalSeconds) {
		return true
	}

	return false
}

// SetClientDiscoveryIntervalSeconds gets a reference to the given int32 and assigns it to the ClientDiscoveryIntervalSeconds field.
func (o *DlnaOptions) SetClientDiscoveryIntervalSeconds(v int32) {
	o.ClientDiscoveryIntervalSeconds = &v
}

// GetAliveMessageIntervalSeconds returns the AliveMessageIntervalSeconds field value if set, zero value otherwise.
func (o *DlnaOptions) GetAliveMessageIntervalSeconds() int32 {
	if o == nil || IsNil(o.AliveMessageIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.AliveMessageIntervalSeconds
}

// GetAliveMessageIntervalSecondsOk returns a tuple with the AliveMessageIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetAliveMessageIntervalSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.AliveMessageIntervalSeconds) {
		return nil, false
	}
	return o.AliveMessageIntervalSeconds, true
}

// HasAliveMessageIntervalSeconds returns a boolean if a field has been set.
func (o *DlnaOptions) HasAliveMessageIntervalSeconds() bool {
	if o != nil && !IsNil(o.AliveMessageIntervalSeconds) {
		return true
	}

	return false
}

// SetAliveMessageIntervalSeconds gets a reference to the given int32 and assigns it to the AliveMessageIntervalSeconds field.
func (o *DlnaOptions) SetAliveMessageIntervalSeconds(v int32) {
	o.AliveMessageIntervalSeconds = &v
}

// GetBlastAliveMessageIntervalSeconds returns the BlastAliveMessageIntervalSeconds field value if set, zero value otherwise.
func (o *DlnaOptions) GetBlastAliveMessageIntervalSeconds() int32 {
	if o == nil || IsNil(o.BlastAliveMessageIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.BlastAliveMessageIntervalSeconds
}

// GetBlastAliveMessageIntervalSecondsOk returns a tuple with the BlastAliveMessageIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetBlastAliveMessageIntervalSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.BlastAliveMessageIntervalSeconds) {
		return nil, false
	}
	return o.BlastAliveMessageIntervalSeconds, true
}

// HasBlastAliveMessageIntervalSeconds returns a boolean if a field has been set.
func (o *DlnaOptions) HasBlastAliveMessageIntervalSeconds() bool {
	if o != nil && !IsNil(o.BlastAliveMessageIntervalSeconds) {
		return true
	}

	return false
}

// SetBlastAliveMessageIntervalSeconds gets a reference to the given int32 and assigns it to the BlastAliveMessageIntervalSeconds field.
func (o *DlnaOptions) SetBlastAliveMessageIntervalSeconds(v int32) {
	o.BlastAliveMessageIntervalSeconds = &v
}

// GetDefaultUserId returns the DefaultUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DlnaOptions) GetDefaultUserId() string {
	if o == nil || IsNil(o.DefaultUserId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultUserId.Get()
}

// GetDefaultUserIdOk returns a tuple with the DefaultUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DlnaOptions) GetDefaultUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultUserId.Get(), o.DefaultUserId.IsSet()
}

// HasDefaultUserId returns a boolean if a field has been set.
func (o *DlnaOptions) HasDefaultUserId() bool {
	if o != nil && o.DefaultUserId.IsSet() {
		return true
	}

	return false
}

// SetDefaultUserId gets a reference to the given NullableString and assigns it to the DefaultUserId field.
func (o *DlnaOptions) SetDefaultUserId(v string) {
	o.DefaultUserId.Set(&v)
}
// SetDefaultUserIdNil sets the value for DefaultUserId to be an explicit nil
func (o *DlnaOptions) SetDefaultUserIdNil() {
	o.DefaultUserId.Set(nil)
}

// UnsetDefaultUserId ensures that no value is present for DefaultUserId, not even an explicit nil
func (o *DlnaOptions) UnsetDefaultUserId() {
	o.DefaultUserId.Unset()
}

// GetAutoCreatePlayToProfiles returns the AutoCreatePlayToProfiles field value if set, zero value otherwise.
func (o *DlnaOptions) GetAutoCreatePlayToProfiles() bool {
	if o == nil || IsNil(o.AutoCreatePlayToProfiles) {
		var ret bool
		return ret
	}
	return *o.AutoCreatePlayToProfiles
}

// GetAutoCreatePlayToProfilesOk returns a tuple with the AutoCreatePlayToProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetAutoCreatePlayToProfilesOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreatePlayToProfiles) {
		return nil, false
	}
	return o.AutoCreatePlayToProfiles, true
}

// HasAutoCreatePlayToProfiles returns a boolean if a field has been set.
func (o *DlnaOptions) HasAutoCreatePlayToProfiles() bool {
	if o != nil && !IsNil(o.AutoCreatePlayToProfiles) {
		return true
	}

	return false
}

// SetAutoCreatePlayToProfiles gets a reference to the given bool and assigns it to the AutoCreatePlayToProfiles field.
func (o *DlnaOptions) SetAutoCreatePlayToProfiles(v bool) {
	o.AutoCreatePlayToProfiles = &v
}

// GetBlastAliveMessages returns the BlastAliveMessages field value if set, zero value otherwise.
func (o *DlnaOptions) GetBlastAliveMessages() bool {
	if o == nil || IsNil(o.BlastAliveMessages) {
		var ret bool
		return ret
	}
	return *o.BlastAliveMessages
}

// GetBlastAliveMessagesOk returns a tuple with the BlastAliveMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetBlastAliveMessagesOk() (*bool, bool) {
	if o == nil || IsNil(o.BlastAliveMessages) {
		return nil, false
	}
	return o.BlastAliveMessages, true
}

// HasBlastAliveMessages returns a boolean if a field has been set.
func (o *DlnaOptions) HasBlastAliveMessages() bool {
	if o != nil && !IsNil(o.BlastAliveMessages) {
		return true
	}

	return false
}

// SetBlastAliveMessages gets a reference to the given bool and assigns it to the BlastAliveMessages field.
func (o *DlnaOptions) SetBlastAliveMessages(v bool) {
	o.BlastAliveMessages = &v
}

// GetSendOnlyMatchedHost returns the SendOnlyMatchedHost field value if set, zero value otherwise.
func (o *DlnaOptions) GetSendOnlyMatchedHost() bool {
	if o == nil || IsNil(o.SendOnlyMatchedHost) {
		var ret bool
		return ret
	}
	return *o.SendOnlyMatchedHost
}

// GetSendOnlyMatchedHostOk returns a tuple with the SendOnlyMatchedHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DlnaOptions) GetSendOnlyMatchedHostOk() (*bool, bool) {
	if o == nil || IsNil(o.SendOnlyMatchedHost) {
		return nil, false
	}
	return o.SendOnlyMatchedHost, true
}

// HasSendOnlyMatchedHost returns a boolean if a field has been set.
func (o *DlnaOptions) HasSendOnlyMatchedHost() bool {
	if o != nil && !IsNil(o.SendOnlyMatchedHost) {
		return true
	}

	return false
}

// SetSendOnlyMatchedHost gets a reference to the given bool and assigns it to the SendOnlyMatchedHost field.
func (o *DlnaOptions) SetSendOnlyMatchedHost(v bool) {
	o.SendOnlyMatchedHost = &v
}

func (o DlnaOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DlnaOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnablePlayTo) {
		toSerialize["EnablePlayTo"] = o.EnablePlayTo
	}
	if !IsNil(o.EnableServer) {
		toSerialize["EnableServer"] = o.EnableServer
	}
	if !IsNil(o.EnableDebugLog) {
		toSerialize["EnableDebugLog"] = o.EnableDebugLog
	}
	if !IsNil(o.EnablePlayToTracing) {
		toSerialize["EnablePlayToTracing"] = o.EnablePlayToTracing
	}
	if !IsNil(o.ClientDiscoveryIntervalSeconds) {
		toSerialize["ClientDiscoveryIntervalSeconds"] = o.ClientDiscoveryIntervalSeconds
	}
	if !IsNil(o.AliveMessageIntervalSeconds) {
		toSerialize["AliveMessageIntervalSeconds"] = o.AliveMessageIntervalSeconds
	}
	if !IsNil(o.BlastAliveMessageIntervalSeconds) {
		toSerialize["BlastAliveMessageIntervalSeconds"] = o.BlastAliveMessageIntervalSeconds
	}
	if o.DefaultUserId.IsSet() {
		toSerialize["DefaultUserId"] = o.DefaultUserId.Get()
	}
	if !IsNil(o.AutoCreatePlayToProfiles) {
		toSerialize["AutoCreatePlayToProfiles"] = o.AutoCreatePlayToProfiles
	}
	if !IsNil(o.BlastAliveMessages) {
		toSerialize["BlastAliveMessages"] = o.BlastAliveMessages
	}
	if !IsNil(o.SendOnlyMatchedHost) {
		toSerialize["SendOnlyMatchedHost"] = o.SendOnlyMatchedHost
	}
	return toSerialize, nil
}

type NullableDlnaOptions struct {
	value *DlnaOptions
	isSet bool
}

func (v NullableDlnaOptions) Get() *DlnaOptions {
	return v.value
}

func (v *NullableDlnaOptions) Set(val *DlnaOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDlnaOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDlnaOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDlnaOptions(val *DlnaOptions) *NullableDlnaOptions {
	return &NullableDlnaOptions{value: val, isSet: true}
}

func (v NullableDlnaOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDlnaOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


