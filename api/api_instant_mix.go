/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type InstantMixAPI interface {

	/*
	GetInstantMixFromAlbum Creates an instant playlist based on a given album.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiGetInstantMixFromAlbumRequest
	*/
	GetInstantMixFromAlbum(ctx context.Context, itemId string) ApiGetInstantMixFromAlbumRequest

	// GetInstantMixFromAlbumExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetInstantMixFromAlbumExecute(r ApiGetInstantMixFromAlbumRequest) (*BaseItemDtoQueryResult, *http.Response, error)

	/*
	GetInstantMixFromArtists Creates an instant playlist based on a given artist.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiGetInstantMixFromArtistsRequest
	*/
	GetInstantMixFromArtists(ctx context.Context, itemId string) ApiGetInstantMixFromArtistsRequest

	// GetInstantMixFromArtistsExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetInstantMixFromArtistsExecute(r ApiGetInstantMixFromArtistsRequest) (*BaseItemDtoQueryResult, *http.Response, error)

	/*
	GetInstantMixFromArtists2 Creates an instant playlist based on a given artist.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetInstantMixFromArtists2Request

	Deprecated
	*/
	GetInstantMixFromArtists2(ctx context.Context) ApiGetInstantMixFromArtists2Request

	// GetInstantMixFromArtists2Execute executes the request
	//  @return BaseItemDtoQueryResult
	// Deprecated
	GetInstantMixFromArtists2Execute(r ApiGetInstantMixFromArtists2Request) (*BaseItemDtoQueryResult, *http.Response, error)

	/*
	GetInstantMixFromItem Creates an instant playlist based on a given item.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiGetInstantMixFromItemRequest
	*/
	GetInstantMixFromItem(ctx context.Context, itemId string) ApiGetInstantMixFromItemRequest

	// GetInstantMixFromItemExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetInstantMixFromItemExecute(r ApiGetInstantMixFromItemRequest) (*BaseItemDtoQueryResult, *http.Response, error)

	/*
	GetInstantMixFromMusicGenreById Creates an instant playlist based on a given genre.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetInstantMixFromMusicGenreByIdRequest
	*/
	GetInstantMixFromMusicGenreById(ctx context.Context) ApiGetInstantMixFromMusicGenreByIdRequest

	// GetInstantMixFromMusicGenreByIdExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetInstantMixFromMusicGenreByIdExecute(r ApiGetInstantMixFromMusicGenreByIdRequest) (*BaseItemDtoQueryResult, *http.Response, error)

	/*
	GetInstantMixFromMusicGenreByName Creates an instant playlist based on a given genre.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name The genre name.
	@return ApiGetInstantMixFromMusicGenreByNameRequest
	*/
	GetInstantMixFromMusicGenreByName(ctx context.Context, name string) ApiGetInstantMixFromMusicGenreByNameRequest

	// GetInstantMixFromMusicGenreByNameExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetInstantMixFromMusicGenreByNameExecute(r ApiGetInstantMixFromMusicGenreByNameRequest) (*BaseItemDtoQueryResult, *http.Response, error)

	/*
	GetInstantMixFromPlaylist Creates an instant playlist based on a given playlist.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiGetInstantMixFromPlaylistRequest
	*/
	GetInstantMixFromPlaylist(ctx context.Context, itemId string) ApiGetInstantMixFromPlaylistRequest

	// GetInstantMixFromPlaylistExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetInstantMixFromPlaylistExecute(r ApiGetInstantMixFromPlaylistRequest) (*BaseItemDtoQueryResult, *http.Response, error)

	/*
	GetInstantMixFromSong Creates an instant playlist based on a given song.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@return ApiGetInstantMixFromSongRequest
	*/
	GetInstantMixFromSong(ctx context.Context, itemId string) ApiGetInstantMixFromSongRequest

	// GetInstantMixFromSongExecute executes the request
	//  @return BaseItemDtoQueryResult
	GetInstantMixFromSongExecute(r ApiGetInstantMixFromSongRequest) (*BaseItemDtoQueryResult, *http.Response, error)
}

// InstantMixAPIService InstantMixAPI service
type InstantMixAPIService service

type ApiGetInstantMixFromAlbumRequest struct {
	ctx context.Context
	ApiService InstantMixAPI
	itemId string
	userId *string
	limit *int32
	fields *[]ItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetInstantMixFromAlbumRequest) UserId(userId string) ApiGetInstantMixFromAlbumRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetInstantMixFromAlbumRequest) Limit(limit int32) ApiGetInstantMixFromAlbumRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ApiGetInstantMixFromAlbumRequest) Fields(fields []ItemFields) ApiGetInstantMixFromAlbumRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r ApiGetInstantMixFromAlbumRequest) EnableImages(enableImages bool) ApiGetInstantMixFromAlbumRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r ApiGetInstantMixFromAlbumRequest) EnableUserData(enableUserData bool) ApiGetInstantMixFromAlbumRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r ApiGetInstantMixFromAlbumRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetInstantMixFromAlbumRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetInstantMixFromAlbumRequest) EnableImageTypes(enableImageTypes []ImageType) ApiGetInstantMixFromAlbumRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetInstantMixFromAlbumRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromAlbumExecute(r)
}

/*
GetInstantMixFromAlbum Creates an instant playlist based on a given album.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiGetInstantMixFromAlbumRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromAlbum(ctx context.Context, itemId string) ApiGetInstantMixFromAlbumRequest {
	return ApiGetInstantMixFromAlbumRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromAlbumExecute(r ApiGetInstantMixFromAlbumRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromAlbum")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Albums/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInstantMixFromArtistsRequest struct {
	ctx context.Context
	ApiService InstantMixAPI
	itemId string
	userId *string
	limit *int32
	fields *[]ItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetInstantMixFromArtistsRequest) UserId(userId string) ApiGetInstantMixFromArtistsRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetInstantMixFromArtistsRequest) Limit(limit int32) ApiGetInstantMixFromArtistsRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ApiGetInstantMixFromArtistsRequest) Fields(fields []ItemFields) ApiGetInstantMixFromArtistsRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r ApiGetInstantMixFromArtistsRequest) EnableImages(enableImages bool) ApiGetInstantMixFromArtistsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r ApiGetInstantMixFromArtistsRequest) EnableUserData(enableUserData bool) ApiGetInstantMixFromArtistsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r ApiGetInstantMixFromArtistsRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetInstantMixFromArtistsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetInstantMixFromArtistsRequest) EnableImageTypes(enableImageTypes []ImageType) ApiGetInstantMixFromArtistsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetInstantMixFromArtistsRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromArtistsExecute(r)
}

/*
GetInstantMixFromArtists Creates an instant playlist based on a given artist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiGetInstantMixFromArtistsRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromArtists(ctx context.Context, itemId string) ApiGetInstantMixFromArtistsRequest {
	return ApiGetInstantMixFromArtistsRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromArtistsExecute(r ApiGetInstantMixFromArtistsRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromArtists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInstantMixFromArtists2Request struct {
	ctx context.Context
	ApiService InstantMixAPI
	id *string
	userId *string
	limit *int32
	fields *[]ItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
}

// The item id.
func (r ApiGetInstantMixFromArtists2Request) Id(id string) ApiGetInstantMixFromArtists2Request {
	r.id = &id
	return r
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetInstantMixFromArtists2Request) UserId(userId string) ApiGetInstantMixFromArtists2Request {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetInstantMixFromArtists2Request) Limit(limit int32) ApiGetInstantMixFromArtists2Request {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ApiGetInstantMixFromArtists2Request) Fields(fields []ItemFields) ApiGetInstantMixFromArtists2Request {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r ApiGetInstantMixFromArtists2Request) EnableImages(enableImages bool) ApiGetInstantMixFromArtists2Request {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r ApiGetInstantMixFromArtists2Request) EnableUserData(enableUserData bool) ApiGetInstantMixFromArtists2Request {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r ApiGetInstantMixFromArtists2Request) ImageTypeLimit(imageTypeLimit int32) ApiGetInstantMixFromArtists2Request {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetInstantMixFromArtists2Request) EnableImageTypes(enableImageTypes []ImageType) ApiGetInstantMixFromArtists2Request {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetInstantMixFromArtists2Request) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromArtists2Execute(r)
}

/*
GetInstantMixFromArtists2 Creates an instant playlist based on a given artist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetInstantMixFromArtists2Request

Deprecated
*/
func (a *InstantMixAPIService) GetInstantMixFromArtists2(ctx context.Context) ApiGetInstantMixFromArtists2Request {
	return ApiGetInstantMixFromArtists2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
// Deprecated
func (a *InstantMixAPIService) GetInstantMixFromArtists2Execute(r ApiGetInstantMixFromArtists2Request) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromArtists2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/InstantMix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInstantMixFromItemRequest struct {
	ctx context.Context
	ApiService InstantMixAPI
	itemId string
	userId *string
	limit *int32
	fields *[]ItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetInstantMixFromItemRequest) UserId(userId string) ApiGetInstantMixFromItemRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetInstantMixFromItemRequest) Limit(limit int32) ApiGetInstantMixFromItemRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ApiGetInstantMixFromItemRequest) Fields(fields []ItemFields) ApiGetInstantMixFromItemRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r ApiGetInstantMixFromItemRequest) EnableImages(enableImages bool) ApiGetInstantMixFromItemRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r ApiGetInstantMixFromItemRequest) EnableUserData(enableUserData bool) ApiGetInstantMixFromItemRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r ApiGetInstantMixFromItemRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetInstantMixFromItemRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetInstantMixFromItemRequest) EnableImageTypes(enableImageTypes []ImageType) ApiGetInstantMixFromItemRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetInstantMixFromItemRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromItemExecute(r)
}

/*
GetInstantMixFromItem Creates an instant playlist based on a given item.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiGetInstantMixFromItemRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromItem(ctx context.Context, itemId string) ApiGetInstantMixFromItemRequest {
	return ApiGetInstantMixFromItemRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromItemExecute(r ApiGetInstantMixFromItemRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInstantMixFromMusicGenreByIdRequest struct {
	ctx context.Context
	ApiService InstantMixAPI
	id *string
	userId *string
	limit *int32
	fields *[]ItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
}

// The item id.
func (r ApiGetInstantMixFromMusicGenreByIdRequest) Id(id string) ApiGetInstantMixFromMusicGenreByIdRequest {
	r.id = &id
	return r
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetInstantMixFromMusicGenreByIdRequest) UserId(userId string) ApiGetInstantMixFromMusicGenreByIdRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetInstantMixFromMusicGenreByIdRequest) Limit(limit int32) ApiGetInstantMixFromMusicGenreByIdRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ApiGetInstantMixFromMusicGenreByIdRequest) Fields(fields []ItemFields) ApiGetInstantMixFromMusicGenreByIdRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r ApiGetInstantMixFromMusicGenreByIdRequest) EnableImages(enableImages bool) ApiGetInstantMixFromMusicGenreByIdRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r ApiGetInstantMixFromMusicGenreByIdRequest) EnableUserData(enableUserData bool) ApiGetInstantMixFromMusicGenreByIdRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r ApiGetInstantMixFromMusicGenreByIdRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetInstantMixFromMusicGenreByIdRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetInstantMixFromMusicGenreByIdRequest) EnableImageTypes(enableImageTypes []ImageType) ApiGetInstantMixFromMusicGenreByIdRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetInstantMixFromMusicGenreByIdRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromMusicGenreByIdExecute(r)
}

/*
GetInstantMixFromMusicGenreById Creates an instant playlist based on a given genre.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetInstantMixFromMusicGenreByIdRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromMusicGenreById(ctx context.Context) ApiGetInstantMixFromMusicGenreByIdRequest {
	return ApiGetInstantMixFromMusicGenreByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromMusicGenreByIdExecute(r ApiGetInstantMixFromMusicGenreByIdRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromMusicGenreById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/InstantMix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInstantMixFromMusicGenreByNameRequest struct {
	ctx context.Context
	ApiService InstantMixAPI
	name string
	userId *string
	limit *int32
	fields *[]ItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetInstantMixFromMusicGenreByNameRequest) UserId(userId string) ApiGetInstantMixFromMusicGenreByNameRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetInstantMixFromMusicGenreByNameRequest) Limit(limit int32) ApiGetInstantMixFromMusicGenreByNameRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ApiGetInstantMixFromMusicGenreByNameRequest) Fields(fields []ItemFields) ApiGetInstantMixFromMusicGenreByNameRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r ApiGetInstantMixFromMusicGenreByNameRequest) EnableImages(enableImages bool) ApiGetInstantMixFromMusicGenreByNameRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r ApiGetInstantMixFromMusicGenreByNameRequest) EnableUserData(enableUserData bool) ApiGetInstantMixFromMusicGenreByNameRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r ApiGetInstantMixFromMusicGenreByNameRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetInstantMixFromMusicGenreByNameRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetInstantMixFromMusicGenreByNameRequest) EnableImageTypes(enableImageTypes []ImageType) ApiGetInstantMixFromMusicGenreByNameRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetInstantMixFromMusicGenreByNameRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromMusicGenreByNameExecute(r)
}

/*
GetInstantMixFromMusicGenreByName Creates an instant playlist based on a given genre.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The genre name.
 @return ApiGetInstantMixFromMusicGenreByNameRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromMusicGenreByName(ctx context.Context, name string) ApiGetInstantMixFromMusicGenreByNameRequest {
	return ApiGetInstantMixFromMusicGenreByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromMusicGenreByNameExecute(r ApiGetInstantMixFromMusicGenreByNameRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromMusicGenreByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/{name}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInstantMixFromPlaylistRequest struct {
	ctx context.Context
	ApiService InstantMixAPI
	itemId string
	userId *string
	limit *int32
	fields *[]ItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetInstantMixFromPlaylistRequest) UserId(userId string) ApiGetInstantMixFromPlaylistRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetInstantMixFromPlaylistRequest) Limit(limit int32) ApiGetInstantMixFromPlaylistRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ApiGetInstantMixFromPlaylistRequest) Fields(fields []ItemFields) ApiGetInstantMixFromPlaylistRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r ApiGetInstantMixFromPlaylistRequest) EnableImages(enableImages bool) ApiGetInstantMixFromPlaylistRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r ApiGetInstantMixFromPlaylistRequest) EnableUserData(enableUserData bool) ApiGetInstantMixFromPlaylistRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r ApiGetInstantMixFromPlaylistRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetInstantMixFromPlaylistRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetInstantMixFromPlaylistRequest) EnableImageTypes(enableImageTypes []ImageType) ApiGetInstantMixFromPlaylistRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetInstantMixFromPlaylistRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromPlaylistExecute(r)
}

/*
GetInstantMixFromPlaylist Creates an instant playlist based on a given playlist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiGetInstantMixFromPlaylistRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromPlaylist(ctx context.Context, itemId string) ApiGetInstantMixFromPlaylistRequest {
	return ApiGetInstantMixFromPlaylistRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromPlaylistExecute(r ApiGetInstantMixFromPlaylistRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromPlaylist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInstantMixFromSongRequest struct {
	ctx context.Context
	ApiService InstantMixAPI
	itemId string
	userId *string
	limit *int32
	fields *[]ItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]ImageType
}

// Optional. Filter by user id, and attach user data.
func (r ApiGetInstantMixFromSongRequest) UserId(userId string) ApiGetInstantMixFromSongRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r ApiGetInstantMixFromSongRequest) Limit(limit int32) ApiGetInstantMixFromSongRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ApiGetInstantMixFromSongRequest) Fields(fields []ItemFields) ApiGetInstantMixFromSongRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r ApiGetInstantMixFromSongRequest) EnableImages(enableImages bool) ApiGetInstantMixFromSongRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r ApiGetInstantMixFromSongRequest) EnableUserData(enableUserData bool) ApiGetInstantMixFromSongRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r ApiGetInstantMixFromSongRequest) ImageTypeLimit(imageTypeLimit int32) ApiGetInstantMixFromSongRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ApiGetInstantMixFromSongRequest) EnableImageTypes(enableImageTypes []ImageType) ApiGetInstantMixFromSongRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r ApiGetInstantMixFromSongRequest) Execute() (*BaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromSongExecute(r)
}

/*
GetInstantMixFromSong Creates an instant playlist based on a given song.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return ApiGetInstantMixFromSongRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromSong(ctx context.Context, itemId string) ApiGetInstantMixFromSongRequest {
	return ApiGetInstantMixFromSongRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return BaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromSongExecute(r ApiGetInstantMixFromSongRequest) (*BaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromSong")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Songs/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
