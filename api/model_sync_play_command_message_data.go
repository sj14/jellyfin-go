/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the SyncPlayCommandMessageData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncPlayCommandMessageData{}

// SyncPlayCommandMessageData Class SendCommand.
type SyncPlayCommandMessageData struct {
	// Gets the group identifier.
	GroupId *string `json:"GroupId,omitempty"`
	// Gets the playlist identifier of the playing item.
	PlaylistItemId *string `json:"PlaylistItemId,omitempty"`
	// Gets or sets the UTC time when to execute the command.
	When *time.Time `json:"When,omitempty"`
	// Gets the position ticks.
	PositionTicks NullableInt64 `json:"PositionTicks,omitempty"`
	// Gets the command.
	Command *SendCommandType `json:"Command,omitempty"`
	// Gets the UTC time when this command has been emitted.
	EmittedAt *time.Time `json:"EmittedAt,omitempty"`
}

// NewSyncPlayCommandMessageData instantiates a new SyncPlayCommandMessageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncPlayCommandMessageData() *SyncPlayCommandMessageData {
	this := SyncPlayCommandMessageData{}
	return &this
}

// NewSyncPlayCommandMessageDataWithDefaults instantiates a new SyncPlayCommandMessageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncPlayCommandMessageDataWithDefaults() *SyncPlayCommandMessageData {
	this := SyncPlayCommandMessageData{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *SyncPlayCommandMessageData) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPlayCommandMessageData) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *SyncPlayCommandMessageData) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *SyncPlayCommandMessageData) SetGroupId(v string) {
	o.GroupId = &v
}

// GetPlaylistItemId returns the PlaylistItemId field value if set, zero value otherwise.
func (o *SyncPlayCommandMessageData) GetPlaylistItemId() string {
	if o == nil || IsNil(o.PlaylistItemId) {
		var ret string
		return ret
	}
	return *o.PlaylistItemId
}

// GetPlaylistItemIdOk returns a tuple with the PlaylistItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPlayCommandMessageData) GetPlaylistItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlaylistItemId) {
		return nil, false
	}
	return o.PlaylistItemId, true
}

// HasPlaylistItemId returns a boolean if a field has been set.
func (o *SyncPlayCommandMessageData) HasPlaylistItemId() bool {
	if o != nil && !IsNil(o.PlaylistItemId) {
		return true
	}

	return false
}

// SetPlaylistItemId gets a reference to the given string and assigns it to the PlaylistItemId field.
func (o *SyncPlayCommandMessageData) SetPlaylistItemId(v string) {
	o.PlaylistItemId = &v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *SyncPlayCommandMessageData) GetWhen() time.Time {
	if o == nil || IsNil(o.When) {
		var ret time.Time
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPlayCommandMessageData) GetWhenOk() (*time.Time, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *SyncPlayCommandMessageData) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given time.Time and assigns it to the When field.
func (o *SyncPlayCommandMessageData) SetWhen(v time.Time) {
	o.When = &v
}

// GetPositionTicks returns the PositionTicks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SyncPlayCommandMessageData) GetPositionTicks() int64 {
	if o == nil || IsNil(o.PositionTicks.Get()) {
		var ret int64
		return ret
	}
	return *o.PositionTicks.Get()
}

// GetPositionTicksOk returns a tuple with the PositionTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SyncPlayCommandMessageData) GetPositionTicksOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PositionTicks.Get(), o.PositionTicks.IsSet()
}

// HasPositionTicks returns a boolean if a field has been set.
func (o *SyncPlayCommandMessageData) HasPositionTicks() bool {
	if o != nil && o.PositionTicks.IsSet() {
		return true
	}

	return false
}

// SetPositionTicks gets a reference to the given NullableInt64 and assigns it to the PositionTicks field.
func (o *SyncPlayCommandMessageData) SetPositionTicks(v int64) {
	o.PositionTicks.Set(&v)
}
// SetPositionTicksNil sets the value for PositionTicks to be an explicit nil
func (o *SyncPlayCommandMessageData) SetPositionTicksNil() {
	o.PositionTicks.Set(nil)
}

// UnsetPositionTicks ensures that no value is present for PositionTicks, not even an explicit nil
func (o *SyncPlayCommandMessageData) UnsetPositionTicks() {
	o.PositionTicks.Unset()
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *SyncPlayCommandMessageData) GetCommand() SendCommandType {
	if o == nil || IsNil(o.Command) {
		var ret SendCommandType
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPlayCommandMessageData) GetCommandOk() (*SendCommandType, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *SyncPlayCommandMessageData) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given SendCommandType and assigns it to the Command field.
func (o *SyncPlayCommandMessageData) SetCommand(v SendCommandType) {
	o.Command = &v
}

// GetEmittedAt returns the EmittedAt field value if set, zero value otherwise.
func (o *SyncPlayCommandMessageData) GetEmittedAt() time.Time {
	if o == nil || IsNil(o.EmittedAt) {
		var ret time.Time
		return ret
	}
	return *o.EmittedAt
}

// GetEmittedAtOk returns a tuple with the EmittedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPlayCommandMessageData) GetEmittedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EmittedAt) {
		return nil, false
	}
	return o.EmittedAt, true
}

// HasEmittedAt returns a boolean if a field has been set.
func (o *SyncPlayCommandMessageData) HasEmittedAt() bool {
	if o != nil && !IsNil(o.EmittedAt) {
		return true
	}

	return false
}

// SetEmittedAt gets a reference to the given time.Time and assigns it to the EmittedAt field.
func (o *SyncPlayCommandMessageData) SetEmittedAt(v time.Time) {
	o.EmittedAt = &v
}

func (o SyncPlayCommandMessageData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncPlayCommandMessageData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["GroupId"] = o.GroupId
	}
	if !IsNil(o.PlaylistItemId) {
		toSerialize["PlaylistItemId"] = o.PlaylistItemId
	}
	if !IsNil(o.When) {
		toSerialize["When"] = o.When
	}
	if o.PositionTicks.IsSet() {
		toSerialize["PositionTicks"] = o.PositionTicks.Get()
	}
	if !IsNil(o.Command) {
		toSerialize["Command"] = o.Command
	}
	if !IsNil(o.EmittedAt) {
		toSerialize["EmittedAt"] = o.EmittedAt
	}
	return toSerialize, nil
}

type NullableSyncPlayCommandMessageData struct {
	value *SyncPlayCommandMessageData
	isSet bool
}

func (v NullableSyncPlayCommandMessageData) Get() *SyncPlayCommandMessageData {
	return v.value
}

func (v *NullableSyncPlayCommandMessageData) Set(val *SyncPlayCommandMessageData) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncPlayCommandMessageData) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncPlayCommandMessageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncPlayCommandMessageData(val *SyncPlayCommandMessageData) *NullableSyncPlayCommandMessageData {
	return &NullableSyncPlayCommandMessageData{value: val, isSet: true}
}

func (v NullableSyncPlayCommandMessageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncPlayCommandMessageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


