/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// HeaderMatchType the model 'HeaderMatchType'
type HeaderMatchType string

// List of HeaderMatchType
const (
	HEADERMATCHTYPE_EQUALS HeaderMatchType = "Equals"
	HEADERMATCHTYPE_REGEX HeaderMatchType = "Regex"
	HEADERMATCHTYPE_SUBSTRING HeaderMatchType = "Substring"
)

// All allowed values of HeaderMatchType enum
var AllowedHeaderMatchTypeEnumValues = []HeaderMatchType{
	"Equals",
	"Regex",
	"Substring",
}

func (v *HeaderMatchType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HeaderMatchType(value)
	for _, existing := range AllowedHeaderMatchTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HeaderMatchType", value)
}

// NewHeaderMatchTypeFromValue returns a pointer to a valid HeaderMatchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHeaderMatchTypeFromValue(v string) (*HeaderMatchType, error) {
	ev := HeaderMatchType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HeaderMatchType: valid values are %v", v, AllowedHeaderMatchTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HeaderMatchType) IsValid() bool {
	for _, existing := range AllowedHeaderMatchTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HeaderMatchType value
func (v HeaderMatchType) Ptr() *HeaderMatchType {
	return &v
}

type NullableHeaderMatchType struct {
	value *HeaderMatchType
	isSet bool
}

func (v NullableHeaderMatchType) Get() *HeaderMatchType {
	return v.value
}

func (v *NullableHeaderMatchType) Set(val *HeaderMatchType) {
	v.value = val
	v.isSet = true
}

func (v NullableHeaderMatchType) IsSet() bool {
	return v.isSet
}

func (v *NullableHeaderMatchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeaderMatchType(val *HeaderMatchType) *NullableHeaderMatchType {
	return &NullableHeaderMatchType{value: val, isSet: true}
}

func (v NullableHeaderMatchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeaderMatchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

