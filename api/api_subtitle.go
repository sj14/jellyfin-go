/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type SubtitleAPI interface {

	/*
	DeleteSubtitle Deletes an external subtitle file.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@param index The index of the subtitle file.
	@return ApiDeleteSubtitleRequest
	*/
	DeleteSubtitle(ctx context.Context, itemId string, index int32) ApiDeleteSubtitleRequest

	// DeleteSubtitleExecute executes the request
	DeleteSubtitleExecute(r ApiDeleteSubtitleRequest) (*http.Response, error)

	/*
	DownloadRemoteSubtitles Downloads a remote subtitle.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@param subtitleId The subtitle id.
	@return ApiDownloadRemoteSubtitlesRequest
	*/
	DownloadRemoteSubtitles(ctx context.Context, itemId string, subtitleId string) ApiDownloadRemoteSubtitlesRequest

	// DownloadRemoteSubtitlesExecute executes the request
	DownloadRemoteSubtitlesExecute(r ApiDownloadRemoteSubtitlesRequest) (*http.Response, error)

	/*
	GetFallbackFont Gets a fallback font file.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name The name of the fallback font file to get.
	@return ApiGetFallbackFontRequest
	*/
	GetFallbackFont(ctx context.Context, name string) ApiGetFallbackFontRequest

	// GetFallbackFontExecute executes the request
	//  @return *os.File
	GetFallbackFontExecute(r ApiGetFallbackFontRequest) (*os.File, *http.Response, error)

	/*
	GetFallbackFontList Gets a list of available fallback font files.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFallbackFontListRequest
	*/
	GetFallbackFontList(ctx context.Context) ApiGetFallbackFontListRequest

	// GetFallbackFontListExecute executes the request
	//  @return []FontFile
	GetFallbackFontListExecute(r ApiGetFallbackFontListRequest) ([]FontFile, *http.Response, error)

	/*
	GetRemoteSubtitles Gets the remote subtitles.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param subtitleId The item id.
	@return ApiGetRemoteSubtitlesRequest
	*/
	GetRemoteSubtitles(ctx context.Context, subtitleId string) ApiGetRemoteSubtitlesRequest

	// GetRemoteSubtitlesExecute executes the request
	//  @return *os.File
	GetRemoteSubtitlesExecute(r ApiGetRemoteSubtitlesRequest) (*os.File, *http.Response, error)

	/*
	GetSubtitle Gets subtitles in a specified format.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param routeItemId The (route) item id.
	@param routeMediaSourceId The (route) media source id.
	@param routeIndex The (route) subtitle stream index.
	@param routeFormat The (route) format of the returned subtitle.
	@return ApiGetSubtitleRequest
	*/
	GetSubtitle(ctx context.Context, routeItemId string, routeMediaSourceId string, routeIndex int32, routeFormat string) ApiGetSubtitleRequest

	// GetSubtitleExecute executes the request
	//  @return *os.File
	GetSubtitleExecute(r ApiGetSubtitleRequest) (*os.File, *http.Response, error)

	/*
	GetSubtitlePlaylist Gets an HLS subtitle playlist.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@param index The subtitle stream index.
	@param mediaSourceId The media source id.
	@return ApiGetSubtitlePlaylistRequest
	*/
	GetSubtitlePlaylist(ctx context.Context, itemId string, index int32, mediaSourceId string) ApiGetSubtitlePlaylistRequest

	// GetSubtitlePlaylistExecute executes the request
	//  @return *os.File
	GetSubtitlePlaylistExecute(r ApiGetSubtitlePlaylistRequest) (*os.File, *http.Response, error)

	/*
	GetSubtitleWithTicks Gets subtitles in a specified format.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param routeItemId The (route) item id.
	@param routeMediaSourceId The (route) media source id.
	@param routeIndex The (route) subtitle stream index.
	@param routeStartPositionTicks The (route) start position of the subtitle in ticks.
	@param routeFormat The (route) format of the returned subtitle.
	@return ApiGetSubtitleWithTicksRequest
	*/
	GetSubtitleWithTicks(ctx context.Context, routeItemId string, routeMediaSourceId string, routeIndex int32, routeStartPositionTicks int64, routeFormat string) ApiGetSubtitleWithTicksRequest

	// GetSubtitleWithTicksExecute executes the request
	//  @return *os.File
	GetSubtitleWithTicksExecute(r ApiGetSubtitleWithTicksRequest) (*os.File, *http.Response, error)

	/*
	SearchRemoteSubtitles Search remote subtitles.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item id.
	@param language The language of the subtitles.
	@return ApiSearchRemoteSubtitlesRequest
	*/
	SearchRemoteSubtitles(ctx context.Context, itemId string, language string) ApiSearchRemoteSubtitlesRequest

	// SearchRemoteSubtitlesExecute executes the request
	//  @return []RemoteSubtitleInfo
	SearchRemoteSubtitlesExecute(r ApiSearchRemoteSubtitlesRequest) ([]RemoteSubtitleInfo, *http.Response, error)

	/*
	UploadSubtitle Upload an external subtitle file.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The item the subtitle belongs to.
	@return ApiUploadSubtitleRequest
	*/
	UploadSubtitle(ctx context.Context, itemId string) ApiUploadSubtitleRequest

	// UploadSubtitleExecute executes the request
	UploadSubtitleExecute(r ApiUploadSubtitleRequest) (*http.Response, error)
}

// SubtitleAPIService SubtitleAPI service
type SubtitleAPIService service

type ApiDeleteSubtitleRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	itemId string
	index int32
}

func (r ApiDeleteSubtitleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSubtitleExecute(r)
}

/*
DeleteSubtitle Deletes an external subtitle file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param index The index of the subtitle file.
 @return ApiDeleteSubtitleRequest
*/
func (a *SubtitleAPIService) DeleteSubtitle(ctx context.Context, itemId string, index int32) ApiDeleteSubtitleRequest {
	return ApiDeleteSubtitleRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		index: index,
	}
}

// Execute executes the request
func (a *SubtitleAPIService) DeleteSubtitleExecute(r ApiDeleteSubtitleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.DeleteSubtitle")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/Subtitles/{index}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDownloadRemoteSubtitlesRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	itemId string
	subtitleId string
}

func (r ApiDownloadRemoteSubtitlesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DownloadRemoteSubtitlesExecute(r)
}

/*
DownloadRemoteSubtitles Downloads a remote subtitle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param subtitleId The subtitle id.
 @return ApiDownloadRemoteSubtitlesRequest
*/
func (a *SubtitleAPIService) DownloadRemoteSubtitles(ctx context.Context, itemId string, subtitleId string) ApiDownloadRemoteSubtitlesRequest {
	return ApiDownloadRemoteSubtitlesRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		subtitleId: subtitleId,
	}
}

// Execute executes the request
func (a *SubtitleAPIService) DownloadRemoteSubtitlesExecute(r ApiDownloadRemoteSubtitlesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.DownloadRemoteSubtitles")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subtitleId"+"}", url.PathEscape(parameterValueToString(r.subtitleId, "subtitleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFallbackFontRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	name string
}

func (r ApiGetFallbackFontRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetFallbackFontExecute(r)
}

/*
GetFallbackFont Gets a fallback font file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The name of the fallback font file to get.
 @return ApiGetFallbackFontRequest
*/
func (a *SubtitleAPIService) GetFallbackFont(ctx context.Context, name string) ApiGetFallbackFontRequest {
	return ApiGetFallbackFontRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SubtitleAPIService) GetFallbackFontExecute(r ApiGetFallbackFontRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.GetFallbackFont")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/FallbackFont/Fonts/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"font/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFallbackFontListRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
}

func (r ApiGetFallbackFontListRequest) Execute() ([]FontFile, *http.Response, error) {
	return r.ApiService.GetFallbackFontListExecute(r)
}

/*
GetFallbackFontList Gets a list of available fallback font files.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFallbackFontListRequest
*/
func (a *SubtitleAPIService) GetFallbackFontList(ctx context.Context) ApiGetFallbackFontListRequest {
	return ApiGetFallbackFontListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []FontFile
func (a *SubtitleAPIService) GetFallbackFontListExecute(r ApiGetFallbackFontListRequest) ([]FontFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FontFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.GetFallbackFontList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/FallbackFont/Fonts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRemoteSubtitlesRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	subtitleId string
}

func (r ApiGetRemoteSubtitlesRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetRemoteSubtitlesExecute(r)
}

/*
GetRemoteSubtitles Gets the remote subtitles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subtitleId The item id.
 @return ApiGetRemoteSubtitlesRequest
*/
func (a *SubtitleAPIService) GetRemoteSubtitles(ctx context.Context, subtitleId string) ApiGetRemoteSubtitlesRequest {
	return ApiGetRemoteSubtitlesRequest{
		ApiService: a,
		ctx: ctx,
		subtitleId: subtitleId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SubtitleAPIService) GetRemoteSubtitlesExecute(r ApiGetRemoteSubtitlesRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.GetRemoteSubtitles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Providers/Subtitles/Subtitles/{subtitleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"subtitleId"+"}", url.PathEscape(parameterValueToString(r.subtitleId, "subtitleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubtitleRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	routeItemId string
	routeMediaSourceId string
	routeIndex int32
	routeFormat string
	itemId *string
	mediaSourceId *string
	index *int32
	format *string
	endPositionTicks *int64
	copyTimestamps *bool
	addVttTimeMap *bool
	startPositionTicks *int64
}

// The item id.
// Deprecated
func (r ApiGetSubtitleRequest) ItemId(itemId string) ApiGetSubtitleRequest {
	r.itemId = &itemId
	return r
}

// The media source id.
// Deprecated
func (r ApiGetSubtitleRequest) MediaSourceId(mediaSourceId string) ApiGetSubtitleRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The subtitle stream index.
// Deprecated
func (r ApiGetSubtitleRequest) Index(index int32) ApiGetSubtitleRequest {
	r.index = &index
	return r
}

// The format of the returned subtitle.
// Deprecated
func (r ApiGetSubtitleRequest) Format(format string) ApiGetSubtitleRequest {
	r.format = &format
	return r
}

// Optional. The end position of the subtitle in ticks.
func (r ApiGetSubtitleRequest) EndPositionTicks(endPositionTicks int64) ApiGetSubtitleRequest {
	r.endPositionTicks = &endPositionTicks
	return r
}

// Optional. Whether to copy the timestamps.
func (r ApiGetSubtitleRequest) CopyTimestamps(copyTimestamps bool) ApiGetSubtitleRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Whether to add a VTT time map.
func (r ApiGetSubtitleRequest) AddVttTimeMap(addVttTimeMap bool) ApiGetSubtitleRequest {
	r.addVttTimeMap = &addVttTimeMap
	return r
}

// The start position of the subtitle in ticks.
func (r ApiGetSubtitleRequest) StartPositionTicks(startPositionTicks int64) ApiGetSubtitleRequest {
	r.startPositionTicks = &startPositionTicks
	return r
}

func (r ApiGetSubtitleRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetSubtitleExecute(r)
}

/*
GetSubtitle Gets subtitles in a specified format.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param routeItemId The (route) item id.
 @param routeMediaSourceId The (route) media source id.
 @param routeIndex The (route) subtitle stream index.
 @param routeFormat The (route) format of the returned subtitle.
 @return ApiGetSubtitleRequest
*/
func (a *SubtitleAPIService) GetSubtitle(ctx context.Context, routeItemId string, routeMediaSourceId string, routeIndex int32, routeFormat string) ApiGetSubtitleRequest {
	return ApiGetSubtitleRequest{
		ApiService: a,
		ctx: ctx,
		routeItemId: routeItemId,
		routeMediaSourceId: routeMediaSourceId,
		routeIndex: routeIndex,
		routeFormat: routeFormat,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SubtitleAPIService) GetSubtitleExecute(r ApiGetSubtitleRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.GetSubtitle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/Stream.{routeFormat}"
	localVarPath = strings.Replace(localVarPath, "{"+"routeItemId"+"}", url.PathEscape(parameterValueToString(r.routeItemId, "routeItemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routeMediaSourceId"+"}", url.PathEscape(parameterValueToString(r.routeMediaSourceId, "routeMediaSourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routeIndex"+"}", url.PathEscape(parameterValueToString(r.routeIndex, "routeIndex")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routeFormat"+"}", url.PathEscape(parameterValueToString(r.routeFormat, "routeFormat")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.itemId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemId", r.itemId, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "index", r.index, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.endPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endPositionTicks", r.endPositionTicks, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	} else {
		var defaultValue bool = false
		r.copyTimestamps = &defaultValue
	}
	if r.addVttTimeMap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addVttTimeMap", r.addVttTimeMap, "form", "")
	} else {
		var defaultValue bool = false
		r.addVttTimeMap = &defaultValue
	}
	if r.startPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startPositionTicks", r.startPositionTicks, "form", "")
	} else {
		var defaultValue int64 = 0
		r.startPositionTicks = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubtitlePlaylistRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	itemId string
	index int32
	mediaSourceId string
	segmentLength *int32
}

// The subtitle segment length.
func (r ApiGetSubtitlePlaylistRequest) SegmentLength(segmentLength int32) ApiGetSubtitlePlaylistRequest {
	r.segmentLength = &segmentLength
	return r
}

func (r ApiGetSubtitlePlaylistRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetSubtitlePlaylistExecute(r)
}

/*
GetSubtitlePlaylist Gets an HLS subtitle playlist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param index The subtitle stream index.
 @param mediaSourceId The media source id.
 @return ApiGetSubtitlePlaylistRequest
*/
func (a *SubtitleAPIService) GetSubtitlePlaylist(ctx context.Context, itemId string, index int32, mediaSourceId string) ApiGetSubtitlePlaylistRequest {
	return ApiGetSubtitlePlaylistRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		index: index,
		mediaSourceId: mediaSourceId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SubtitleAPIService) GetSubtitlePlaylistExecute(r ApiGetSubtitlePlaylistRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.GetSubtitlePlaylist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mediaSourceId"+"}", url.PathEscape(parameterValueToString(r.mediaSourceId, "mediaSourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.segmentLength == nil {
		return localVarReturnValue, nil, reportError("segmentLength is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-mpegURL", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSubtitleWithTicksRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	routeItemId string
	routeMediaSourceId string
	routeIndex int32
	routeStartPositionTicks int64
	routeFormat string
	itemId *string
	mediaSourceId *string
	index *int32
	startPositionTicks *int64
	format *string
	endPositionTicks *int64
	copyTimestamps *bool
	addVttTimeMap *bool
}

// The item id.
// Deprecated
func (r ApiGetSubtitleWithTicksRequest) ItemId(itemId string) ApiGetSubtitleWithTicksRequest {
	r.itemId = &itemId
	return r
}

// The media source id.
// Deprecated
func (r ApiGetSubtitleWithTicksRequest) MediaSourceId(mediaSourceId string) ApiGetSubtitleWithTicksRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The subtitle stream index.
// Deprecated
func (r ApiGetSubtitleWithTicksRequest) Index(index int32) ApiGetSubtitleWithTicksRequest {
	r.index = &index
	return r
}

// The start position of the subtitle in ticks.
// Deprecated
func (r ApiGetSubtitleWithTicksRequest) StartPositionTicks(startPositionTicks int64) ApiGetSubtitleWithTicksRequest {
	r.startPositionTicks = &startPositionTicks
	return r
}

// The format of the returned subtitle.
// Deprecated
func (r ApiGetSubtitleWithTicksRequest) Format(format string) ApiGetSubtitleWithTicksRequest {
	r.format = &format
	return r
}

// Optional. The end position of the subtitle in ticks.
func (r ApiGetSubtitleWithTicksRequest) EndPositionTicks(endPositionTicks int64) ApiGetSubtitleWithTicksRequest {
	r.endPositionTicks = &endPositionTicks
	return r
}

// Optional. Whether to copy the timestamps.
func (r ApiGetSubtitleWithTicksRequest) CopyTimestamps(copyTimestamps bool) ApiGetSubtitleWithTicksRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Whether to add a VTT time map.
func (r ApiGetSubtitleWithTicksRequest) AddVttTimeMap(addVttTimeMap bool) ApiGetSubtitleWithTicksRequest {
	r.addVttTimeMap = &addVttTimeMap
	return r
}

func (r ApiGetSubtitleWithTicksRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetSubtitleWithTicksExecute(r)
}

/*
GetSubtitleWithTicks Gets subtitles in a specified format.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param routeItemId The (route) item id.
 @param routeMediaSourceId The (route) media source id.
 @param routeIndex The (route) subtitle stream index.
 @param routeStartPositionTicks The (route) start position of the subtitle in ticks.
 @param routeFormat The (route) format of the returned subtitle.
 @return ApiGetSubtitleWithTicksRequest
*/
func (a *SubtitleAPIService) GetSubtitleWithTicks(ctx context.Context, routeItemId string, routeMediaSourceId string, routeIndex int32, routeStartPositionTicks int64, routeFormat string) ApiGetSubtitleWithTicksRequest {
	return ApiGetSubtitleWithTicksRequest{
		ApiService: a,
		ctx: ctx,
		routeItemId: routeItemId,
		routeMediaSourceId: routeMediaSourceId,
		routeIndex: routeIndex,
		routeStartPositionTicks: routeStartPositionTicks,
		routeFormat: routeFormat,
	}
}

// Execute executes the request
//  @return *os.File
func (a *SubtitleAPIService) GetSubtitleWithTicksExecute(r ApiGetSubtitleWithTicksRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.GetSubtitleWithTicks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/{routeStartPositionTicks}/Stream.{routeFormat}"
	localVarPath = strings.Replace(localVarPath, "{"+"routeItemId"+"}", url.PathEscape(parameterValueToString(r.routeItemId, "routeItemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routeMediaSourceId"+"}", url.PathEscape(parameterValueToString(r.routeMediaSourceId, "routeMediaSourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routeIndex"+"}", url.PathEscape(parameterValueToString(r.routeIndex, "routeIndex")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routeStartPositionTicks"+"}", url.PathEscape(parameterValueToString(r.routeStartPositionTicks, "routeStartPositionTicks")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routeFormat"+"}", url.PathEscape(parameterValueToString(r.routeFormat, "routeFormat")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.itemId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemId", r.itemId, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.index != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "index", r.index, "form", "")
	}
	if r.startPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startPositionTicks", r.startPositionTicks, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.endPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endPositionTicks", r.endPositionTicks, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	} else {
		var defaultValue bool = false
		r.copyTimestamps = &defaultValue
	}
	if r.addVttTimeMap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addVttTimeMap", r.addVttTimeMap, "form", "")
	} else {
		var defaultValue bool = false
		r.addVttTimeMap = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchRemoteSubtitlesRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	itemId string
	language string
	isPerfectMatch *bool
}

// Optional. Only show subtitles which are a perfect match.
func (r ApiSearchRemoteSubtitlesRequest) IsPerfectMatch(isPerfectMatch bool) ApiSearchRemoteSubtitlesRequest {
	r.isPerfectMatch = &isPerfectMatch
	return r
}

func (r ApiSearchRemoteSubtitlesRequest) Execute() ([]RemoteSubtitleInfo, *http.Response, error) {
	return r.ApiService.SearchRemoteSubtitlesExecute(r)
}

/*
SearchRemoteSubtitles Search remote subtitles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param language The language of the subtitles.
 @return ApiSearchRemoteSubtitlesRequest
*/
func (a *SubtitleAPIService) SearchRemoteSubtitles(ctx context.Context, itemId string, language string) ApiSearchRemoteSubtitlesRequest {
	return ApiSearchRemoteSubtitlesRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		language: language,
	}
}

// Execute executes the request
//  @return []RemoteSubtitleInfo
func (a *SubtitleAPIService) SearchRemoteSubtitlesExecute(r ApiSearchRemoteSubtitlesRequest) ([]RemoteSubtitleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RemoteSubtitleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.SearchRemoteSubtitles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{itemId}/RemoteSearch/Subtitles/{language}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"language"+"}", url.PathEscape(parameterValueToString(r.language, "language")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isPerfectMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isPerfectMatch", r.isPerfectMatch, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadSubtitleRequest struct {
	ctx context.Context
	ApiService SubtitleAPI
	itemId string
	uploadSubtitleDto *UploadSubtitleDto
}

// The request body.
func (r ApiUploadSubtitleRequest) UploadSubtitleDto(uploadSubtitleDto UploadSubtitleDto) ApiUploadSubtitleRequest {
	r.uploadSubtitleDto = &uploadSubtitleDto
	return r
}

func (r ApiUploadSubtitleRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadSubtitleExecute(r)
}

/*
UploadSubtitle Upload an external subtitle file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item the subtitle belongs to.
 @return ApiUploadSubtitleRequest
*/
func (a *SubtitleAPIService) UploadSubtitle(ctx context.Context, itemId string) ApiUploadSubtitleRequest {
	return ApiUploadSubtitleRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *SubtitleAPIService) UploadSubtitleExecute(r ApiUploadSubtitleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleAPIService.UploadSubtitle")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/Subtitles"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uploadSubtitleDto == nil {
		return nil, reportError("uploadSubtitleDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uploadSubtitleDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
