/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ControlResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlResponse{}

// ControlResponse struct for ControlResponse
type ControlResponse struct {
	Headers *map[string]string `json:"Headers,omitempty"`
	Xml *string `json:"Xml,omitempty"`
	IsSuccessful *bool `json:"IsSuccessful,omitempty"`
}

// NewControlResponse instantiates a new ControlResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlResponse() *ControlResponse {
	this := ControlResponse{}
	return &this
}

// NewControlResponseWithDefaults instantiates a new ControlResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlResponseWithDefaults() *ControlResponse {
	this := ControlResponse{}
	return &this
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ControlResponse) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlResponse) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ControlResponse) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *ControlResponse) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetXml returns the Xml field value if set, zero value otherwise.
func (o *ControlResponse) GetXml() string {
	if o == nil || IsNil(o.Xml) {
		var ret string
		return ret
	}
	return *o.Xml
}

// GetXmlOk returns a tuple with the Xml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlResponse) GetXmlOk() (*string, bool) {
	if o == nil || IsNil(o.Xml) {
		return nil, false
	}
	return o.Xml, true
}

// HasXml returns a boolean if a field has been set.
func (o *ControlResponse) HasXml() bool {
	if o != nil && !IsNil(o.Xml) {
		return true
	}

	return false
}

// SetXml gets a reference to the given string and assigns it to the Xml field.
func (o *ControlResponse) SetXml(v string) {
	o.Xml = &v
}

// GetIsSuccessful returns the IsSuccessful field value if set, zero value otherwise.
func (o *ControlResponse) GetIsSuccessful() bool {
	if o == nil || IsNil(o.IsSuccessful) {
		var ret bool
		return ret
	}
	return *o.IsSuccessful
}

// GetIsSuccessfulOk returns a tuple with the IsSuccessful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlResponse) GetIsSuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuccessful) {
		return nil, false
	}
	return o.IsSuccessful, true
}

// HasIsSuccessful returns a boolean if a field has been set.
func (o *ControlResponse) HasIsSuccessful() bool {
	if o != nil && !IsNil(o.IsSuccessful) {
		return true
	}

	return false
}

// SetIsSuccessful gets a reference to the given bool and assigns it to the IsSuccessful field.
func (o *ControlResponse) SetIsSuccessful(v bool) {
	o.IsSuccessful = &v
}

func (o ControlResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Headers) {
		toSerialize["Headers"] = o.Headers
	}
	if !IsNil(o.Xml) {
		toSerialize["Xml"] = o.Xml
	}
	if !IsNil(o.IsSuccessful) {
		toSerialize["IsSuccessful"] = o.IsSuccessful
	}
	return toSerialize, nil
}

type NullableControlResponse struct {
	value *ControlResponse
	isSet bool
}

func (v NullableControlResponse) Get() *ControlResponse {
	return v.value
}

func (v *NullableControlResponse) Set(val *ControlResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableControlResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableControlResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlResponse(val *ControlResponse) *NullableControlResponse {
	return &NullableControlResponse{value: val, isSet: true}
}

func (v NullableControlResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


