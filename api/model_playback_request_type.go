/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// PlaybackRequestType Enum PlaybackRequestType.
type PlaybackRequestType string

// List of PlaybackRequestType
const (
	PLAYBACKREQUESTTYPE_PLAY PlaybackRequestType = "Play"
	PLAYBACKREQUESTTYPE_SET_PLAYLIST_ITEM PlaybackRequestType = "SetPlaylistItem"
	PLAYBACKREQUESTTYPE_REMOVE_FROM_PLAYLIST PlaybackRequestType = "RemoveFromPlaylist"
	PLAYBACKREQUESTTYPE_MOVE_PLAYLIST_ITEM PlaybackRequestType = "MovePlaylistItem"
	PLAYBACKREQUESTTYPE_QUEUE PlaybackRequestType = "Queue"
	PLAYBACKREQUESTTYPE_UNPAUSE PlaybackRequestType = "Unpause"
	PLAYBACKREQUESTTYPE_PAUSE PlaybackRequestType = "Pause"
	PLAYBACKREQUESTTYPE_STOP PlaybackRequestType = "Stop"
	PLAYBACKREQUESTTYPE_SEEK PlaybackRequestType = "Seek"
	PLAYBACKREQUESTTYPE_BUFFER PlaybackRequestType = "Buffer"
	PLAYBACKREQUESTTYPE_READY PlaybackRequestType = "Ready"
	PLAYBACKREQUESTTYPE_NEXT_ITEM PlaybackRequestType = "NextItem"
	PLAYBACKREQUESTTYPE_PREVIOUS_ITEM PlaybackRequestType = "PreviousItem"
	PLAYBACKREQUESTTYPE_SET_REPEAT_MODE PlaybackRequestType = "SetRepeatMode"
	PLAYBACKREQUESTTYPE_SET_SHUFFLE_MODE PlaybackRequestType = "SetShuffleMode"
	PLAYBACKREQUESTTYPE_PING PlaybackRequestType = "Ping"
	PLAYBACKREQUESTTYPE_IGNORE_WAIT PlaybackRequestType = "IgnoreWait"
)

// All allowed values of PlaybackRequestType enum
var AllowedPlaybackRequestTypeEnumValues = []PlaybackRequestType{
	"Play",
	"SetPlaylistItem",
	"RemoveFromPlaylist",
	"MovePlaylistItem",
	"Queue",
	"Unpause",
	"Pause",
	"Stop",
	"Seek",
	"Buffer",
	"Ready",
	"NextItem",
	"PreviousItem",
	"SetRepeatMode",
	"SetShuffleMode",
	"Ping",
	"IgnoreWait",
}

func (v *PlaybackRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlaybackRequestType(value)
	for _, existing := range AllowedPlaybackRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlaybackRequestType", value)
}

// NewPlaybackRequestTypeFromValue returns a pointer to a valid PlaybackRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlaybackRequestTypeFromValue(v string) (*PlaybackRequestType, error) {
	ev := PlaybackRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlaybackRequestType: valid values are %v", v, AllowedPlaybackRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlaybackRequestType) IsValid() bool {
	for _, existing := range AllowedPlaybackRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlaybackRequestType value
func (v PlaybackRequestType) Ptr() *PlaybackRequestType {
	return &v
}

type NullablePlaybackRequestType struct {
	value *PlaybackRequestType
	isSet bool
}

func (v NullablePlaybackRequestType) Get() *PlaybackRequestType {
	return v.value
}

func (v *NullablePlaybackRequestType) Set(val *PlaybackRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaybackRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaybackRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaybackRequestType(val *PlaybackRequestType) *NullablePlaybackRequestType {
	return &NullablePlaybackRequestType{value: val, isSet: true}
}

func (v NullablePlaybackRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaybackRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

