/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the NotificationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationDto{}

// NotificationDto The notification DTO.
type NotificationDto struct {
	// Gets or sets the notification ID. Defaults to an empty string.
	Id *string `json:"Id,omitempty"`
	// Gets or sets the notification's user ID. Defaults to an empty string.
	UserId *string `json:"UserId,omitempty"`
	// Gets or sets the notification date.
	Date *time.Time `json:"Date,omitempty"`
	// Gets or sets a value indicating whether the notification has been read. Defaults to false.
	IsRead *bool `json:"IsRead,omitempty"`
	// Gets or sets the notification's name. Defaults to an empty string.
	Name *string `json:"Name,omitempty"`
	// Gets or sets the notification's description. Defaults to an empty string.
	Description *string `json:"Description,omitempty"`
	// Gets or sets the notification's URL. Defaults to an empty string.
	Url *string `json:"Url,omitempty"`
	// Gets or sets the notification level.
	Level *NotificationLevel `json:"Level,omitempty"`
}

// NewNotificationDto instantiates a new NotificationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationDto() *NotificationDto {
	this := NotificationDto{}
	return &this
}

// NewNotificationDtoWithDefaults instantiates a new NotificationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDtoWithDefaults() *NotificationDto {
	this := NotificationDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationDto) SetId(v string) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *NotificationDto) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *NotificationDto) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *NotificationDto) SetUserId(v string) {
	o.UserId = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *NotificationDto) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *NotificationDto) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *NotificationDto) SetDate(v time.Time) {
	o.Date = &v
}

// GetIsRead returns the IsRead field value if set, zero value otherwise.
func (o *NotificationDto) GetIsRead() bool {
	if o == nil || IsNil(o.IsRead) {
		var ret bool
		return ret
	}
	return *o.IsRead
}

// GetIsReadOk returns a tuple with the IsRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetIsReadOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRead) {
		return nil, false
	}
	return o.IsRead, true
}

// HasIsRead returns a boolean if a field has been set.
func (o *NotificationDto) HasIsRead() bool {
	if o != nil && !IsNil(o.IsRead) {
		return true
	}

	return false
}

// SetIsRead gets a reference to the given bool and assigns it to the IsRead field.
func (o *NotificationDto) SetIsRead(v bool) {
	o.IsRead = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotificationDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotificationDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotificationDto) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NotificationDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NotificationDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NotificationDto) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NotificationDto) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NotificationDto) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NotificationDto) SetUrl(v string) {
	o.Url = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *NotificationDto) GetLevel() NotificationLevel {
	if o == nil || IsNil(o.Level) {
		var ret NotificationLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetLevelOk() (*NotificationLevel, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *NotificationDto) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given NotificationLevel and assigns it to the Level field.
func (o *NotificationDto) SetLevel(v NotificationLevel) {
	o.Level = &v
}

func (o NotificationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.IsRead) {
		toSerialize["IsRead"] = o.IsRead
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Url) {
		toSerialize["Url"] = o.Url
	}
	if !IsNil(o.Level) {
		toSerialize["Level"] = o.Level
	}
	return toSerialize, nil
}

type NullableNotificationDto struct {
	value *NotificationDto
	isSet bool
}

func (v NullableNotificationDto) Get() *NotificationDto {
	return v.value
}

func (v *NullableNotificationDto) Set(val *NotificationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationDto(val *NotificationDto) *NullableNotificationDto {
	return &NullableNotificationDto{value: val, isSet: true}
}

func (v NullableNotificationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


