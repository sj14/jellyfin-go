/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NotificationTypeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationTypeInfo{}

// NotificationTypeInfo struct for NotificationTypeInfo
type NotificationTypeInfo struct {
	Type NullableString `json:"Type,omitempty"`
	Name NullableString `json:"Name,omitempty"`
	Enabled *bool `json:"Enabled,omitempty"`
	Category NullableString `json:"Category,omitempty"`
	IsBasedOnUserEvent *bool `json:"IsBasedOnUserEvent,omitempty"`
}

// NewNotificationTypeInfo instantiates a new NotificationTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationTypeInfo() *NotificationTypeInfo {
	this := NotificationTypeInfo{}
	return &this
}

// NewNotificationTypeInfoWithDefaults instantiates a new NotificationTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationTypeInfoWithDefaults() *NotificationTypeInfo {
	this := NotificationTypeInfo{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationTypeInfo) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationTypeInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *NotificationTypeInfo) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *NotificationTypeInfo) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *NotificationTypeInfo) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *NotificationTypeInfo) UnsetType() {
	o.Type.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationTypeInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationTypeInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NotificationTypeInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NotificationTypeInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NotificationTypeInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NotificationTypeInfo) UnsetName() {
	o.Name.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NotificationTypeInfo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationTypeInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NotificationTypeInfo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NotificationTypeInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationTypeInfo) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationTypeInfo) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *NotificationTypeInfo) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *NotificationTypeInfo) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *NotificationTypeInfo) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *NotificationTypeInfo) UnsetCategory() {
	o.Category.Unset()
}

// GetIsBasedOnUserEvent returns the IsBasedOnUserEvent field value if set, zero value otherwise.
func (o *NotificationTypeInfo) GetIsBasedOnUserEvent() bool {
	if o == nil || IsNil(o.IsBasedOnUserEvent) {
		var ret bool
		return ret
	}
	return *o.IsBasedOnUserEvent
}

// GetIsBasedOnUserEventOk returns a tuple with the IsBasedOnUserEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationTypeInfo) GetIsBasedOnUserEventOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBasedOnUserEvent) {
		return nil, false
	}
	return o.IsBasedOnUserEvent, true
}

// HasIsBasedOnUserEvent returns a boolean if a field has been set.
func (o *NotificationTypeInfo) HasIsBasedOnUserEvent() bool {
	if o != nil && !IsNil(o.IsBasedOnUserEvent) {
		return true
	}

	return false
}

// SetIsBasedOnUserEvent gets a reference to the given bool and assigns it to the IsBasedOnUserEvent field.
func (o *NotificationTypeInfo) SetIsBasedOnUserEvent(v bool) {
	o.IsBasedOnUserEvent = &v
}

func (o NotificationTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationTypeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["Type"] = o.Type.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if o.Category.IsSet() {
		toSerialize["Category"] = o.Category.Get()
	}
	if !IsNil(o.IsBasedOnUserEvent) {
		toSerialize["IsBasedOnUserEvent"] = o.IsBasedOnUserEvent
	}
	return toSerialize, nil
}

type NullableNotificationTypeInfo struct {
	value *NotificationTypeInfo
	isSet bool
}

func (v NullableNotificationTypeInfo) Get() *NotificationTypeInfo {
	return v.value
}

func (v *NullableNotificationTypeInfo) Set(val *NotificationTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationTypeInfo(val *NotificationTypeInfo) *NullableNotificationTypeInfo {
	return &NullableNotificationTypeInfo{value: val, isSet: true}
}

func (v NullableNotificationTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


