/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdatePlaylistDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePlaylistDto{}

// UpdatePlaylistDto Update existing playlist dto. Fields set to `null` will not be updated and keep their current values.
type UpdatePlaylistDto struct {
	// Gets or sets the name of the new playlist.
	Name NullableString `json:"Name,omitempty"`
	// Gets or sets item ids of the playlist.
	Ids []string `json:"Ids,omitempty"`
	// Gets or sets the playlist users.
	Users []PlaylistUserPermissions `json:"Users,omitempty"`
	// Gets or sets a value indicating whether the playlist is public.
	IsPublic NullableBool `json:"IsPublic,omitempty"`
}

// NewUpdatePlaylistDto instantiates a new UpdatePlaylistDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePlaylistDto() *UpdatePlaylistDto {
	this := UpdatePlaylistDto{}
	return &this
}

// NewUpdatePlaylistDtoWithDefaults instantiates a new UpdatePlaylistDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePlaylistDtoWithDefaults() *UpdatePlaylistDto {
	this := UpdatePlaylistDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePlaylistDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePlaylistDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdatePlaylistDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdatePlaylistDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdatePlaylistDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdatePlaylistDto) UnsetName() {
	o.Name.Unset()
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePlaylistDto) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePlaylistDto) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *UpdatePlaylistDto) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *UpdatePlaylistDto) SetIds(v []string) {
	o.Ids = v
}

// GetUsers returns the Users field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePlaylistDto) GetUsers() []PlaylistUserPermissions {
	if o == nil {
		var ret []PlaylistUserPermissions
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePlaylistDto) GetUsersOk() ([]PlaylistUserPermissions, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UpdatePlaylistDto) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []PlaylistUserPermissions and assigns it to the Users field.
func (o *UpdatePlaylistDto) SetUsers(v []PlaylistUserPermissions) {
	o.Users = v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatePlaylistDto) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPublic.Get()
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatePlaylistDto) GetIsPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPublic.Get(), o.IsPublic.IsSet()
}

// HasIsPublic returns a boolean if a field has been set.
func (o *UpdatePlaylistDto) HasIsPublic() bool {
	if o != nil && o.IsPublic.IsSet() {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given NullableBool and assigns it to the IsPublic field.
func (o *UpdatePlaylistDto) SetIsPublic(v bool) {
	o.IsPublic.Set(&v)
}
// SetIsPublicNil sets the value for IsPublic to be an explicit nil
func (o *UpdatePlaylistDto) SetIsPublicNil() {
	o.IsPublic.Set(nil)
}

// UnsetIsPublic ensures that no value is present for IsPublic, not even an explicit nil
func (o *UpdatePlaylistDto) UnsetIsPublic() {
	o.IsPublic.Unset()
}

func (o UpdatePlaylistDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePlaylistDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.Ids != nil {
		toSerialize["Ids"] = o.Ids
	}
	if o.Users != nil {
		toSerialize["Users"] = o.Users
	}
	if o.IsPublic.IsSet() {
		toSerialize["IsPublic"] = o.IsPublic.Get()
	}
	return toSerialize, nil
}

type NullableUpdatePlaylistDto struct {
	value *UpdatePlaylistDto
	isSet bool
}

func (v NullableUpdatePlaylistDto) Get() *UpdatePlaylistDto {
	return v.value
}

func (v *NullableUpdatePlaylistDto) Set(val *UpdatePlaylistDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePlaylistDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePlaylistDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePlaylistDto(val *UpdatePlaylistDto) *NullableUpdatePlaylistDto {
	return &NullableUpdatePlaylistDto{value: val, isSet: true}
}

func (v NullableUpdatePlaylistDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePlaylistDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


