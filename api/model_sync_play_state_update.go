/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SyncPlayStateUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncPlayStateUpdate{}

// SyncPlayStateUpdate struct for SyncPlayStateUpdate
type SyncPlayStateUpdate struct {
	// Gets the group identifier.
	GroupId *string `json:"GroupId,omitempty"`
	// Gets the update data.
	Data *GroupStateUpdate `json:"Data,omitempty"`
	// Enum GroupUpdateType.
	Type *GroupUpdateType `json:"Type,omitempty"`
}

// NewSyncPlayStateUpdate instantiates a new SyncPlayStateUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncPlayStateUpdate() *SyncPlayStateUpdate {
	this := SyncPlayStateUpdate{}
	return &this
}

// NewSyncPlayStateUpdateWithDefaults instantiates a new SyncPlayStateUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncPlayStateUpdateWithDefaults() *SyncPlayStateUpdate {
	this := SyncPlayStateUpdate{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *SyncPlayStateUpdate) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPlayStateUpdate) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *SyncPlayStateUpdate) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *SyncPlayStateUpdate) SetGroupId(v string) {
	o.GroupId = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SyncPlayStateUpdate) GetData() GroupStateUpdate {
	if o == nil || IsNil(o.Data) {
		var ret GroupStateUpdate
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPlayStateUpdate) GetDataOk() (*GroupStateUpdate, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SyncPlayStateUpdate) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given GroupStateUpdate and assigns it to the Data field.
func (o *SyncPlayStateUpdate) SetData(v GroupStateUpdate) {
	o.Data = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SyncPlayStateUpdate) GetType() GroupUpdateType {
	if o == nil || IsNil(o.Type) {
		var ret GroupUpdateType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPlayStateUpdate) GetTypeOk() (*GroupUpdateType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SyncPlayStateUpdate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given GroupUpdateType and assigns it to the Type field.
func (o *SyncPlayStateUpdate) SetType(v GroupUpdateType) {
	o.Type = &v
}

func (o SyncPlayStateUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncPlayStateUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["GroupId"] = o.GroupId
	}
	if !IsNil(o.Data) {
		toSerialize["Data"] = o.Data
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSyncPlayStateUpdate struct {
	value *SyncPlayStateUpdate
	isSet bool
}

func (v NullableSyncPlayStateUpdate) Get() *SyncPlayStateUpdate {
	return v.value
}

func (v *NullableSyncPlayStateUpdate) Set(val *SyncPlayStateUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncPlayStateUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncPlayStateUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncPlayStateUpdate(val *SyncPlayStateUpdate) *NullableSyncPlayStateUpdate {
	return &NullableSyncPlayStateUpdate{value: val, isSet: true}
}

func (v NullableSyncPlayStateUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncPlayStateUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


