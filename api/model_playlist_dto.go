/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PlaylistDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlaylistDto{}

// PlaylistDto DTO for playlists.
type PlaylistDto struct {
	// Gets or sets a value indicating whether the playlist is publicly readable.
	OpenAccess *bool `json:"OpenAccess,omitempty"`
	// Gets or sets the share permissions.
	Shares []PlaylistUserPermissions `json:"Shares,omitempty"`
	// Gets or sets the item ids.
	ItemIds []string `json:"ItemIds,omitempty"`
}

// NewPlaylistDto instantiates a new PlaylistDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaylistDto() *PlaylistDto {
	this := PlaylistDto{}
	return &this
}

// NewPlaylistDtoWithDefaults instantiates a new PlaylistDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaylistDtoWithDefaults() *PlaylistDto {
	this := PlaylistDto{}
	return &this
}

// GetOpenAccess returns the OpenAccess field value if set, zero value otherwise.
func (o *PlaylistDto) GetOpenAccess() bool {
	if o == nil || IsNil(o.OpenAccess) {
		var ret bool
		return ret
	}
	return *o.OpenAccess
}

// GetOpenAccessOk returns a tuple with the OpenAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistDto) GetOpenAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenAccess) {
		return nil, false
	}
	return o.OpenAccess, true
}

// HasOpenAccess returns a boolean if a field has been set.
func (o *PlaylistDto) HasOpenAccess() bool {
	if o != nil && !IsNil(o.OpenAccess) {
		return true
	}

	return false
}

// SetOpenAccess gets a reference to the given bool and assigns it to the OpenAccess field.
func (o *PlaylistDto) SetOpenAccess(v bool) {
	o.OpenAccess = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *PlaylistDto) GetShares() []PlaylistUserPermissions {
	if o == nil || IsNil(o.Shares) {
		var ret []PlaylistUserPermissions
		return ret
	}
	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistDto) GetSharesOk() ([]PlaylistUserPermissions, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *PlaylistDto) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given []PlaylistUserPermissions and assigns it to the Shares field.
func (o *PlaylistDto) SetShares(v []PlaylistUserPermissions) {
	o.Shares = v
}

// GetItemIds returns the ItemIds field value if set, zero value otherwise.
func (o *PlaylistDto) GetItemIds() []string {
	if o == nil || IsNil(o.ItemIds) {
		var ret []string
		return ret
	}
	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistDto) GetItemIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ItemIds) {
		return nil, false
	}
	return o.ItemIds, true
}

// HasItemIds returns a boolean if a field has been set.
func (o *PlaylistDto) HasItemIds() bool {
	if o != nil && !IsNil(o.ItemIds) {
		return true
	}

	return false
}

// SetItemIds gets a reference to the given []string and assigns it to the ItemIds field.
func (o *PlaylistDto) SetItemIds(v []string) {
	o.ItemIds = v
}

func (o PlaylistDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlaylistDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpenAccess) {
		toSerialize["OpenAccess"] = o.OpenAccess
	}
	if !IsNil(o.Shares) {
		toSerialize["Shares"] = o.Shares
	}
	if !IsNil(o.ItemIds) {
		toSerialize["ItemIds"] = o.ItemIds
	}
	return toSerialize, nil
}

type NullablePlaylistDto struct {
	value *PlaylistDto
	isSet bool
}

func (v NullablePlaylistDto) Get() *PlaylistDto {
	return v.value
}

func (v *NullablePlaylistDto) Set(val *PlaylistDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaylistDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaylistDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaylistDto(val *PlaylistDto) *NullablePlaylistDto {
	return &NullablePlaylistDto{value: val, isSet: true}
}

func (v NullablePlaylistDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaylistDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


