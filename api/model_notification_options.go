/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NotificationOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationOptions{}

// NotificationOptions struct for NotificationOptions
type NotificationOptions struct {
	Options []NotificationOption `json:"Options,omitempty"`
}

// NewNotificationOptions instantiates a new NotificationOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationOptions() *NotificationOptions {
	this := NotificationOptions{}
	return &this
}

// NewNotificationOptionsWithDefaults instantiates a new NotificationOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationOptionsWithDefaults() *NotificationOptions {
	this := NotificationOptions{}
	return &this
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationOptions) GetOptions() []NotificationOption {
	if o == nil {
		var ret []NotificationOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationOptions) GetOptionsOk() ([]NotificationOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *NotificationOptions) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []NotificationOption and assigns it to the Options field.
func (o *NotificationOptions) SetOptions(v []NotificationOption) {
	o.Options = v
}

func (o NotificationOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Options != nil {
		toSerialize["Options"] = o.Options
	}
	return toSerialize, nil
}

type NullableNotificationOptions struct {
	value *NotificationOptions
	isSet bool
}

func (v NullableNotificationOptions) Get() *NotificationOptions {
	return v.value
}

func (v *NullableNotificationOptions) Set(val *NotificationOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationOptions(val *NotificationOptions) *NullableNotificationOptions {
	return &NullableNotificationOptions{value: val, isSet: true}
}

func (v NullableNotificationOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


