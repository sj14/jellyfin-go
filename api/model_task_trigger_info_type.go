/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// TaskTriggerInfoType Enum TaskTriggerInfoType.
type TaskTriggerInfoType string

// List of TaskTriggerInfoType
const (
	TASKTRIGGERINFOTYPE_DAILY_TRIGGER TaskTriggerInfoType = "DailyTrigger"
	TASKTRIGGERINFOTYPE_WEEKLY_TRIGGER TaskTriggerInfoType = "WeeklyTrigger"
	TASKTRIGGERINFOTYPE_INTERVAL_TRIGGER TaskTriggerInfoType = "IntervalTrigger"
	TASKTRIGGERINFOTYPE_STARTUP_TRIGGER TaskTriggerInfoType = "StartupTrigger"
)

// All allowed values of TaskTriggerInfoType enum
var AllowedTaskTriggerInfoTypeEnumValues = []TaskTriggerInfoType{
	"DailyTrigger",
	"WeeklyTrigger",
	"IntervalTrigger",
	"StartupTrigger",
}

func (v *TaskTriggerInfoType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskTriggerInfoType(value)
	for _, existing := range AllowedTaskTriggerInfoTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskTriggerInfoType", value)
}

// NewTaskTriggerInfoTypeFromValue returns a pointer to a valid TaskTriggerInfoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskTriggerInfoTypeFromValue(v string) (*TaskTriggerInfoType, error) {
	ev := TaskTriggerInfoType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskTriggerInfoType: valid values are %v", v, AllowedTaskTriggerInfoTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskTriggerInfoType) IsValid() bool {
	for _, existing := range AllowedTaskTriggerInfoTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskTriggerInfoType value
func (v TaskTriggerInfoType) Ptr() *TaskTriggerInfoType {
	return &v
}

type NullableTaskTriggerInfoType struct {
	value *TaskTriggerInfoType
	isSet bool
}

func (v NullableTaskTriggerInfoType) Get() *TaskTriggerInfoType {
	return v.value
}

func (v *NullableTaskTriggerInfoType) Set(val *TaskTriggerInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskTriggerInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskTriggerInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskTriggerInfoType(val *TaskTriggerInfoType) *NullableTaskTriggerInfoType {
	return &NullableTaskTriggerInfoType{value: val, isSet: true}
}

func (v NullableTaskTriggerInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskTriggerInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

