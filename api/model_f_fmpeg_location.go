/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// FFmpegLocation Enum describing the location of the FFmpeg tool.
type FFmpegLocation string

// List of FFmpegLocation
const (
	FFMPEGLOCATION_NOT_FOUND FFmpegLocation = "NotFound"
	FFMPEGLOCATION_SET_BY_ARGUMENT FFmpegLocation = "SetByArgument"
	FFMPEGLOCATION_CUSTOM FFmpegLocation = "Custom"
	FFMPEGLOCATION_SYSTEM FFmpegLocation = "System"
)

// All allowed values of FFmpegLocation enum
var AllowedFFmpegLocationEnumValues = []FFmpegLocation{
	"NotFound",
	"SetByArgument",
	"Custom",
	"System",
}

func (v *FFmpegLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FFmpegLocation(value)
	for _, existing := range AllowedFFmpegLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FFmpegLocation", value)
}

// NewFFmpegLocationFromValue returns a pointer to a valid FFmpegLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFFmpegLocationFromValue(v string) (*FFmpegLocation, error) {
	ev := FFmpegLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FFmpegLocation: valid values are %v", v, AllowedFFmpegLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FFmpegLocation) IsValid() bool {
	for _, existing := range AllowedFFmpegLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FFmpegLocation value
func (v FFmpegLocation) Ptr() *FFmpegLocation {
	return &v
}

type NullableFFmpegLocation struct {
	value *FFmpegLocation
	isSet bool
}

func (v NullableFFmpegLocation) Get() *FFmpegLocation {
	return v.value
}

func (v *NullableFFmpegLocation) Set(val *FFmpegLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableFFmpegLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableFFmpegLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFFmpegLocation(val *FFmpegLocation) *NullableFFmpegLocation {
	return &NullableFFmpegLocation{value: val, isSet: true}
}

func (v NullableFFmpegLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFFmpegLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

