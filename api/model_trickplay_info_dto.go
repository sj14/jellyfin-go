/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the TrickplayInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrickplayInfoDto{}

// TrickplayInfoDto The trickplay api model.
type TrickplayInfoDto struct {
	// Gets the width of an individual thumbnail.
	Width *int32 `json:"Width,omitempty"`
	// Gets the height of an individual thumbnail.
	Height *int32 `json:"Height,omitempty"`
	// Gets the amount of thumbnails per row.
	TileWidth *int32 `json:"TileWidth,omitempty"`
	// Gets the amount of thumbnails per column.
	TileHeight *int32 `json:"TileHeight,omitempty"`
	// Gets the total amount of non-black thumbnails.
	ThumbnailCount *int32 `json:"ThumbnailCount,omitempty"`
	// Gets the interval in milliseconds between each trickplay thumbnail.
	Interval *int32 `json:"Interval,omitempty"`
	// Gets the peak bandwidth usage in bits per second.
	Bandwidth *int32 `json:"Bandwidth,omitempty"`
}

// NewTrickplayInfoDto instantiates a new TrickplayInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrickplayInfoDto() *TrickplayInfoDto {
	this := TrickplayInfoDto{}
	return &this
}

// NewTrickplayInfoDtoWithDefaults instantiates a new TrickplayInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrickplayInfoDtoWithDefaults() *TrickplayInfoDto {
	this := TrickplayInfoDto{}
	return &this
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *TrickplayInfoDto) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrickplayInfoDto) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *TrickplayInfoDto) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *TrickplayInfoDto) SetWidth(v int32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *TrickplayInfoDto) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrickplayInfoDto) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *TrickplayInfoDto) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *TrickplayInfoDto) SetHeight(v int32) {
	o.Height = &v
}

// GetTileWidth returns the TileWidth field value if set, zero value otherwise.
func (o *TrickplayInfoDto) GetTileWidth() int32 {
	if o == nil || IsNil(o.TileWidth) {
		var ret int32
		return ret
	}
	return *o.TileWidth
}

// GetTileWidthOk returns a tuple with the TileWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrickplayInfoDto) GetTileWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.TileWidth) {
		return nil, false
	}
	return o.TileWidth, true
}

// HasTileWidth returns a boolean if a field has been set.
func (o *TrickplayInfoDto) HasTileWidth() bool {
	if o != nil && !IsNil(o.TileWidth) {
		return true
	}

	return false
}

// SetTileWidth gets a reference to the given int32 and assigns it to the TileWidth field.
func (o *TrickplayInfoDto) SetTileWidth(v int32) {
	o.TileWidth = &v
}

// GetTileHeight returns the TileHeight field value if set, zero value otherwise.
func (o *TrickplayInfoDto) GetTileHeight() int32 {
	if o == nil || IsNil(o.TileHeight) {
		var ret int32
		return ret
	}
	return *o.TileHeight
}

// GetTileHeightOk returns a tuple with the TileHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrickplayInfoDto) GetTileHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.TileHeight) {
		return nil, false
	}
	return o.TileHeight, true
}

// HasTileHeight returns a boolean if a field has been set.
func (o *TrickplayInfoDto) HasTileHeight() bool {
	if o != nil && !IsNil(o.TileHeight) {
		return true
	}

	return false
}

// SetTileHeight gets a reference to the given int32 and assigns it to the TileHeight field.
func (o *TrickplayInfoDto) SetTileHeight(v int32) {
	o.TileHeight = &v
}

// GetThumbnailCount returns the ThumbnailCount field value if set, zero value otherwise.
func (o *TrickplayInfoDto) GetThumbnailCount() int32 {
	if o == nil || IsNil(o.ThumbnailCount) {
		var ret int32
		return ret
	}
	return *o.ThumbnailCount
}

// GetThumbnailCountOk returns a tuple with the ThumbnailCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrickplayInfoDto) GetThumbnailCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ThumbnailCount) {
		return nil, false
	}
	return o.ThumbnailCount, true
}

// HasThumbnailCount returns a boolean if a field has been set.
func (o *TrickplayInfoDto) HasThumbnailCount() bool {
	if o != nil && !IsNil(o.ThumbnailCount) {
		return true
	}

	return false
}

// SetThumbnailCount gets a reference to the given int32 and assigns it to the ThumbnailCount field.
func (o *TrickplayInfoDto) SetThumbnailCount(v int32) {
	o.ThumbnailCount = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *TrickplayInfoDto) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrickplayInfoDto) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *TrickplayInfoDto) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *TrickplayInfoDto) SetInterval(v int32) {
	o.Interval = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *TrickplayInfoDto) GetBandwidth() int32 {
	if o == nil || IsNil(o.Bandwidth) {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrickplayInfoDto) GetBandwidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Bandwidth) {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *TrickplayInfoDto) HasBandwidth() bool {
	if o != nil && !IsNil(o.Bandwidth) {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *TrickplayInfoDto) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

func (o TrickplayInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrickplayInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Width) {
		toSerialize["Width"] = o.Width
	}
	if !IsNil(o.Height) {
		toSerialize["Height"] = o.Height
	}
	if !IsNil(o.TileWidth) {
		toSerialize["TileWidth"] = o.TileWidth
	}
	if !IsNil(o.TileHeight) {
		toSerialize["TileHeight"] = o.TileHeight
	}
	if !IsNil(o.ThumbnailCount) {
		toSerialize["ThumbnailCount"] = o.ThumbnailCount
	}
	if !IsNil(o.Interval) {
		toSerialize["Interval"] = o.Interval
	}
	if !IsNil(o.Bandwidth) {
		toSerialize["Bandwidth"] = o.Bandwidth
	}
	return toSerialize, nil
}

type NullableTrickplayInfoDto struct {
	value *TrickplayInfoDto
	isSet bool
}

func (v NullableTrickplayInfoDto) Get() *TrickplayInfoDto {
	return v.value
}

func (v *NullableTrickplayInfoDto) Set(val *TrickplayInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTrickplayInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTrickplayInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrickplayInfoDto(val *TrickplayInfoDto) *NullableTrickplayInfoDto {
	return &NullableTrickplayInfoDto{value: val, isSet: true}
}

func (v NullableTrickplayInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrickplayInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


