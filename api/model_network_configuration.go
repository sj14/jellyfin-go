/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NetworkConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkConfiguration{}

// NetworkConfiguration Defines the Jellyfin.Networking.Configuration.NetworkConfiguration.
type NetworkConfiguration struct {
	// Gets or sets a value indicating whether the server should force connections over HTTPS.
	RequireHttps *bool `json:"RequireHttps,omitempty"`
	// Gets or sets the filesystem path of an X.509 certificate to use for SSL.
	CertificatePath *string `json:"CertificatePath,omitempty"`
	// Gets or sets the password required to access the X.509 certificate data in the file specified by Jellyfin.Networking.Configuration.NetworkConfiguration.CertificatePath.
	CertificatePassword *string `json:"CertificatePassword,omitempty"`
	// Gets or sets a value used to specify the URL prefix that your Jellyfin instance can be accessed at.
	BaseUrl *string `json:"BaseUrl,omitempty"`
	// Gets or sets the public HTTPS port.
	PublicHttpsPort *int32 `json:"PublicHttpsPort,omitempty"`
	// Gets or sets the HTTP server port number.
	HttpServerPortNumber *int32 `json:"HttpServerPortNumber,omitempty"`
	// Gets or sets the HTTPS server port number.
	HttpsPortNumber *int32 `json:"HttpsPortNumber,omitempty"`
	// Gets or sets a value indicating whether to use HTTPS.
	EnableHttps *bool `json:"EnableHttps,omitempty"`
	// Gets or sets the public mapped port.
	PublicPort *int32 `json:"PublicPort,omitempty"`
	// Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding.
	UPnPCreateHttpPortMap *bool `json:"UPnPCreateHttpPortMap,omitempty"`
	// Gets or sets the UDPPortRange.
	UDPPortRange *string `json:"UDPPortRange,omitempty"`
	// Gets or sets a value indicating whether gets or sets IPV6 capability.
	EnableIPV6 *bool `json:"EnableIPV6,omitempty"`
	// Gets or sets a value indicating whether gets or sets IPV4 capability.
	EnableIPV4 *bool `json:"EnableIPV4,omitempty"`
	// Gets or sets a value indicating whether detailed SSDP logs are sent to the console/log.  \"Emby.Dlna\": \"Debug\" must be set in logging.default.json for this property to have any effect.
	EnableSSDPTracing *bool `json:"EnableSSDPTracing,omitempty"`
	// Gets or sets the SSDPTracingFilter  Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \"Emby.Dlna\": \"Debug\" msut be set in logging.default.json for this property to work.
	SSDPTracingFilter *string `json:"SSDPTracingFilter,omitempty"`
	// Gets or sets the number of times SSDP UDP messages are sent.
	UDPSendCount *int32 `json:"UDPSendCount,omitempty"`
	// Gets or sets the delay between each groups of SSDP messages (in ms).
	UDPSendDelay *int32 `json:"UDPSendDelay,omitempty"`
	// Gets or sets a value indicating whether address names that match Jellyfin.Networking.Configuration.NetworkConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding.
	IgnoreVirtualInterfaces *bool `json:"IgnoreVirtualInterfaces,omitempty"`
	// Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. <seealso cref=\"P:Jellyfin.Networking.Configuration.NetworkConfiguration.IgnoreVirtualInterfaces\" />.
	VirtualInterfaceNames *string `json:"VirtualInterfaceNames,omitempty"`
	// Gets or sets the time (in seconds) between the pings of SSDP gateway monitor.
	GatewayMonitorPeriod *int32 `json:"GatewayMonitorPeriod,omitempty"`
	// Gets a value indicating whether multi-socket binding is available.
	EnableMultiSocketBinding *bool `json:"EnableMultiSocketBinding,omitempty"`
	// Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used.
	TrustAllIP6Interfaces *bool `json:"TrustAllIP6Interfaces,omitempty"`
	// Gets or sets the ports that HDHomerun uses.
	HDHomerunPortRange *string `json:"HDHomerunPortRange,omitempty"`
	// Gets or sets the PublishedServerUriBySubnet  Gets or sets PublishedServerUri to advertise for specific subnets.
	PublishedServerUriBySubnet []string `json:"PublishedServerUriBySubnet,omitempty"`
	// Gets or sets a value indicating whether Autodiscovery tracing is enabled.
	AutoDiscoveryTracing *bool `json:"AutoDiscoveryTracing,omitempty"`
	// Gets or sets a value indicating whether Autodiscovery is enabled.
	AutoDiscovery *bool `json:"AutoDiscovery,omitempty"`
	// Gets or sets the filter for remote IP connectivity. Used in conjuntion with <seealso cref=\"P:Jellyfin.Networking.Configuration.NetworkConfiguration.IsRemoteIPFilterBlacklist\" />.
	RemoteIPFilter []string `json:"RemoteIPFilter,omitempty"`
	// Gets or sets a value indicating whether <seealso cref=\"P:Jellyfin.Networking.Configuration.NetworkConfiguration.RemoteIPFilter\" /> contains a blacklist or a whitelist. Default is a whitelist.
	IsRemoteIPFilterBlacklist *bool `json:"IsRemoteIPFilterBlacklist,omitempty"`
	// Gets or sets a value indicating whether to enable automatic port forwarding.
	EnableUPnP *bool `json:"EnableUPnP,omitempty"`
	// Gets or sets a value indicating whether access outside of the LAN is permitted.
	EnableRemoteAccess *bool `json:"EnableRemoteAccess,omitempty"`
	// Gets or sets the subnets that are deemed to make up the LAN.
	LocalNetworkSubnets []string `json:"LocalNetworkSubnets,omitempty"`
	// Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.
	LocalNetworkAddresses []string `json:"LocalNetworkAddresses,omitempty"`
	// Gets or sets the known proxies. If the proxy is a network, it's added to the KnownNetworks.
	KnownProxies []string `json:"KnownProxies,omitempty"`
	// Gets or sets a value indicating whether the published server uri is based on information in HTTP requests.
	EnablePublishedServerUriByRequest *bool `json:"EnablePublishedServerUriByRequest,omitempty"`
}

// NewNetworkConfiguration instantiates a new NetworkConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkConfiguration() *NetworkConfiguration {
	this := NetworkConfiguration{}
	return &this
}

// NewNetworkConfigurationWithDefaults instantiates a new NetworkConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkConfigurationWithDefaults() *NetworkConfiguration {
	this := NetworkConfiguration{}
	return &this
}

// GetRequireHttps returns the RequireHttps field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetRequireHttps() bool {
	if o == nil || IsNil(o.RequireHttps) {
		var ret bool
		return ret
	}
	return *o.RequireHttps
}

// GetRequireHttpsOk returns a tuple with the RequireHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetRequireHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireHttps) {
		return nil, false
	}
	return o.RequireHttps, true
}

// HasRequireHttps returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasRequireHttps() bool {
	if o != nil && !IsNil(o.RequireHttps) {
		return true
	}

	return false
}

// SetRequireHttps gets a reference to the given bool and assigns it to the RequireHttps field.
func (o *NetworkConfiguration) SetRequireHttps(v bool) {
	o.RequireHttps = &v
}

// GetCertificatePath returns the CertificatePath field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetCertificatePath() string {
	if o == nil || IsNil(o.CertificatePath) {
		var ret string
		return ret
	}
	return *o.CertificatePath
}

// GetCertificatePathOk returns a tuple with the CertificatePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetCertificatePathOk() (*string, bool) {
	if o == nil || IsNil(o.CertificatePath) {
		return nil, false
	}
	return o.CertificatePath, true
}

// HasCertificatePath returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasCertificatePath() bool {
	if o != nil && !IsNil(o.CertificatePath) {
		return true
	}

	return false
}

// SetCertificatePath gets a reference to the given string and assigns it to the CertificatePath field.
func (o *NetworkConfiguration) SetCertificatePath(v string) {
	o.CertificatePath = &v
}

// GetCertificatePassword returns the CertificatePassword field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetCertificatePassword() string {
	if o == nil || IsNil(o.CertificatePassword) {
		var ret string
		return ret
	}
	return *o.CertificatePassword
}

// GetCertificatePasswordOk returns a tuple with the CertificatePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetCertificatePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.CertificatePassword) {
		return nil, false
	}
	return o.CertificatePassword, true
}

// HasCertificatePassword returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasCertificatePassword() bool {
	if o != nil && !IsNil(o.CertificatePassword) {
		return true
	}

	return false
}

// SetCertificatePassword gets a reference to the given string and assigns it to the CertificatePassword field.
func (o *NetworkConfiguration) SetCertificatePassword(v string) {
	o.CertificatePassword = &v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrl) {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasBaseUrl() bool {
	if o != nil && !IsNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *NetworkConfiguration) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetPublicHttpsPort returns the PublicHttpsPort field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetPublicHttpsPort() int32 {
	if o == nil || IsNil(o.PublicHttpsPort) {
		var ret int32
		return ret
	}
	return *o.PublicHttpsPort
}

// GetPublicHttpsPortOk returns a tuple with the PublicHttpsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetPublicHttpsPortOk() (*int32, bool) {
	if o == nil || IsNil(o.PublicHttpsPort) {
		return nil, false
	}
	return o.PublicHttpsPort, true
}

// HasPublicHttpsPort returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasPublicHttpsPort() bool {
	if o != nil && !IsNil(o.PublicHttpsPort) {
		return true
	}

	return false
}

// SetPublicHttpsPort gets a reference to the given int32 and assigns it to the PublicHttpsPort field.
func (o *NetworkConfiguration) SetPublicHttpsPort(v int32) {
	o.PublicHttpsPort = &v
}

// GetHttpServerPortNumber returns the HttpServerPortNumber field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetHttpServerPortNumber() int32 {
	if o == nil || IsNil(o.HttpServerPortNumber) {
		var ret int32
		return ret
	}
	return *o.HttpServerPortNumber
}

// GetHttpServerPortNumberOk returns a tuple with the HttpServerPortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetHttpServerPortNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.HttpServerPortNumber) {
		return nil, false
	}
	return o.HttpServerPortNumber, true
}

// HasHttpServerPortNumber returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasHttpServerPortNumber() bool {
	if o != nil && !IsNil(o.HttpServerPortNumber) {
		return true
	}

	return false
}

// SetHttpServerPortNumber gets a reference to the given int32 and assigns it to the HttpServerPortNumber field.
func (o *NetworkConfiguration) SetHttpServerPortNumber(v int32) {
	o.HttpServerPortNumber = &v
}

// GetHttpsPortNumber returns the HttpsPortNumber field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetHttpsPortNumber() int32 {
	if o == nil || IsNil(o.HttpsPortNumber) {
		var ret int32
		return ret
	}
	return *o.HttpsPortNumber
}

// GetHttpsPortNumberOk returns a tuple with the HttpsPortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetHttpsPortNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.HttpsPortNumber) {
		return nil, false
	}
	return o.HttpsPortNumber, true
}

// HasHttpsPortNumber returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasHttpsPortNumber() bool {
	if o != nil && !IsNil(o.HttpsPortNumber) {
		return true
	}

	return false
}

// SetHttpsPortNumber gets a reference to the given int32 and assigns it to the HttpsPortNumber field.
func (o *NetworkConfiguration) SetHttpsPortNumber(v int32) {
	o.HttpsPortNumber = &v
}

// GetEnableHttps returns the EnableHttps field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetEnableHttps() bool {
	if o == nil || IsNil(o.EnableHttps) {
		var ret bool
		return ret
	}
	return *o.EnableHttps
}

// GetEnableHttpsOk returns a tuple with the EnableHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetEnableHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHttps) {
		return nil, false
	}
	return o.EnableHttps, true
}

// HasEnableHttps returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasEnableHttps() bool {
	if o != nil && !IsNil(o.EnableHttps) {
		return true
	}

	return false
}

// SetEnableHttps gets a reference to the given bool and assigns it to the EnableHttps field.
func (o *NetworkConfiguration) SetEnableHttps(v bool) {
	o.EnableHttps = &v
}

// GetPublicPort returns the PublicPort field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetPublicPort() int32 {
	if o == nil || IsNil(o.PublicPort) {
		var ret int32
		return ret
	}
	return *o.PublicPort
}

// GetPublicPortOk returns a tuple with the PublicPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetPublicPortOk() (*int32, bool) {
	if o == nil || IsNil(o.PublicPort) {
		return nil, false
	}
	return o.PublicPort, true
}

// HasPublicPort returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasPublicPort() bool {
	if o != nil && !IsNil(o.PublicPort) {
		return true
	}

	return false
}

// SetPublicPort gets a reference to the given int32 and assigns it to the PublicPort field.
func (o *NetworkConfiguration) SetPublicPort(v int32) {
	o.PublicPort = &v
}

// GetUPnPCreateHttpPortMap returns the UPnPCreateHttpPortMap field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetUPnPCreateHttpPortMap() bool {
	if o == nil || IsNil(o.UPnPCreateHttpPortMap) {
		var ret bool
		return ret
	}
	return *o.UPnPCreateHttpPortMap
}

// GetUPnPCreateHttpPortMapOk returns a tuple with the UPnPCreateHttpPortMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetUPnPCreateHttpPortMapOk() (*bool, bool) {
	if o == nil || IsNil(o.UPnPCreateHttpPortMap) {
		return nil, false
	}
	return o.UPnPCreateHttpPortMap, true
}

// HasUPnPCreateHttpPortMap returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasUPnPCreateHttpPortMap() bool {
	if o != nil && !IsNil(o.UPnPCreateHttpPortMap) {
		return true
	}

	return false
}

// SetUPnPCreateHttpPortMap gets a reference to the given bool and assigns it to the UPnPCreateHttpPortMap field.
func (o *NetworkConfiguration) SetUPnPCreateHttpPortMap(v bool) {
	o.UPnPCreateHttpPortMap = &v
}

// GetUDPPortRange returns the UDPPortRange field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetUDPPortRange() string {
	if o == nil || IsNil(o.UDPPortRange) {
		var ret string
		return ret
	}
	return *o.UDPPortRange
}

// GetUDPPortRangeOk returns a tuple with the UDPPortRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetUDPPortRangeOk() (*string, bool) {
	if o == nil || IsNil(o.UDPPortRange) {
		return nil, false
	}
	return o.UDPPortRange, true
}

// HasUDPPortRange returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasUDPPortRange() bool {
	if o != nil && !IsNil(o.UDPPortRange) {
		return true
	}

	return false
}

// SetUDPPortRange gets a reference to the given string and assigns it to the UDPPortRange field.
func (o *NetworkConfiguration) SetUDPPortRange(v string) {
	o.UDPPortRange = &v
}

// GetEnableIPV6 returns the EnableIPV6 field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetEnableIPV6() bool {
	if o == nil || IsNil(o.EnableIPV6) {
		var ret bool
		return ret
	}
	return *o.EnableIPV6
}

// GetEnableIPV6Ok returns a tuple with the EnableIPV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetEnableIPV6Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableIPV6) {
		return nil, false
	}
	return o.EnableIPV6, true
}

// HasEnableIPV6 returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasEnableIPV6() bool {
	if o != nil && !IsNil(o.EnableIPV6) {
		return true
	}

	return false
}

// SetEnableIPV6 gets a reference to the given bool and assigns it to the EnableIPV6 field.
func (o *NetworkConfiguration) SetEnableIPV6(v bool) {
	o.EnableIPV6 = &v
}

// GetEnableIPV4 returns the EnableIPV4 field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetEnableIPV4() bool {
	if o == nil || IsNil(o.EnableIPV4) {
		var ret bool
		return ret
	}
	return *o.EnableIPV4
}

// GetEnableIPV4Ok returns a tuple with the EnableIPV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetEnableIPV4Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableIPV4) {
		return nil, false
	}
	return o.EnableIPV4, true
}

// HasEnableIPV4 returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasEnableIPV4() bool {
	if o != nil && !IsNil(o.EnableIPV4) {
		return true
	}

	return false
}

// SetEnableIPV4 gets a reference to the given bool and assigns it to the EnableIPV4 field.
func (o *NetworkConfiguration) SetEnableIPV4(v bool) {
	o.EnableIPV4 = &v
}

// GetEnableSSDPTracing returns the EnableSSDPTracing field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetEnableSSDPTracing() bool {
	if o == nil || IsNil(o.EnableSSDPTracing) {
		var ret bool
		return ret
	}
	return *o.EnableSSDPTracing
}

// GetEnableSSDPTracingOk returns a tuple with the EnableSSDPTracing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetEnableSSDPTracingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSSDPTracing) {
		return nil, false
	}
	return o.EnableSSDPTracing, true
}

// HasEnableSSDPTracing returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasEnableSSDPTracing() bool {
	if o != nil && !IsNil(o.EnableSSDPTracing) {
		return true
	}

	return false
}

// SetEnableSSDPTracing gets a reference to the given bool and assigns it to the EnableSSDPTracing field.
func (o *NetworkConfiguration) SetEnableSSDPTracing(v bool) {
	o.EnableSSDPTracing = &v
}

// GetSSDPTracingFilter returns the SSDPTracingFilter field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetSSDPTracingFilter() string {
	if o == nil || IsNil(o.SSDPTracingFilter) {
		var ret string
		return ret
	}
	return *o.SSDPTracingFilter
}

// GetSSDPTracingFilterOk returns a tuple with the SSDPTracingFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetSSDPTracingFilterOk() (*string, bool) {
	if o == nil || IsNil(o.SSDPTracingFilter) {
		return nil, false
	}
	return o.SSDPTracingFilter, true
}

// HasSSDPTracingFilter returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasSSDPTracingFilter() bool {
	if o != nil && !IsNil(o.SSDPTracingFilter) {
		return true
	}

	return false
}

// SetSSDPTracingFilter gets a reference to the given string and assigns it to the SSDPTracingFilter field.
func (o *NetworkConfiguration) SetSSDPTracingFilter(v string) {
	o.SSDPTracingFilter = &v
}

// GetUDPSendCount returns the UDPSendCount field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetUDPSendCount() int32 {
	if o == nil || IsNil(o.UDPSendCount) {
		var ret int32
		return ret
	}
	return *o.UDPSendCount
}

// GetUDPSendCountOk returns a tuple with the UDPSendCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetUDPSendCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UDPSendCount) {
		return nil, false
	}
	return o.UDPSendCount, true
}

// HasUDPSendCount returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasUDPSendCount() bool {
	if o != nil && !IsNil(o.UDPSendCount) {
		return true
	}

	return false
}

// SetUDPSendCount gets a reference to the given int32 and assigns it to the UDPSendCount field.
func (o *NetworkConfiguration) SetUDPSendCount(v int32) {
	o.UDPSendCount = &v
}

// GetUDPSendDelay returns the UDPSendDelay field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetUDPSendDelay() int32 {
	if o == nil || IsNil(o.UDPSendDelay) {
		var ret int32
		return ret
	}
	return *o.UDPSendDelay
}

// GetUDPSendDelayOk returns a tuple with the UDPSendDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetUDPSendDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.UDPSendDelay) {
		return nil, false
	}
	return o.UDPSendDelay, true
}

// HasUDPSendDelay returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasUDPSendDelay() bool {
	if o != nil && !IsNil(o.UDPSendDelay) {
		return true
	}

	return false
}

// SetUDPSendDelay gets a reference to the given int32 and assigns it to the UDPSendDelay field.
func (o *NetworkConfiguration) SetUDPSendDelay(v int32) {
	o.UDPSendDelay = &v
}

// GetIgnoreVirtualInterfaces returns the IgnoreVirtualInterfaces field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetIgnoreVirtualInterfaces() bool {
	if o == nil || IsNil(o.IgnoreVirtualInterfaces) {
		var ret bool
		return ret
	}
	return *o.IgnoreVirtualInterfaces
}

// GetIgnoreVirtualInterfacesOk returns a tuple with the IgnoreVirtualInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetIgnoreVirtualInterfacesOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreVirtualInterfaces) {
		return nil, false
	}
	return o.IgnoreVirtualInterfaces, true
}

// HasIgnoreVirtualInterfaces returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasIgnoreVirtualInterfaces() bool {
	if o != nil && !IsNil(o.IgnoreVirtualInterfaces) {
		return true
	}

	return false
}

// SetIgnoreVirtualInterfaces gets a reference to the given bool and assigns it to the IgnoreVirtualInterfaces field.
func (o *NetworkConfiguration) SetIgnoreVirtualInterfaces(v bool) {
	o.IgnoreVirtualInterfaces = &v
}

// GetVirtualInterfaceNames returns the VirtualInterfaceNames field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetVirtualInterfaceNames() string {
	if o == nil || IsNil(o.VirtualInterfaceNames) {
		var ret string
		return ret
	}
	return *o.VirtualInterfaceNames
}

// GetVirtualInterfaceNamesOk returns a tuple with the VirtualInterfaceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetVirtualInterfaceNamesOk() (*string, bool) {
	if o == nil || IsNil(o.VirtualInterfaceNames) {
		return nil, false
	}
	return o.VirtualInterfaceNames, true
}

// HasVirtualInterfaceNames returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasVirtualInterfaceNames() bool {
	if o != nil && !IsNil(o.VirtualInterfaceNames) {
		return true
	}

	return false
}

// SetVirtualInterfaceNames gets a reference to the given string and assigns it to the VirtualInterfaceNames field.
func (o *NetworkConfiguration) SetVirtualInterfaceNames(v string) {
	o.VirtualInterfaceNames = &v
}

// GetGatewayMonitorPeriod returns the GatewayMonitorPeriod field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetGatewayMonitorPeriod() int32 {
	if o == nil || IsNil(o.GatewayMonitorPeriod) {
		var ret int32
		return ret
	}
	return *o.GatewayMonitorPeriod
}

// GetGatewayMonitorPeriodOk returns a tuple with the GatewayMonitorPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetGatewayMonitorPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.GatewayMonitorPeriod) {
		return nil, false
	}
	return o.GatewayMonitorPeriod, true
}

// HasGatewayMonitorPeriod returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasGatewayMonitorPeriod() bool {
	if o != nil && !IsNil(o.GatewayMonitorPeriod) {
		return true
	}

	return false
}

// SetGatewayMonitorPeriod gets a reference to the given int32 and assigns it to the GatewayMonitorPeriod field.
func (o *NetworkConfiguration) SetGatewayMonitorPeriod(v int32) {
	o.GatewayMonitorPeriod = &v
}

// GetEnableMultiSocketBinding returns the EnableMultiSocketBinding field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetEnableMultiSocketBinding() bool {
	if o == nil || IsNil(o.EnableMultiSocketBinding) {
		var ret bool
		return ret
	}
	return *o.EnableMultiSocketBinding
}

// GetEnableMultiSocketBindingOk returns a tuple with the EnableMultiSocketBinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetEnableMultiSocketBindingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMultiSocketBinding) {
		return nil, false
	}
	return o.EnableMultiSocketBinding, true
}

// HasEnableMultiSocketBinding returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasEnableMultiSocketBinding() bool {
	if o != nil && !IsNil(o.EnableMultiSocketBinding) {
		return true
	}

	return false
}

// SetEnableMultiSocketBinding gets a reference to the given bool and assigns it to the EnableMultiSocketBinding field.
func (o *NetworkConfiguration) SetEnableMultiSocketBinding(v bool) {
	o.EnableMultiSocketBinding = &v
}

// GetTrustAllIP6Interfaces returns the TrustAllIP6Interfaces field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetTrustAllIP6Interfaces() bool {
	if o == nil || IsNil(o.TrustAllIP6Interfaces) {
		var ret bool
		return ret
	}
	return *o.TrustAllIP6Interfaces
}

// GetTrustAllIP6InterfacesOk returns a tuple with the TrustAllIP6Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetTrustAllIP6InterfacesOk() (*bool, bool) {
	if o == nil || IsNil(o.TrustAllIP6Interfaces) {
		return nil, false
	}
	return o.TrustAllIP6Interfaces, true
}

// HasTrustAllIP6Interfaces returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasTrustAllIP6Interfaces() bool {
	if o != nil && !IsNil(o.TrustAllIP6Interfaces) {
		return true
	}

	return false
}

// SetTrustAllIP6Interfaces gets a reference to the given bool and assigns it to the TrustAllIP6Interfaces field.
func (o *NetworkConfiguration) SetTrustAllIP6Interfaces(v bool) {
	o.TrustAllIP6Interfaces = &v
}

// GetHDHomerunPortRange returns the HDHomerunPortRange field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetHDHomerunPortRange() string {
	if o == nil || IsNil(o.HDHomerunPortRange) {
		var ret string
		return ret
	}
	return *o.HDHomerunPortRange
}

// GetHDHomerunPortRangeOk returns a tuple with the HDHomerunPortRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetHDHomerunPortRangeOk() (*string, bool) {
	if o == nil || IsNil(o.HDHomerunPortRange) {
		return nil, false
	}
	return o.HDHomerunPortRange, true
}

// HasHDHomerunPortRange returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasHDHomerunPortRange() bool {
	if o != nil && !IsNil(o.HDHomerunPortRange) {
		return true
	}

	return false
}

// SetHDHomerunPortRange gets a reference to the given string and assigns it to the HDHomerunPortRange field.
func (o *NetworkConfiguration) SetHDHomerunPortRange(v string) {
	o.HDHomerunPortRange = &v
}

// GetPublishedServerUriBySubnet returns the PublishedServerUriBySubnet field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetPublishedServerUriBySubnet() []string {
	if o == nil || IsNil(o.PublishedServerUriBySubnet) {
		var ret []string
		return ret
	}
	return o.PublishedServerUriBySubnet
}

// GetPublishedServerUriBySubnetOk returns a tuple with the PublishedServerUriBySubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetPublishedServerUriBySubnetOk() ([]string, bool) {
	if o == nil || IsNil(o.PublishedServerUriBySubnet) {
		return nil, false
	}
	return o.PublishedServerUriBySubnet, true
}

// HasPublishedServerUriBySubnet returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasPublishedServerUriBySubnet() bool {
	if o != nil && !IsNil(o.PublishedServerUriBySubnet) {
		return true
	}

	return false
}

// SetPublishedServerUriBySubnet gets a reference to the given []string and assigns it to the PublishedServerUriBySubnet field.
func (o *NetworkConfiguration) SetPublishedServerUriBySubnet(v []string) {
	o.PublishedServerUriBySubnet = v
}

// GetAutoDiscoveryTracing returns the AutoDiscoveryTracing field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetAutoDiscoveryTracing() bool {
	if o == nil || IsNil(o.AutoDiscoveryTracing) {
		var ret bool
		return ret
	}
	return *o.AutoDiscoveryTracing
}

// GetAutoDiscoveryTracingOk returns a tuple with the AutoDiscoveryTracing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetAutoDiscoveryTracingOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoDiscoveryTracing) {
		return nil, false
	}
	return o.AutoDiscoveryTracing, true
}

// HasAutoDiscoveryTracing returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasAutoDiscoveryTracing() bool {
	if o != nil && !IsNil(o.AutoDiscoveryTracing) {
		return true
	}

	return false
}

// SetAutoDiscoveryTracing gets a reference to the given bool and assigns it to the AutoDiscoveryTracing field.
func (o *NetworkConfiguration) SetAutoDiscoveryTracing(v bool) {
	o.AutoDiscoveryTracing = &v
}

// GetAutoDiscovery returns the AutoDiscovery field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetAutoDiscovery() bool {
	if o == nil || IsNil(o.AutoDiscovery) {
		var ret bool
		return ret
	}
	return *o.AutoDiscovery
}

// GetAutoDiscoveryOk returns a tuple with the AutoDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetAutoDiscoveryOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoDiscovery) {
		return nil, false
	}
	return o.AutoDiscovery, true
}

// HasAutoDiscovery returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasAutoDiscovery() bool {
	if o != nil && !IsNil(o.AutoDiscovery) {
		return true
	}

	return false
}

// SetAutoDiscovery gets a reference to the given bool and assigns it to the AutoDiscovery field.
func (o *NetworkConfiguration) SetAutoDiscovery(v bool) {
	o.AutoDiscovery = &v
}

// GetRemoteIPFilter returns the RemoteIPFilter field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetRemoteIPFilter() []string {
	if o == nil || IsNil(o.RemoteIPFilter) {
		var ret []string
		return ret
	}
	return o.RemoteIPFilter
}

// GetRemoteIPFilterOk returns a tuple with the RemoteIPFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetRemoteIPFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.RemoteIPFilter) {
		return nil, false
	}
	return o.RemoteIPFilter, true
}

// HasRemoteIPFilter returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasRemoteIPFilter() bool {
	if o != nil && !IsNil(o.RemoteIPFilter) {
		return true
	}

	return false
}

// SetRemoteIPFilter gets a reference to the given []string and assigns it to the RemoteIPFilter field.
func (o *NetworkConfiguration) SetRemoteIPFilter(v []string) {
	o.RemoteIPFilter = v
}

// GetIsRemoteIPFilterBlacklist returns the IsRemoteIPFilterBlacklist field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetIsRemoteIPFilterBlacklist() bool {
	if o == nil || IsNil(o.IsRemoteIPFilterBlacklist) {
		var ret bool
		return ret
	}
	return *o.IsRemoteIPFilterBlacklist
}

// GetIsRemoteIPFilterBlacklistOk returns a tuple with the IsRemoteIPFilterBlacklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetIsRemoteIPFilterBlacklistOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRemoteIPFilterBlacklist) {
		return nil, false
	}
	return o.IsRemoteIPFilterBlacklist, true
}

// HasIsRemoteIPFilterBlacklist returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasIsRemoteIPFilterBlacklist() bool {
	if o != nil && !IsNil(o.IsRemoteIPFilterBlacklist) {
		return true
	}

	return false
}

// SetIsRemoteIPFilterBlacklist gets a reference to the given bool and assigns it to the IsRemoteIPFilterBlacklist field.
func (o *NetworkConfiguration) SetIsRemoteIPFilterBlacklist(v bool) {
	o.IsRemoteIPFilterBlacklist = &v
}

// GetEnableUPnP returns the EnableUPnP field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetEnableUPnP() bool {
	if o == nil || IsNil(o.EnableUPnP) {
		var ret bool
		return ret
	}
	return *o.EnableUPnP
}

// GetEnableUPnPOk returns a tuple with the EnableUPnP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetEnableUPnPOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUPnP) {
		return nil, false
	}
	return o.EnableUPnP, true
}

// HasEnableUPnP returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasEnableUPnP() bool {
	if o != nil && !IsNil(o.EnableUPnP) {
		return true
	}

	return false
}

// SetEnableUPnP gets a reference to the given bool and assigns it to the EnableUPnP field.
func (o *NetworkConfiguration) SetEnableUPnP(v bool) {
	o.EnableUPnP = &v
}

// GetEnableRemoteAccess returns the EnableRemoteAccess field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetEnableRemoteAccess() bool {
	if o == nil || IsNil(o.EnableRemoteAccess) {
		var ret bool
		return ret
	}
	return *o.EnableRemoteAccess
}

// GetEnableRemoteAccessOk returns a tuple with the EnableRemoteAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetEnableRemoteAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRemoteAccess) {
		return nil, false
	}
	return o.EnableRemoteAccess, true
}

// HasEnableRemoteAccess returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasEnableRemoteAccess() bool {
	if o != nil && !IsNil(o.EnableRemoteAccess) {
		return true
	}

	return false
}

// SetEnableRemoteAccess gets a reference to the given bool and assigns it to the EnableRemoteAccess field.
func (o *NetworkConfiguration) SetEnableRemoteAccess(v bool) {
	o.EnableRemoteAccess = &v
}

// GetLocalNetworkSubnets returns the LocalNetworkSubnets field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetLocalNetworkSubnets() []string {
	if o == nil || IsNil(o.LocalNetworkSubnets) {
		var ret []string
		return ret
	}
	return o.LocalNetworkSubnets
}

// GetLocalNetworkSubnetsOk returns a tuple with the LocalNetworkSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetLocalNetworkSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.LocalNetworkSubnets) {
		return nil, false
	}
	return o.LocalNetworkSubnets, true
}

// HasLocalNetworkSubnets returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasLocalNetworkSubnets() bool {
	if o != nil && !IsNil(o.LocalNetworkSubnets) {
		return true
	}

	return false
}

// SetLocalNetworkSubnets gets a reference to the given []string and assigns it to the LocalNetworkSubnets field.
func (o *NetworkConfiguration) SetLocalNetworkSubnets(v []string) {
	o.LocalNetworkSubnets = v
}

// GetLocalNetworkAddresses returns the LocalNetworkAddresses field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetLocalNetworkAddresses() []string {
	if o == nil || IsNil(o.LocalNetworkAddresses) {
		var ret []string
		return ret
	}
	return o.LocalNetworkAddresses
}

// GetLocalNetworkAddressesOk returns a tuple with the LocalNetworkAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetLocalNetworkAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.LocalNetworkAddresses) {
		return nil, false
	}
	return o.LocalNetworkAddresses, true
}

// HasLocalNetworkAddresses returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasLocalNetworkAddresses() bool {
	if o != nil && !IsNil(o.LocalNetworkAddresses) {
		return true
	}

	return false
}

// SetLocalNetworkAddresses gets a reference to the given []string and assigns it to the LocalNetworkAddresses field.
func (o *NetworkConfiguration) SetLocalNetworkAddresses(v []string) {
	o.LocalNetworkAddresses = v
}

// GetKnownProxies returns the KnownProxies field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetKnownProxies() []string {
	if o == nil || IsNil(o.KnownProxies) {
		var ret []string
		return ret
	}
	return o.KnownProxies
}

// GetKnownProxiesOk returns a tuple with the KnownProxies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetKnownProxiesOk() ([]string, bool) {
	if o == nil || IsNil(o.KnownProxies) {
		return nil, false
	}
	return o.KnownProxies, true
}

// HasKnownProxies returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasKnownProxies() bool {
	if o != nil && !IsNil(o.KnownProxies) {
		return true
	}

	return false
}

// SetKnownProxies gets a reference to the given []string and assigns it to the KnownProxies field.
func (o *NetworkConfiguration) SetKnownProxies(v []string) {
	o.KnownProxies = v
}

// GetEnablePublishedServerUriByRequest returns the EnablePublishedServerUriByRequest field value if set, zero value otherwise.
func (o *NetworkConfiguration) GetEnablePublishedServerUriByRequest() bool {
	if o == nil || IsNil(o.EnablePublishedServerUriByRequest) {
		var ret bool
		return ret
	}
	return *o.EnablePublishedServerUriByRequest
}

// GetEnablePublishedServerUriByRequestOk returns a tuple with the EnablePublishedServerUriByRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkConfiguration) GetEnablePublishedServerUriByRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePublishedServerUriByRequest) {
		return nil, false
	}
	return o.EnablePublishedServerUriByRequest, true
}

// HasEnablePublishedServerUriByRequest returns a boolean if a field has been set.
func (o *NetworkConfiguration) HasEnablePublishedServerUriByRequest() bool {
	if o != nil && !IsNil(o.EnablePublishedServerUriByRequest) {
		return true
	}

	return false
}

// SetEnablePublishedServerUriByRequest gets a reference to the given bool and assigns it to the EnablePublishedServerUriByRequest field.
func (o *NetworkConfiguration) SetEnablePublishedServerUriByRequest(v bool) {
	o.EnablePublishedServerUriByRequest = &v
}

func (o NetworkConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequireHttps) {
		toSerialize["RequireHttps"] = o.RequireHttps
	}
	if !IsNil(o.CertificatePath) {
		toSerialize["CertificatePath"] = o.CertificatePath
	}
	if !IsNil(o.CertificatePassword) {
		toSerialize["CertificatePassword"] = o.CertificatePassword
	}
	if !IsNil(o.BaseUrl) {
		toSerialize["BaseUrl"] = o.BaseUrl
	}
	if !IsNil(o.PublicHttpsPort) {
		toSerialize["PublicHttpsPort"] = o.PublicHttpsPort
	}
	if !IsNil(o.HttpServerPortNumber) {
		toSerialize["HttpServerPortNumber"] = o.HttpServerPortNumber
	}
	if !IsNil(o.HttpsPortNumber) {
		toSerialize["HttpsPortNumber"] = o.HttpsPortNumber
	}
	if !IsNil(o.EnableHttps) {
		toSerialize["EnableHttps"] = o.EnableHttps
	}
	if !IsNil(o.PublicPort) {
		toSerialize["PublicPort"] = o.PublicPort
	}
	if !IsNil(o.UPnPCreateHttpPortMap) {
		toSerialize["UPnPCreateHttpPortMap"] = o.UPnPCreateHttpPortMap
	}
	if !IsNil(o.UDPPortRange) {
		toSerialize["UDPPortRange"] = o.UDPPortRange
	}
	if !IsNil(o.EnableIPV6) {
		toSerialize["EnableIPV6"] = o.EnableIPV6
	}
	if !IsNil(o.EnableIPV4) {
		toSerialize["EnableIPV4"] = o.EnableIPV4
	}
	if !IsNil(o.EnableSSDPTracing) {
		toSerialize["EnableSSDPTracing"] = o.EnableSSDPTracing
	}
	if !IsNil(o.SSDPTracingFilter) {
		toSerialize["SSDPTracingFilter"] = o.SSDPTracingFilter
	}
	if !IsNil(o.UDPSendCount) {
		toSerialize["UDPSendCount"] = o.UDPSendCount
	}
	if !IsNil(o.UDPSendDelay) {
		toSerialize["UDPSendDelay"] = o.UDPSendDelay
	}
	if !IsNil(o.IgnoreVirtualInterfaces) {
		toSerialize["IgnoreVirtualInterfaces"] = o.IgnoreVirtualInterfaces
	}
	if !IsNil(o.VirtualInterfaceNames) {
		toSerialize["VirtualInterfaceNames"] = o.VirtualInterfaceNames
	}
	if !IsNil(o.GatewayMonitorPeriod) {
		toSerialize["GatewayMonitorPeriod"] = o.GatewayMonitorPeriod
	}
	if !IsNil(o.EnableMultiSocketBinding) {
		toSerialize["EnableMultiSocketBinding"] = o.EnableMultiSocketBinding
	}
	if !IsNil(o.TrustAllIP6Interfaces) {
		toSerialize["TrustAllIP6Interfaces"] = o.TrustAllIP6Interfaces
	}
	if !IsNil(o.HDHomerunPortRange) {
		toSerialize["HDHomerunPortRange"] = o.HDHomerunPortRange
	}
	if !IsNil(o.PublishedServerUriBySubnet) {
		toSerialize["PublishedServerUriBySubnet"] = o.PublishedServerUriBySubnet
	}
	if !IsNil(o.AutoDiscoveryTracing) {
		toSerialize["AutoDiscoveryTracing"] = o.AutoDiscoveryTracing
	}
	if !IsNil(o.AutoDiscovery) {
		toSerialize["AutoDiscovery"] = o.AutoDiscovery
	}
	if !IsNil(o.RemoteIPFilter) {
		toSerialize["RemoteIPFilter"] = o.RemoteIPFilter
	}
	if !IsNil(o.IsRemoteIPFilterBlacklist) {
		toSerialize["IsRemoteIPFilterBlacklist"] = o.IsRemoteIPFilterBlacklist
	}
	if !IsNil(o.EnableUPnP) {
		toSerialize["EnableUPnP"] = o.EnableUPnP
	}
	if !IsNil(o.EnableRemoteAccess) {
		toSerialize["EnableRemoteAccess"] = o.EnableRemoteAccess
	}
	if !IsNil(o.LocalNetworkSubnets) {
		toSerialize["LocalNetworkSubnets"] = o.LocalNetworkSubnets
	}
	if !IsNil(o.LocalNetworkAddresses) {
		toSerialize["LocalNetworkAddresses"] = o.LocalNetworkAddresses
	}
	if !IsNil(o.KnownProxies) {
		toSerialize["KnownProxies"] = o.KnownProxies
	}
	if !IsNil(o.EnablePublishedServerUriByRequest) {
		toSerialize["EnablePublishedServerUriByRequest"] = o.EnablePublishedServerUriByRequest
	}
	return toSerialize, nil
}

type NullableNetworkConfiguration struct {
	value *NetworkConfiguration
	isSet bool
}

func (v NullableNetworkConfiguration) Get() *NetworkConfiguration {
	return v.value
}

func (v *NullableNetworkConfiguration) Set(val *NetworkConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkConfiguration(val *NetworkConfiguration) *NullableNetworkConfiguration {
	return &NullableNetworkConfiguration{value: val, isSet: true}
}

func (v NullableNetworkConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


