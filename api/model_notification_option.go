/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NotificationOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationOption{}

// NotificationOption struct for NotificationOption
type NotificationOption struct {
	Type NullableString `json:"Type,omitempty"`
	// Gets or sets user Ids to not monitor (it's opt out).
	DisabledMonitorUsers []string `json:"DisabledMonitorUsers,omitempty"`
	// Gets or sets user Ids to send to (if SendToUserMode == Custom).
	SendToUsers []string `json:"SendToUsers,omitempty"`
	// Gets or sets a value indicating whether this MediaBrowser.Model.Notifications.NotificationOption is enabled.
	Enabled *bool `json:"Enabled,omitempty"`
	// Gets or sets the disabled services.
	DisabledServices []string `json:"DisabledServices,omitempty"`
	// Gets or sets the send to user mode.
	SendToUserMode *SendToUserType `json:"SendToUserMode,omitempty"`
}

// NewNotificationOption instantiates a new NotificationOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationOption() *NotificationOption {
	this := NotificationOption{}
	return &this
}

// NewNotificationOptionWithDefaults instantiates a new NotificationOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationOptionWithDefaults() *NotificationOption {
	this := NotificationOption{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationOption) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationOption) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *NotificationOption) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *NotificationOption) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *NotificationOption) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *NotificationOption) UnsetType() {
	o.Type.Unset()
}

// GetDisabledMonitorUsers returns the DisabledMonitorUsers field value if set, zero value otherwise.
func (o *NotificationOption) GetDisabledMonitorUsers() []string {
	if o == nil || IsNil(o.DisabledMonitorUsers) {
		var ret []string
		return ret
	}
	return o.DisabledMonitorUsers
}

// GetDisabledMonitorUsersOk returns a tuple with the DisabledMonitorUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationOption) GetDisabledMonitorUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledMonitorUsers) {
		return nil, false
	}
	return o.DisabledMonitorUsers, true
}

// HasDisabledMonitorUsers returns a boolean if a field has been set.
func (o *NotificationOption) HasDisabledMonitorUsers() bool {
	if o != nil && !IsNil(o.DisabledMonitorUsers) {
		return true
	}

	return false
}

// SetDisabledMonitorUsers gets a reference to the given []string and assigns it to the DisabledMonitorUsers field.
func (o *NotificationOption) SetDisabledMonitorUsers(v []string) {
	o.DisabledMonitorUsers = v
}

// GetSendToUsers returns the SendToUsers field value if set, zero value otherwise.
func (o *NotificationOption) GetSendToUsers() []string {
	if o == nil || IsNil(o.SendToUsers) {
		var ret []string
		return ret
	}
	return o.SendToUsers
}

// GetSendToUsersOk returns a tuple with the SendToUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationOption) GetSendToUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.SendToUsers) {
		return nil, false
	}
	return o.SendToUsers, true
}

// HasSendToUsers returns a boolean if a field has been set.
func (o *NotificationOption) HasSendToUsers() bool {
	if o != nil && !IsNil(o.SendToUsers) {
		return true
	}

	return false
}

// SetSendToUsers gets a reference to the given []string and assigns it to the SendToUsers field.
func (o *NotificationOption) SetSendToUsers(v []string) {
	o.SendToUsers = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NotificationOption) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationOption) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NotificationOption) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NotificationOption) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDisabledServices returns the DisabledServices field value if set, zero value otherwise.
func (o *NotificationOption) GetDisabledServices() []string {
	if o == nil || IsNil(o.DisabledServices) {
		var ret []string
		return ret
	}
	return o.DisabledServices
}

// GetDisabledServicesOk returns a tuple with the DisabledServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationOption) GetDisabledServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledServices) {
		return nil, false
	}
	return o.DisabledServices, true
}

// HasDisabledServices returns a boolean if a field has been set.
func (o *NotificationOption) HasDisabledServices() bool {
	if o != nil && !IsNil(o.DisabledServices) {
		return true
	}

	return false
}

// SetDisabledServices gets a reference to the given []string and assigns it to the DisabledServices field.
func (o *NotificationOption) SetDisabledServices(v []string) {
	o.DisabledServices = v
}

// GetSendToUserMode returns the SendToUserMode field value if set, zero value otherwise.
func (o *NotificationOption) GetSendToUserMode() SendToUserType {
	if o == nil || IsNil(o.SendToUserMode) {
		var ret SendToUserType
		return ret
	}
	return *o.SendToUserMode
}

// GetSendToUserModeOk returns a tuple with the SendToUserMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationOption) GetSendToUserModeOk() (*SendToUserType, bool) {
	if o == nil || IsNil(o.SendToUserMode) {
		return nil, false
	}
	return o.SendToUserMode, true
}

// HasSendToUserMode returns a boolean if a field has been set.
func (o *NotificationOption) HasSendToUserMode() bool {
	if o != nil && !IsNil(o.SendToUserMode) {
		return true
	}

	return false
}

// SetSendToUserMode gets a reference to the given SendToUserType and assigns it to the SendToUserMode field.
func (o *NotificationOption) SetSendToUserMode(v SendToUserType) {
	o.SendToUserMode = &v
}

func (o NotificationOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["Type"] = o.Type.Get()
	}
	if !IsNil(o.DisabledMonitorUsers) {
		toSerialize["DisabledMonitorUsers"] = o.DisabledMonitorUsers
	}
	if !IsNil(o.SendToUsers) {
		toSerialize["SendToUsers"] = o.SendToUsers
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.DisabledServices) {
		toSerialize["DisabledServices"] = o.DisabledServices
	}
	if !IsNil(o.SendToUserMode) {
		toSerialize["SendToUserMode"] = o.SendToUserMode
	}
	return toSerialize, nil
}

type NullableNotificationOption struct {
	value *NotificationOption
	isSet bool
}

func (v NullableNotificationOption) Get() *NotificationOption {
	return v.value
}

func (v *NullableNotificationOption) Set(val *NotificationOption) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationOption) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationOption(val *NotificationOption) *NullableNotificationOption {
	return &NullableNotificationOption{value: val, isSet: true}
}

func (v NullableNotificationOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


