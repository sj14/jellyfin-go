/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MediaEncoderPathDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaEncoderPathDto{}

// MediaEncoderPathDto Media Encoder Path Dto.
type MediaEncoderPathDto struct {
	// Gets or sets media encoder path.
	Path *string `json:"Path,omitempty"`
	// Gets or sets media encoder path type.
	PathType *string `json:"PathType,omitempty"`
}

// NewMediaEncoderPathDto instantiates a new MediaEncoderPathDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaEncoderPathDto() *MediaEncoderPathDto {
	this := MediaEncoderPathDto{}
	return &this
}

// NewMediaEncoderPathDtoWithDefaults instantiates a new MediaEncoderPathDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaEncoderPathDtoWithDefaults() *MediaEncoderPathDto {
	this := MediaEncoderPathDto{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *MediaEncoderPathDto) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncoderPathDto) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *MediaEncoderPathDto) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *MediaEncoderPathDto) SetPath(v string) {
	o.Path = &v
}

// GetPathType returns the PathType field value if set, zero value otherwise.
func (o *MediaEncoderPathDto) GetPathType() string {
	if o == nil || IsNil(o.PathType) {
		var ret string
		return ret
	}
	return *o.PathType
}

// GetPathTypeOk returns a tuple with the PathType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaEncoderPathDto) GetPathTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PathType) {
		return nil, false
	}
	return o.PathType, true
}

// HasPathType returns a boolean if a field has been set.
func (o *MediaEncoderPathDto) HasPathType() bool {
	if o != nil && !IsNil(o.PathType) {
		return true
	}

	return false
}

// SetPathType gets a reference to the given string and assigns it to the PathType field.
func (o *MediaEncoderPathDto) SetPathType(v string) {
	o.PathType = &v
}

func (o MediaEncoderPathDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaEncoderPathDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["Path"] = o.Path
	}
	if !IsNil(o.PathType) {
		toSerialize["PathType"] = o.PathType
	}
	return toSerialize, nil
}

type NullableMediaEncoderPathDto struct {
	value *MediaEncoderPathDto
	isSet bool
}

func (v NullableMediaEncoderPathDto) Get() *MediaEncoderPathDto {
	return v.value
}

func (v *NullableMediaEncoderPathDto) Set(val *MediaEncoderPathDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaEncoderPathDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaEncoderPathDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaEncoderPathDto(val *MediaEncoderPathDto) *NullableMediaEncoderPathDto {
	return &NullableMediaEncoderPathDto{value: val, isSet: true}
}

func (v NullableMediaEncoderPathDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaEncoderPathDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


