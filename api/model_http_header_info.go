/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the HttpHeaderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpHeaderInfo{}

// HttpHeaderInfo struct for HttpHeaderInfo
type HttpHeaderInfo struct {
	Name NullableString `json:"Name,omitempty"`
	Value NullableString `json:"Value,omitempty"`
	Match *HeaderMatchType `json:"Match,omitempty"`
}

// NewHttpHeaderInfo instantiates a new HttpHeaderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpHeaderInfo() *HttpHeaderInfo {
	this := HttpHeaderInfo{}
	return &this
}

// NewHttpHeaderInfoWithDefaults instantiates a new HttpHeaderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpHeaderInfoWithDefaults() *HttpHeaderInfo {
	this := HttpHeaderInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpHeaderInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpHeaderInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *HttpHeaderInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *HttpHeaderInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *HttpHeaderInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *HttpHeaderInfo) UnsetName() {
	o.Name.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpHeaderInfo) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpHeaderInfo) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *HttpHeaderInfo) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *HttpHeaderInfo) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *HttpHeaderInfo) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *HttpHeaderInfo) UnsetValue() {
	o.Value.Unset()
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *HttpHeaderInfo) GetMatch() HeaderMatchType {
	if o == nil || IsNil(o.Match) {
		var ret HeaderMatchType
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHeaderInfo) GetMatchOk() (*HeaderMatchType, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *HttpHeaderInfo) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given HeaderMatchType and assigns it to the Match field.
func (o *HttpHeaderInfo) SetMatch(v HeaderMatchType) {
	o.Match = &v
}

func (o HttpHeaderInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpHeaderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.Value.IsSet() {
		toSerialize["Value"] = o.Value.Get()
	}
	if !IsNil(o.Match) {
		toSerialize["Match"] = o.Match
	}
	return toSerialize, nil
}

type NullableHttpHeaderInfo struct {
	value *HttpHeaderInfo
	isSet bool
}

func (v NullableHttpHeaderInfo) Get() *HttpHeaderInfo {
	return v.value
}

func (v *NullableHttpHeaderInfo) Set(val *HttpHeaderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpHeaderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpHeaderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpHeaderInfo(val *HttpHeaderInfo) *NullableHttpHeaderInfo {
	return &NullableHttpHeaderInfo{value: val, isSet: true}
}

func (v NullableHttpHeaderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpHeaderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


