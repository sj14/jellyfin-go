/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the SessionInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionInfoDto{}

// SessionInfoDto Session info DTO.
type SessionInfoDto struct {
	// Gets or sets the play state.
	PlayState NullablePlayerStateInfo `json:"PlayState,omitempty"`
	// Gets or sets the additional users.
	AdditionalUsers []SessionUserInfo `json:"AdditionalUsers,omitempty"`
	// Gets or sets the client capabilities.
	Capabilities NullableClientCapabilitiesDto `json:"Capabilities,omitempty"`
	// Gets or sets the remote end point.
	RemoteEndPoint NullableString `json:"RemoteEndPoint,omitempty"`
	// Gets or sets the playable media types.
	PlayableMediaTypes []MediaType `json:"PlayableMediaTypes,omitempty"`
	// Gets or sets the id.
	Id NullableString `json:"Id,omitempty"`
	// Gets or sets the user id.
	UserId *string `json:"UserId,omitempty"`
	// Gets or sets the username.
	UserName NullableString `json:"UserName,omitempty"`
	// Gets or sets the type of the client.
	Client NullableString `json:"Client,omitempty"`
	// Gets or sets the last activity date.
	LastActivityDate *time.Time `json:"LastActivityDate,omitempty"`
	// Gets or sets the last playback check in.
	LastPlaybackCheckIn *time.Time `json:"LastPlaybackCheckIn,omitempty"`
	// Gets or sets the last paused date.
	LastPausedDate NullableTime `json:"LastPausedDate,omitempty"`
	// Gets or sets the name of the device.
	DeviceName NullableString `json:"DeviceName,omitempty"`
	// Gets or sets the type of the device.
	DeviceType NullableString `json:"DeviceType,omitempty"`
	// Gets or sets the now playing item.
	NowPlayingItem NullableBaseItemDto `json:"NowPlayingItem,omitempty"`
	// Gets or sets the now viewing item.
	NowViewingItem NullableBaseItemDto `json:"NowViewingItem,omitempty"`
	// Gets or sets the device id.
	DeviceId NullableString `json:"DeviceId,omitempty"`
	// Gets or sets the application version.
	ApplicationVersion NullableString `json:"ApplicationVersion,omitempty"`
	// Gets or sets the transcoding info.
	TranscodingInfo NullableTranscodingInfo `json:"TranscodingInfo,omitempty"`
	// Gets or sets a value indicating whether this session is active.
	IsActive *bool `json:"IsActive,omitempty"`
	// Gets or sets a value indicating whether the session supports media control.
	SupportsMediaControl *bool `json:"SupportsMediaControl,omitempty"`
	// Gets or sets a value indicating whether the session supports remote control.
	SupportsRemoteControl *bool `json:"SupportsRemoteControl,omitempty"`
	// Gets or sets the now playing queue.
	NowPlayingQueue []QueueItem `json:"NowPlayingQueue,omitempty"`
	// Gets or sets the now playing queue full items.
	NowPlayingQueueFullItems []BaseItemDto `json:"NowPlayingQueueFullItems,omitempty"`
	// Gets or sets a value indicating whether the session has a custom device name.
	HasCustomDeviceName *bool `json:"HasCustomDeviceName,omitempty"`
	// Gets or sets the playlist item id.
	PlaylistItemId NullableString `json:"PlaylistItemId,omitempty"`
	// Gets or sets the server id.
	ServerId NullableString `json:"ServerId,omitempty"`
	// Gets or sets the user primary image tag.
	UserPrimaryImageTag NullableString `json:"UserPrimaryImageTag,omitempty"`
	// Gets or sets the supported commands.
	SupportedCommands []GeneralCommandType `json:"SupportedCommands,omitempty"`
}

// NewSessionInfoDto instantiates a new SessionInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionInfoDto() *SessionInfoDto {
	this := SessionInfoDto{}
	return &this
}

// NewSessionInfoDtoWithDefaults instantiates a new SessionInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionInfoDtoWithDefaults() *SessionInfoDto {
	this := SessionInfoDto{}
	return &this
}

// GetPlayState returns the PlayState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetPlayState() PlayerStateInfo {
	if o == nil || IsNil(o.PlayState.Get()) {
		var ret PlayerStateInfo
		return ret
	}
	return *o.PlayState.Get()
}

// GetPlayStateOk returns a tuple with the PlayState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetPlayStateOk() (*PlayerStateInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayState.Get(), o.PlayState.IsSet()
}

// HasPlayState returns a boolean if a field has been set.
func (o *SessionInfoDto) HasPlayState() bool {
	if o != nil && o.PlayState.IsSet() {
		return true
	}

	return false
}

// SetPlayState gets a reference to the given NullablePlayerStateInfo and assigns it to the PlayState field.
func (o *SessionInfoDto) SetPlayState(v PlayerStateInfo) {
	o.PlayState.Set(&v)
}
// SetPlayStateNil sets the value for PlayState to be an explicit nil
func (o *SessionInfoDto) SetPlayStateNil() {
	o.PlayState.Set(nil)
}

// UnsetPlayState ensures that no value is present for PlayState, not even an explicit nil
func (o *SessionInfoDto) UnsetPlayState() {
	o.PlayState.Unset()
}

// GetAdditionalUsers returns the AdditionalUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetAdditionalUsers() []SessionUserInfo {
	if o == nil {
		var ret []SessionUserInfo
		return ret
	}
	return o.AdditionalUsers
}

// GetAdditionalUsersOk returns a tuple with the AdditionalUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetAdditionalUsersOk() ([]SessionUserInfo, bool) {
	if o == nil || IsNil(o.AdditionalUsers) {
		return nil, false
	}
	return o.AdditionalUsers, true
}

// HasAdditionalUsers returns a boolean if a field has been set.
func (o *SessionInfoDto) HasAdditionalUsers() bool {
	if o != nil && !IsNil(o.AdditionalUsers) {
		return true
	}

	return false
}

// SetAdditionalUsers gets a reference to the given []SessionUserInfo and assigns it to the AdditionalUsers field.
func (o *SessionInfoDto) SetAdditionalUsers(v []SessionUserInfo) {
	o.AdditionalUsers = v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetCapabilities() ClientCapabilitiesDto {
	if o == nil || IsNil(o.Capabilities.Get()) {
		var ret ClientCapabilitiesDto
		return ret
	}
	return *o.Capabilities.Get()
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetCapabilitiesOk() (*ClientCapabilitiesDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Capabilities.Get(), o.Capabilities.IsSet()
}

// HasCapabilities returns a boolean if a field has been set.
func (o *SessionInfoDto) HasCapabilities() bool {
	if o != nil && o.Capabilities.IsSet() {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given NullableClientCapabilitiesDto and assigns it to the Capabilities field.
func (o *SessionInfoDto) SetCapabilities(v ClientCapabilitiesDto) {
	o.Capabilities.Set(&v)
}
// SetCapabilitiesNil sets the value for Capabilities to be an explicit nil
func (o *SessionInfoDto) SetCapabilitiesNil() {
	o.Capabilities.Set(nil)
}

// UnsetCapabilities ensures that no value is present for Capabilities, not even an explicit nil
func (o *SessionInfoDto) UnsetCapabilities() {
	o.Capabilities.Unset()
}

// GetRemoteEndPoint returns the RemoteEndPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetRemoteEndPoint() string {
	if o == nil || IsNil(o.RemoteEndPoint.Get()) {
		var ret string
		return ret
	}
	return *o.RemoteEndPoint.Get()
}

// GetRemoteEndPointOk returns a tuple with the RemoteEndPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetRemoteEndPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoteEndPoint.Get(), o.RemoteEndPoint.IsSet()
}

// HasRemoteEndPoint returns a boolean if a field has been set.
func (o *SessionInfoDto) HasRemoteEndPoint() bool {
	if o != nil && o.RemoteEndPoint.IsSet() {
		return true
	}

	return false
}

// SetRemoteEndPoint gets a reference to the given NullableString and assigns it to the RemoteEndPoint field.
func (o *SessionInfoDto) SetRemoteEndPoint(v string) {
	o.RemoteEndPoint.Set(&v)
}
// SetRemoteEndPointNil sets the value for RemoteEndPoint to be an explicit nil
func (o *SessionInfoDto) SetRemoteEndPointNil() {
	o.RemoteEndPoint.Set(nil)
}

// UnsetRemoteEndPoint ensures that no value is present for RemoteEndPoint, not even an explicit nil
func (o *SessionInfoDto) UnsetRemoteEndPoint() {
	o.RemoteEndPoint.Unset()
}

// GetPlayableMediaTypes returns the PlayableMediaTypes field value if set, zero value otherwise.
func (o *SessionInfoDto) GetPlayableMediaTypes() []MediaType {
	if o == nil || IsNil(o.PlayableMediaTypes) {
		var ret []MediaType
		return ret
	}
	return o.PlayableMediaTypes
}

// GetPlayableMediaTypesOk returns a tuple with the PlayableMediaTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetPlayableMediaTypesOk() ([]MediaType, bool) {
	if o == nil || IsNil(o.PlayableMediaTypes) {
		return nil, false
	}
	return o.PlayableMediaTypes, true
}

// HasPlayableMediaTypes returns a boolean if a field has been set.
func (o *SessionInfoDto) HasPlayableMediaTypes() bool {
	if o != nil && !IsNil(o.PlayableMediaTypes) {
		return true
	}

	return false
}

// SetPlayableMediaTypes gets a reference to the given []MediaType and assigns it to the PlayableMediaTypes field.
func (o *SessionInfoDto) SetPlayableMediaTypes(v []MediaType) {
	o.PlayableMediaTypes = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SessionInfoDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SessionInfoDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SessionInfoDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SessionInfoDto) UnsetId() {
	o.Id.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SessionInfoDto) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SessionInfoDto) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SessionInfoDto) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *SessionInfoDto) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *SessionInfoDto) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *SessionInfoDto) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *SessionInfoDto) UnsetUserName() {
	o.UserName.Unset()
}

// GetClient returns the Client field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetClient() string {
	if o == nil || IsNil(o.Client.Get()) {
		var ret string
		return ret
	}
	return *o.Client.Get()
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Client.Get(), o.Client.IsSet()
}

// HasClient returns a boolean if a field has been set.
func (o *SessionInfoDto) HasClient() bool {
	if o != nil && o.Client.IsSet() {
		return true
	}

	return false
}

// SetClient gets a reference to the given NullableString and assigns it to the Client field.
func (o *SessionInfoDto) SetClient(v string) {
	o.Client.Set(&v)
}
// SetClientNil sets the value for Client to be an explicit nil
func (o *SessionInfoDto) SetClientNil() {
	o.Client.Set(nil)
}

// UnsetClient ensures that no value is present for Client, not even an explicit nil
func (o *SessionInfoDto) UnsetClient() {
	o.Client.Unset()
}

// GetLastActivityDate returns the LastActivityDate field value if set, zero value otherwise.
func (o *SessionInfoDto) GetLastActivityDate() time.Time {
	if o == nil || IsNil(o.LastActivityDate) {
		var ret time.Time
		return ret
	}
	return *o.LastActivityDate
}

// GetLastActivityDateOk returns a tuple with the LastActivityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetLastActivityDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastActivityDate) {
		return nil, false
	}
	return o.LastActivityDate, true
}

// HasLastActivityDate returns a boolean if a field has been set.
func (o *SessionInfoDto) HasLastActivityDate() bool {
	if o != nil && !IsNil(o.LastActivityDate) {
		return true
	}

	return false
}

// SetLastActivityDate gets a reference to the given time.Time and assigns it to the LastActivityDate field.
func (o *SessionInfoDto) SetLastActivityDate(v time.Time) {
	o.LastActivityDate = &v
}

// GetLastPlaybackCheckIn returns the LastPlaybackCheckIn field value if set, zero value otherwise.
func (o *SessionInfoDto) GetLastPlaybackCheckIn() time.Time {
	if o == nil || IsNil(o.LastPlaybackCheckIn) {
		var ret time.Time
		return ret
	}
	return *o.LastPlaybackCheckIn
}

// GetLastPlaybackCheckInOk returns a tuple with the LastPlaybackCheckIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetLastPlaybackCheckInOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPlaybackCheckIn) {
		return nil, false
	}
	return o.LastPlaybackCheckIn, true
}

// HasLastPlaybackCheckIn returns a boolean if a field has been set.
func (o *SessionInfoDto) HasLastPlaybackCheckIn() bool {
	if o != nil && !IsNil(o.LastPlaybackCheckIn) {
		return true
	}

	return false
}

// SetLastPlaybackCheckIn gets a reference to the given time.Time and assigns it to the LastPlaybackCheckIn field.
func (o *SessionInfoDto) SetLastPlaybackCheckIn(v time.Time) {
	o.LastPlaybackCheckIn = &v
}

// GetLastPausedDate returns the LastPausedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetLastPausedDate() time.Time {
	if o == nil || IsNil(o.LastPausedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastPausedDate.Get()
}

// GetLastPausedDateOk returns a tuple with the LastPausedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetLastPausedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastPausedDate.Get(), o.LastPausedDate.IsSet()
}

// HasLastPausedDate returns a boolean if a field has been set.
func (o *SessionInfoDto) HasLastPausedDate() bool {
	if o != nil && o.LastPausedDate.IsSet() {
		return true
	}

	return false
}

// SetLastPausedDate gets a reference to the given NullableTime and assigns it to the LastPausedDate field.
func (o *SessionInfoDto) SetLastPausedDate(v time.Time) {
	o.LastPausedDate.Set(&v)
}
// SetLastPausedDateNil sets the value for LastPausedDate to be an explicit nil
func (o *SessionInfoDto) SetLastPausedDateNil() {
	o.LastPausedDate.Set(nil)
}

// UnsetLastPausedDate ensures that no value is present for LastPausedDate, not even an explicit nil
func (o *SessionInfoDto) UnsetLastPausedDate() {
	o.LastPausedDate.Unset()
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceName.Get()
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetDeviceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceName.Get(), o.DeviceName.IsSet()
}

// HasDeviceName returns a boolean if a field has been set.
func (o *SessionInfoDto) HasDeviceName() bool {
	if o != nil && o.DeviceName.IsSet() {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given NullableString and assigns it to the DeviceName field.
func (o *SessionInfoDto) SetDeviceName(v string) {
	o.DeviceName.Set(&v)
}
// SetDeviceNameNil sets the value for DeviceName to be an explicit nil
func (o *SessionInfoDto) SetDeviceNameNil() {
	o.DeviceName.Set(nil)
}

// UnsetDeviceName ensures that no value is present for DeviceName, not even an explicit nil
func (o *SessionInfoDto) UnsetDeviceName() {
	o.DeviceName.Unset()
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceType.Get()
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetDeviceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceType.Get(), o.DeviceType.IsSet()
}

// HasDeviceType returns a boolean if a field has been set.
func (o *SessionInfoDto) HasDeviceType() bool {
	if o != nil && o.DeviceType.IsSet() {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given NullableString and assigns it to the DeviceType field.
func (o *SessionInfoDto) SetDeviceType(v string) {
	o.DeviceType.Set(&v)
}
// SetDeviceTypeNil sets the value for DeviceType to be an explicit nil
func (o *SessionInfoDto) SetDeviceTypeNil() {
	o.DeviceType.Set(nil)
}

// UnsetDeviceType ensures that no value is present for DeviceType, not even an explicit nil
func (o *SessionInfoDto) UnsetDeviceType() {
	o.DeviceType.Unset()
}

// GetNowPlayingItem returns the NowPlayingItem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetNowPlayingItem() BaseItemDto {
	if o == nil || IsNil(o.NowPlayingItem.Get()) {
		var ret BaseItemDto
		return ret
	}
	return *o.NowPlayingItem.Get()
}

// GetNowPlayingItemOk returns a tuple with the NowPlayingItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetNowPlayingItemOk() (*BaseItemDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.NowPlayingItem.Get(), o.NowPlayingItem.IsSet()
}

// HasNowPlayingItem returns a boolean if a field has been set.
func (o *SessionInfoDto) HasNowPlayingItem() bool {
	if o != nil && o.NowPlayingItem.IsSet() {
		return true
	}

	return false
}

// SetNowPlayingItem gets a reference to the given NullableBaseItemDto and assigns it to the NowPlayingItem field.
func (o *SessionInfoDto) SetNowPlayingItem(v BaseItemDto) {
	o.NowPlayingItem.Set(&v)
}
// SetNowPlayingItemNil sets the value for NowPlayingItem to be an explicit nil
func (o *SessionInfoDto) SetNowPlayingItemNil() {
	o.NowPlayingItem.Set(nil)
}

// UnsetNowPlayingItem ensures that no value is present for NowPlayingItem, not even an explicit nil
func (o *SessionInfoDto) UnsetNowPlayingItem() {
	o.NowPlayingItem.Unset()
}

// GetNowViewingItem returns the NowViewingItem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetNowViewingItem() BaseItemDto {
	if o == nil || IsNil(o.NowViewingItem.Get()) {
		var ret BaseItemDto
		return ret
	}
	return *o.NowViewingItem.Get()
}

// GetNowViewingItemOk returns a tuple with the NowViewingItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetNowViewingItemOk() (*BaseItemDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.NowViewingItem.Get(), o.NowViewingItem.IsSet()
}

// HasNowViewingItem returns a boolean if a field has been set.
func (o *SessionInfoDto) HasNowViewingItem() bool {
	if o != nil && o.NowViewingItem.IsSet() {
		return true
	}

	return false
}

// SetNowViewingItem gets a reference to the given NullableBaseItemDto and assigns it to the NowViewingItem field.
func (o *SessionInfoDto) SetNowViewingItem(v BaseItemDto) {
	o.NowViewingItem.Set(&v)
}
// SetNowViewingItemNil sets the value for NowViewingItem to be an explicit nil
func (o *SessionInfoDto) SetNowViewingItemNil() {
	o.NowViewingItem.Set(nil)
}

// UnsetNowViewingItem ensures that no value is present for NowViewingItem, not even an explicit nil
func (o *SessionInfoDto) UnsetNowViewingItem() {
	o.NowViewingItem.Unset()
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceId.Get()
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceId.Get(), o.DeviceId.IsSet()
}

// HasDeviceId returns a boolean if a field has been set.
func (o *SessionInfoDto) HasDeviceId() bool {
	if o != nil && o.DeviceId.IsSet() {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given NullableString and assigns it to the DeviceId field.
func (o *SessionInfoDto) SetDeviceId(v string) {
	o.DeviceId.Set(&v)
}
// SetDeviceIdNil sets the value for DeviceId to be an explicit nil
func (o *SessionInfoDto) SetDeviceIdNil() {
	o.DeviceId.Set(nil)
}

// UnsetDeviceId ensures that no value is present for DeviceId, not even an explicit nil
func (o *SessionInfoDto) UnsetDeviceId() {
	o.DeviceId.Unset()
}

// GetApplicationVersion returns the ApplicationVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetApplicationVersion() string {
	if o == nil || IsNil(o.ApplicationVersion.Get()) {
		var ret string
		return ret
	}
	return *o.ApplicationVersion.Get()
}

// GetApplicationVersionOk returns a tuple with the ApplicationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetApplicationVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationVersion.Get(), o.ApplicationVersion.IsSet()
}

// HasApplicationVersion returns a boolean if a field has been set.
func (o *SessionInfoDto) HasApplicationVersion() bool {
	if o != nil && o.ApplicationVersion.IsSet() {
		return true
	}

	return false
}

// SetApplicationVersion gets a reference to the given NullableString and assigns it to the ApplicationVersion field.
func (o *SessionInfoDto) SetApplicationVersion(v string) {
	o.ApplicationVersion.Set(&v)
}
// SetApplicationVersionNil sets the value for ApplicationVersion to be an explicit nil
func (o *SessionInfoDto) SetApplicationVersionNil() {
	o.ApplicationVersion.Set(nil)
}

// UnsetApplicationVersion ensures that no value is present for ApplicationVersion, not even an explicit nil
func (o *SessionInfoDto) UnsetApplicationVersion() {
	o.ApplicationVersion.Unset()
}

// GetTranscodingInfo returns the TranscodingInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetTranscodingInfo() TranscodingInfo {
	if o == nil || IsNil(o.TranscodingInfo.Get()) {
		var ret TranscodingInfo
		return ret
	}
	return *o.TranscodingInfo.Get()
}

// GetTranscodingInfoOk returns a tuple with the TranscodingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetTranscodingInfoOk() (*TranscodingInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranscodingInfo.Get(), o.TranscodingInfo.IsSet()
}

// HasTranscodingInfo returns a boolean if a field has been set.
func (o *SessionInfoDto) HasTranscodingInfo() bool {
	if o != nil && o.TranscodingInfo.IsSet() {
		return true
	}

	return false
}

// SetTranscodingInfo gets a reference to the given NullableTranscodingInfo and assigns it to the TranscodingInfo field.
func (o *SessionInfoDto) SetTranscodingInfo(v TranscodingInfo) {
	o.TranscodingInfo.Set(&v)
}
// SetTranscodingInfoNil sets the value for TranscodingInfo to be an explicit nil
func (o *SessionInfoDto) SetTranscodingInfoNil() {
	o.TranscodingInfo.Set(nil)
}

// UnsetTranscodingInfo ensures that no value is present for TranscodingInfo, not even an explicit nil
func (o *SessionInfoDto) UnsetTranscodingInfo() {
	o.TranscodingInfo.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *SessionInfoDto) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *SessionInfoDto) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *SessionInfoDto) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetSupportsMediaControl returns the SupportsMediaControl field value if set, zero value otherwise.
func (o *SessionInfoDto) GetSupportsMediaControl() bool {
	if o == nil || IsNil(o.SupportsMediaControl) {
		var ret bool
		return ret
	}
	return *o.SupportsMediaControl
}

// GetSupportsMediaControlOk returns a tuple with the SupportsMediaControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetSupportsMediaControlOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsMediaControl) {
		return nil, false
	}
	return o.SupportsMediaControl, true
}

// HasSupportsMediaControl returns a boolean if a field has been set.
func (o *SessionInfoDto) HasSupportsMediaControl() bool {
	if o != nil && !IsNil(o.SupportsMediaControl) {
		return true
	}

	return false
}

// SetSupportsMediaControl gets a reference to the given bool and assigns it to the SupportsMediaControl field.
func (o *SessionInfoDto) SetSupportsMediaControl(v bool) {
	o.SupportsMediaControl = &v
}

// GetSupportsRemoteControl returns the SupportsRemoteControl field value if set, zero value otherwise.
func (o *SessionInfoDto) GetSupportsRemoteControl() bool {
	if o == nil || IsNil(o.SupportsRemoteControl) {
		var ret bool
		return ret
	}
	return *o.SupportsRemoteControl
}

// GetSupportsRemoteControlOk returns a tuple with the SupportsRemoteControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetSupportsRemoteControlOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsRemoteControl) {
		return nil, false
	}
	return o.SupportsRemoteControl, true
}

// HasSupportsRemoteControl returns a boolean if a field has been set.
func (o *SessionInfoDto) HasSupportsRemoteControl() bool {
	if o != nil && !IsNil(o.SupportsRemoteControl) {
		return true
	}

	return false
}

// SetSupportsRemoteControl gets a reference to the given bool and assigns it to the SupportsRemoteControl field.
func (o *SessionInfoDto) SetSupportsRemoteControl(v bool) {
	o.SupportsRemoteControl = &v
}

// GetNowPlayingQueue returns the NowPlayingQueue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetNowPlayingQueue() []QueueItem {
	if o == nil {
		var ret []QueueItem
		return ret
	}
	return o.NowPlayingQueue
}

// GetNowPlayingQueueOk returns a tuple with the NowPlayingQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetNowPlayingQueueOk() ([]QueueItem, bool) {
	if o == nil || IsNil(o.NowPlayingQueue) {
		return nil, false
	}
	return o.NowPlayingQueue, true
}

// HasNowPlayingQueue returns a boolean if a field has been set.
func (o *SessionInfoDto) HasNowPlayingQueue() bool {
	if o != nil && !IsNil(o.NowPlayingQueue) {
		return true
	}

	return false
}

// SetNowPlayingQueue gets a reference to the given []QueueItem and assigns it to the NowPlayingQueue field.
func (o *SessionInfoDto) SetNowPlayingQueue(v []QueueItem) {
	o.NowPlayingQueue = v
}

// GetNowPlayingQueueFullItems returns the NowPlayingQueueFullItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetNowPlayingQueueFullItems() []BaseItemDto {
	if o == nil {
		var ret []BaseItemDto
		return ret
	}
	return o.NowPlayingQueueFullItems
}

// GetNowPlayingQueueFullItemsOk returns a tuple with the NowPlayingQueueFullItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetNowPlayingQueueFullItemsOk() ([]BaseItemDto, bool) {
	if o == nil || IsNil(o.NowPlayingQueueFullItems) {
		return nil, false
	}
	return o.NowPlayingQueueFullItems, true
}

// HasNowPlayingQueueFullItems returns a boolean if a field has been set.
func (o *SessionInfoDto) HasNowPlayingQueueFullItems() bool {
	if o != nil && !IsNil(o.NowPlayingQueueFullItems) {
		return true
	}

	return false
}

// SetNowPlayingQueueFullItems gets a reference to the given []BaseItemDto and assigns it to the NowPlayingQueueFullItems field.
func (o *SessionInfoDto) SetNowPlayingQueueFullItems(v []BaseItemDto) {
	o.NowPlayingQueueFullItems = v
}

// GetHasCustomDeviceName returns the HasCustomDeviceName field value if set, zero value otherwise.
func (o *SessionInfoDto) GetHasCustomDeviceName() bool {
	if o == nil || IsNil(o.HasCustomDeviceName) {
		var ret bool
		return ret
	}
	return *o.HasCustomDeviceName
}

// GetHasCustomDeviceNameOk returns a tuple with the HasCustomDeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetHasCustomDeviceNameOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCustomDeviceName) {
		return nil, false
	}
	return o.HasCustomDeviceName, true
}

// HasHasCustomDeviceName returns a boolean if a field has been set.
func (o *SessionInfoDto) HasHasCustomDeviceName() bool {
	if o != nil && !IsNil(o.HasCustomDeviceName) {
		return true
	}

	return false
}

// SetHasCustomDeviceName gets a reference to the given bool and assigns it to the HasCustomDeviceName field.
func (o *SessionInfoDto) SetHasCustomDeviceName(v bool) {
	o.HasCustomDeviceName = &v
}

// GetPlaylistItemId returns the PlaylistItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetPlaylistItemId() string {
	if o == nil || IsNil(o.PlaylistItemId.Get()) {
		var ret string
		return ret
	}
	return *o.PlaylistItemId.Get()
}

// GetPlaylistItemIdOk returns a tuple with the PlaylistItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetPlaylistItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlaylistItemId.Get(), o.PlaylistItemId.IsSet()
}

// HasPlaylistItemId returns a boolean if a field has been set.
func (o *SessionInfoDto) HasPlaylistItemId() bool {
	if o != nil && o.PlaylistItemId.IsSet() {
		return true
	}

	return false
}

// SetPlaylistItemId gets a reference to the given NullableString and assigns it to the PlaylistItemId field.
func (o *SessionInfoDto) SetPlaylistItemId(v string) {
	o.PlaylistItemId.Set(&v)
}
// SetPlaylistItemIdNil sets the value for PlaylistItemId to be an explicit nil
func (o *SessionInfoDto) SetPlaylistItemIdNil() {
	o.PlaylistItemId.Set(nil)
}

// UnsetPlaylistItemId ensures that no value is present for PlaylistItemId, not even an explicit nil
func (o *SessionInfoDto) UnsetPlaylistItemId() {
	o.PlaylistItemId.Unset()
}

// GetServerId returns the ServerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetServerId() string {
	if o == nil || IsNil(o.ServerId.Get()) {
		var ret string
		return ret
	}
	return *o.ServerId.Get()
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetServerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerId.Get(), o.ServerId.IsSet()
}

// HasServerId returns a boolean if a field has been set.
func (o *SessionInfoDto) HasServerId() bool {
	if o != nil && o.ServerId.IsSet() {
		return true
	}

	return false
}

// SetServerId gets a reference to the given NullableString and assigns it to the ServerId field.
func (o *SessionInfoDto) SetServerId(v string) {
	o.ServerId.Set(&v)
}
// SetServerIdNil sets the value for ServerId to be an explicit nil
func (o *SessionInfoDto) SetServerIdNil() {
	o.ServerId.Set(nil)
}

// UnsetServerId ensures that no value is present for ServerId, not even an explicit nil
func (o *SessionInfoDto) UnsetServerId() {
	o.ServerId.Unset()
}

// GetUserPrimaryImageTag returns the UserPrimaryImageTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SessionInfoDto) GetUserPrimaryImageTag() string {
	if o == nil || IsNil(o.UserPrimaryImageTag.Get()) {
		var ret string
		return ret
	}
	return *o.UserPrimaryImageTag.Get()
}

// GetUserPrimaryImageTagOk returns a tuple with the UserPrimaryImageTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SessionInfoDto) GetUserPrimaryImageTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserPrimaryImageTag.Get(), o.UserPrimaryImageTag.IsSet()
}

// HasUserPrimaryImageTag returns a boolean if a field has been set.
func (o *SessionInfoDto) HasUserPrimaryImageTag() bool {
	if o != nil && o.UserPrimaryImageTag.IsSet() {
		return true
	}

	return false
}

// SetUserPrimaryImageTag gets a reference to the given NullableString and assigns it to the UserPrimaryImageTag field.
func (o *SessionInfoDto) SetUserPrimaryImageTag(v string) {
	o.UserPrimaryImageTag.Set(&v)
}
// SetUserPrimaryImageTagNil sets the value for UserPrimaryImageTag to be an explicit nil
func (o *SessionInfoDto) SetUserPrimaryImageTagNil() {
	o.UserPrimaryImageTag.Set(nil)
}

// UnsetUserPrimaryImageTag ensures that no value is present for UserPrimaryImageTag, not even an explicit nil
func (o *SessionInfoDto) UnsetUserPrimaryImageTag() {
	o.UserPrimaryImageTag.Unset()
}

// GetSupportedCommands returns the SupportedCommands field value if set, zero value otherwise.
func (o *SessionInfoDto) GetSupportedCommands() []GeneralCommandType {
	if o == nil || IsNil(o.SupportedCommands) {
		var ret []GeneralCommandType
		return ret
	}
	return o.SupportedCommands
}

// GetSupportedCommandsOk returns a tuple with the SupportedCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfoDto) GetSupportedCommandsOk() ([]GeneralCommandType, bool) {
	if o == nil || IsNil(o.SupportedCommands) {
		return nil, false
	}
	return o.SupportedCommands, true
}

// HasSupportedCommands returns a boolean if a field has been set.
func (o *SessionInfoDto) HasSupportedCommands() bool {
	if o != nil && !IsNil(o.SupportedCommands) {
		return true
	}

	return false
}

// SetSupportedCommands gets a reference to the given []GeneralCommandType and assigns it to the SupportedCommands field.
func (o *SessionInfoDto) SetSupportedCommands(v []GeneralCommandType) {
	o.SupportedCommands = v
}

func (o SessionInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PlayState.IsSet() {
		toSerialize["PlayState"] = o.PlayState.Get()
	}
	if o.AdditionalUsers != nil {
		toSerialize["AdditionalUsers"] = o.AdditionalUsers
	}
	if o.Capabilities.IsSet() {
		toSerialize["Capabilities"] = o.Capabilities.Get()
	}
	if o.RemoteEndPoint.IsSet() {
		toSerialize["RemoteEndPoint"] = o.RemoteEndPoint.Get()
	}
	if !IsNil(o.PlayableMediaTypes) {
		toSerialize["PlayableMediaTypes"] = o.PlayableMediaTypes
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if o.UserName.IsSet() {
		toSerialize["UserName"] = o.UserName.Get()
	}
	if o.Client.IsSet() {
		toSerialize["Client"] = o.Client.Get()
	}
	if !IsNil(o.LastActivityDate) {
		toSerialize["LastActivityDate"] = o.LastActivityDate
	}
	if !IsNil(o.LastPlaybackCheckIn) {
		toSerialize["LastPlaybackCheckIn"] = o.LastPlaybackCheckIn
	}
	if o.LastPausedDate.IsSet() {
		toSerialize["LastPausedDate"] = o.LastPausedDate.Get()
	}
	if o.DeviceName.IsSet() {
		toSerialize["DeviceName"] = o.DeviceName.Get()
	}
	if o.DeviceType.IsSet() {
		toSerialize["DeviceType"] = o.DeviceType.Get()
	}
	if o.NowPlayingItem.IsSet() {
		toSerialize["NowPlayingItem"] = o.NowPlayingItem.Get()
	}
	if o.NowViewingItem.IsSet() {
		toSerialize["NowViewingItem"] = o.NowViewingItem.Get()
	}
	if o.DeviceId.IsSet() {
		toSerialize["DeviceId"] = o.DeviceId.Get()
	}
	if o.ApplicationVersion.IsSet() {
		toSerialize["ApplicationVersion"] = o.ApplicationVersion.Get()
	}
	if o.TranscodingInfo.IsSet() {
		toSerialize["TranscodingInfo"] = o.TranscodingInfo.Get()
	}
	if !IsNil(o.IsActive) {
		toSerialize["IsActive"] = o.IsActive
	}
	if !IsNil(o.SupportsMediaControl) {
		toSerialize["SupportsMediaControl"] = o.SupportsMediaControl
	}
	if !IsNil(o.SupportsRemoteControl) {
		toSerialize["SupportsRemoteControl"] = o.SupportsRemoteControl
	}
	if o.NowPlayingQueue != nil {
		toSerialize["NowPlayingQueue"] = o.NowPlayingQueue
	}
	if o.NowPlayingQueueFullItems != nil {
		toSerialize["NowPlayingQueueFullItems"] = o.NowPlayingQueueFullItems
	}
	if !IsNil(o.HasCustomDeviceName) {
		toSerialize["HasCustomDeviceName"] = o.HasCustomDeviceName
	}
	if o.PlaylistItemId.IsSet() {
		toSerialize["PlaylistItemId"] = o.PlaylistItemId.Get()
	}
	if o.ServerId.IsSet() {
		toSerialize["ServerId"] = o.ServerId.Get()
	}
	if o.UserPrimaryImageTag.IsSet() {
		toSerialize["UserPrimaryImageTag"] = o.UserPrimaryImageTag.Get()
	}
	if !IsNil(o.SupportedCommands) {
		toSerialize["SupportedCommands"] = o.SupportedCommands
	}
	return toSerialize, nil
}

type NullableSessionInfoDto struct {
	value *SessionInfoDto
	isSet bool
}

func (v NullableSessionInfoDto) Get() *SessionInfoDto {
	return v.value
}

func (v *NullableSessionInfoDto) Set(val *SessionInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionInfoDto(val *SessionInfoDto) *NullableSessionInfoDto {
	return &NullableSessionInfoDto{value: val, isSet: true}
}

func (v NullableSessionInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


