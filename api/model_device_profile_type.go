/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// DeviceProfileType the model 'DeviceProfileType'
type DeviceProfileType string

// List of DeviceProfileType
const (
	DEVICEPROFILETYPE_SYSTEM DeviceProfileType = "System"
	DEVICEPROFILETYPE_USER DeviceProfileType = "User"
)

// All allowed values of DeviceProfileType enum
var AllowedDeviceProfileTypeEnumValues = []DeviceProfileType{
	"System",
	"User",
}

func (v *DeviceProfileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceProfileType(value)
	for _, existing := range AllowedDeviceProfileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceProfileType", value)
}

// NewDeviceProfileTypeFromValue returns a pointer to a valid DeviceProfileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceProfileTypeFromValue(v string) (*DeviceProfileType, error) {
	ev := DeviceProfileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceProfileType: valid values are %v", v, AllowedDeviceProfileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceProfileType) IsValid() bool {
	for _, existing := range AllowedDeviceProfileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceProfileType value
func (v DeviceProfileType) Ptr() *DeviceProfileType {
	return &v
}

type NullableDeviceProfileType struct {
	value *DeviceProfileType
	isSet bool
}

func (v NullableDeviceProfileType) Get() *DeviceProfileType {
	return v.value
}

func (v *NullableDeviceProfileType) Set(val *DeviceProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceProfileType(val *DeviceProfileType) *NullableDeviceProfileType {
	return &NullableDeviceProfileType{value: val, isSet: true}
}

func (v NullableDeviceProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

