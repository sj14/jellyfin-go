/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AudioSpatialFormat An enum representing formats of spatial audio.
type AudioSpatialFormat string

// List of AudioSpatialFormat
const (
	AUDIOSPATIALFORMAT_NONE AudioSpatialFormat = "None"
	AUDIOSPATIALFORMAT_DOLBY_ATMOS AudioSpatialFormat = "DolbyAtmos"
	AUDIOSPATIALFORMAT_DTSX AudioSpatialFormat = "DTSX"
)

// All allowed values of AudioSpatialFormat enum
var AllowedAudioSpatialFormatEnumValues = []AudioSpatialFormat{
	"None",
	"DolbyAtmos",
	"DTSX",
}

func (v *AudioSpatialFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AudioSpatialFormat(value)
	for _, existing := range AllowedAudioSpatialFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AudioSpatialFormat", value)
}

// NewAudioSpatialFormatFromValue returns a pointer to a valid AudioSpatialFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAudioSpatialFormatFromValue(v string) (*AudioSpatialFormat, error) {
	ev := AudioSpatialFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AudioSpatialFormat: valid values are %v", v, AllowedAudioSpatialFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AudioSpatialFormat) IsValid() bool {
	for _, existing := range AllowedAudioSpatialFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AudioSpatialFormat value
func (v AudioSpatialFormat) Ptr() *AudioSpatialFormat {
	return &v
}

type NullableAudioSpatialFormat struct {
	value *AudioSpatialFormat
	isSet bool
}

func (v NullableAudioSpatialFormat) Get() *AudioSpatialFormat {
	return v.value
}

func (v *NullableAudioSpatialFormat) Set(val *AudioSpatialFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioSpatialFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioSpatialFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioSpatialFormat(val *AudioSpatialFormat) *NullableAudioSpatialFormat {
	return &NullableAudioSpatialFormat{value: val, isSet: true}
}

func (v NullableAudioSpatialFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioSpatialFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

