/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// LocationType Enum LocationType.
type LocationType string

// List of LocationType
const (
	LOCATIONTYPE_FILE_SYSTEM LocationType = "FileSystem"
	LOCATIONTYPE_REMOTE LocationType = "Remote"
	LOCATIONTYPE_VIRTUAL LocationType = "Virtual"
	LOCATIONTYPE_OFFLINE LocationType = "Offline"
)

// All allowed values of LocationType enum
var AllowedLocationTypeEnumValues = []LocationType{
	"FileSystem",
	"Remote",
	"Virtual",
	"Offline",
}

func (v *LocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationType(value)
	for _, existing := range AllowedLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationType", value)
}

// NewLocationTypeFromValue returns a pointer to a valid LocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationTypeFromValue(v string) (*LocationType, error) {
	ev := LocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationType: valid values are %v", v, AllowedLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationType) IsValid() bool {
	for _, existing := range AllowedLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationType value
func (v LocationType) Ptr() *LocationType {
	return &v
}

type NullableLocationType struct {
	value *LocationType
	isSet bool
}

func (v NullableLocationType) Get() *LocationType {
	return v.value
}

func (v *NullableLocationType) Set(val *LocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationType(val *LocationType) *NullableLocationType {
	return &NullableLocationType{value: val, isSet: true}
}

func (v NullableLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

