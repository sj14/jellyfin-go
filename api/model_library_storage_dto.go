/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LibraryStorageDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LibraryStorageDto{}

// LibraryStorageDto Contains informations about a libraries storage informations.
type LibraryStorageDto struct {
	// Gets or sets the Library Id.
	Id *string `json:"Id,omitempty"`
	// Gets or sets the name of the library.
	Name *string `json:"Name,omitempty"`
	// Gets or sets the storage informations about the folders used in a library.
	Folders []FolderStorageDto `json:"Folders,omitempty"`
}

// NewLibraryStorageDto instantiates a new LibraryStorageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryStorageDto() *LibraryStorageDto {
	this := LibraryStorageDto{}
	return &this
}

// NewLibraryStorageDtoWithDefaults instantiates a new LibraryStorageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryStorageDtoWithDefaults() *LibraryStorageDto {
	this := LibraryStorageDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LibraryStorageDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryStorageDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LibraryStorageDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LibraryStorageDto) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LibraryStorageDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryStorageDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LibraryStorageDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LibraryStorageDto) SetName(v string) {
	o.Name = &v
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *LibraryStorageDto) GetFolders() []FolderStorageDto {
	if o == nil || IsNil(o.Folders) {
		var ret []FolderStorageDto
		return ret
	}
	return o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryStorageDto) GetFoldersOk() ([]FolderStorageDto, bool) {
	if o == nil || IsNil(o.Folders) {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *LibraryStorageDto) HasFolders() bool {
	if o != nil && !IsNil(o.Folders) {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []FolderStorageDto and assigns it to the Folders field.
func (o *LibraryStorageDto) SetFolders(v []FolderStorageDto) {
	o.Folders = v
}

func (o LibraryStorageDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LibraryStorageDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Folders) {
		toSerialize["Folders"] = o.Folders
	}
	return toSerialize, nil
}

type NullableLibraryStorageDto struct {
	value *LibraryStorageDto
	isSet bool
}

func (v NullableLibraryStorageDto) Get() *LibraryStorageDto {
	return v.value
}

func (v *NullableLibraryStorageDto) Set(val *LibraryStorageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryStorageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryStorageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryStorageDto(val *LibraryStorageDto) *NullableLibraryStorageDto {
	return &NullableLibraryStorageDto{value: val, isSet: true}
}

func (v NullableLibraryStorageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryStorageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


