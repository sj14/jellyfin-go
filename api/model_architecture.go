/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.8.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// Architecture the model 'Architecture'
type Architecture string

// List of Architecture
const (
	ARCHITECTURE_X86 Architecture = "X86"
	ARCHITECTURE_X64 Architecture = "X64"
	ARCHITECTURE_ARM Architecture = "Arm"
	ARCHITECTURE_ARM64 Architecture = "Arm64"
	ARCHITECTURE_WASM Architecture = "Wasm"
	ARCHITECTURE_S390X Architecture = "S390x"
)

// All allowed values of Architecture enum
var AllowedArchitectureEnumValues = []Architecture{
	"X86",
	"X64",
	"Arm",
	"Arm64",
	"Wasm",
	"S390x",
}

func (v *Architecture) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Architecture(value)
	for _, existing := range AllowedArchitectureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Architecture", value)
}

// NewArchitectureFromValue returns a pointer to a valid Architecture
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewArchitectureFromValue(v string) (*Architecture, error) {
	ev := Architecture(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Architecture: valid values are %v", v, AllowedArchitectureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Architecture) IsValid() bool {
	for _, existing := range AllowedArchitectureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Architecture value
func (v Architecture) Ptr() *Architecture {
	return &v
}

type NullableArchitecture struct {
	value *Architecture
	isSet bool
}

func (v NullableArchitecture) Get() *Architecture {
	return v.value
}

func (v *NullableArchitecture) Set(val *Architecture) {
	v.value = val
	v.isSet = true
}

func (v NullableArchitecture) IsSet() bool {
	return v.isSet
}

func (v *NullableArchitecture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchitecture(val *Architecture) *NullableArchitecture {
	return &NullableArchitecture{value: val, isSet: true}
}

func (v NullableArchitecture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchitecture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

