/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BackupOptionsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupOptionsDto{}

// BackupOptionsDto Defines the optional contents of the backup archive.
type BackupOptionsDto struct {
	// Gets or sets a value indicating whether the archive contains the Metadata contents.
	Metadata *bool `json:"Metadata,omitempty"`
	// Gets or sets a value indicating whether the archive contains the Trickplay contents.
	Trickplay *bool `json:"Trickplay,omitempty"`
	// Gets or sets a value indicating whether the archive contains the Subtitle contents.
	Subtitles *bool `json:"Subtitles,omitempty"`
	// Gets or sets a value indicating whether the archive contains the Database contents.
	Database *bool `json:"Database,omitempty"`
}

// NewBackupOptionsDto instantiates a new BackupOptionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupOptionsDto() *BackupOptionsDto {
	this := BackupOptionsDto{}
	return &this
}

// NewBackupOptionsDtoWithDefaults instantiates a new BackupOptionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupOptionsDtoWithDefaults() *BackupOptionsDto {
	this := BackupOptionsDto{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *BackupOptionsDto) GetMetadata() bool {
	if o == nil || IsNil(o.Metadata) {
		var ret bool
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupOptionsDto) GetMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *BackupOptionsDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given bool and assigns it to the Metadata field.
func (o *BackupOptionsDto) SetMetadata(v bool) {
	o.Metadata = &v
}

// GetTrickplay returns the Trickplay field value if set, zero value otherwise.
func (o *BackupOptionsDto) GetTrickplay() bool {
	if o == nil || IsNil(o.Trickplay) {
		var ret bool
		return ret
	}
	return *o.Trickplay
}

// GetTrickplayOk returns a tuple with the Trickplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupOptionsDto) GetTrickplayOk() (*bool, bool) {
	if o == nil || IsNil(o.Trickplay) {
		return nil, false
	}
	return o.Trickplay, true
}

// HasTrickplay returns a boolean if a field has been set.
func (o *BackupOptionsDto) HasTrickplay() bool {
	if o != nil && !IsNil(o.Trickplay) {
		return true
	}

	return false
}

// SetTrickplay gets a reference to the given bool and assigns it to the Trickplay field.
func (o *BackupOptionsDto) SetTrickplay(v bool) {
	o.Trickplay = &v
}

// GetSubtitles returns the Subtitles field value if set, zero value otherwise.
func (o *BackupOptionsDto) GetSubtitles() bool {
	if o == nil || IsNil(o.Subtitles) {
		var ret bool
		return ret
	}
	return *o.Subtitles
}

// GetSubtitlesOk returns a tuple with the Subtitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupOptionsDto) GetSubtitlesOk() (*bool, bool) {
	if o == nil || IsNil(o.Subtitles) {
		return nil, false
	}
	return o.Subtitles, true
}

// HasSubtitles returns a boolean if a field has been set.
func (o *BackupOptionsDto) HasSubtitles() bool {
	if o != nil && !IsNil(o.Subtitles) {
		return true
	}

	return false
}

// SetSubtitles gets a reference to the given bool and assigns it to the Subtitles field.
func (o *BackupOptionsDto) SetSubtitles(v bool) {
	o.Subtitles = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *BackupOptionsDto) GetDatabase() bool {
	if o == nil || IsNil(o.Database) {
		var ret bool
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupOptionsDto) GetDatabaseOk() (*bool, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *BackupOptionsDto) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given bool and assigns it to the Database field.
func (o *BackupOptionsDto) SetDatabase(v bool) {
	o.Database = &v
}

func (o BackupOptionsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupOptionsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["Metadata"] = o.Metadata
	}
	if !IsNil(o.Trickplay) {
		toSerialize["Trickplay"] = o.Trickplay
	}
	if !IsNil(o.Subtitles) {
		toSerialize["Subtitles"] = o.Subtitles
	}
	if !IsNil(o.Database) {
		toSerialize["Database"] = o.Database
	}
	return toSerialize, nil
}

type NullableBackupOptionsDto struct {
	value *BackupOptionsDto
	isSet bool
}

func (v NullableBackupOptionsDto) Get() *BackupOptionsDto {
	return v.value
}

func (v *NullableBackupOptionsDto) Set(val *BackupOptionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupOptionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupOptionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupOptionsDto(val *BackupOptionsDto) *NullableBackupOptionsDto {
	return &NullableBackupOptionsDto{value: val, isSet: true}
}

func (v NullableBackupOptionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupOptionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


