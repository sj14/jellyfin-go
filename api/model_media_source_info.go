/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MediaSourceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaSourceInfo{}

// MediaSourceInfo struct for MediaSourceInfo
type MediaSourceInfo struct {
	Protocol *MediaProtocol `json:"Protocol,omitempty"`
	Id NullableString `json:"Id,omitempty"`
	Path NullableString `json:"Path,omitempty"`
	EncoderPath NullableString `json:"EncoderPath,omitempty"`
	EncoderProtocol NullableMediaProtocol `json:"EncoderProtocol,omitempty"`
	Type *MediaSourceType `json:"Type,omitempty"`
	Container NullableString `json:"Container,omitempty"`
	Size NullableInt64 `json:"Size,omitempty"`
	Name NullableString `json:"Name,omitempty"`
	// Gets or sets a value indicating whether the media is remote.  Differentiate internet url vs local network.
	IsRemote *bool `json:"IsRemote,omitempty"`
	ETag NullableString `json:"ETag,omitempty"`
	RunTimeTicks NullableInt64 `json:"RunTimeTicks,omitempty"`
	ReadAtNativeFramerate *bool `json:"ReadAtNativeFramerate,omitempty"`
	IgnoreDts *bool `json:"IgnoreDts,omitempty"`
	IgnoreIndex *bool `json:"IgnoreIndex,omitempty"`
	GenPtsInput *bool `json:"GenPtsInput,omitempty"`
	SupportsTranscoding *bool `json:"SupportsTranscoding,omitempty"`
	SupportsDirectStream *bool `json:"SupportsDirectStream,omitempty"`
	SupportsDirectPlay *bool `json:"SupportsDirectPlay,omitempty"`
	IsInfiniteStream *bool `json:"IsInfiniteStream,omitempty"`
	UseMostCompatibleTranscodingProfile *bool `json:"UseMostCompatibleTranscodingProfile,omitempty"`
	RequiresOpening *bool `json:"RequiresOpening,omitempty"`
	OpenToken NullableString `json:"OpenToken,omitempty"`
	RequiresClosing *bool `json:"RequiresClosing,omitempty"`
	LiveStreamId NullableString `json:"LiveStreamId,omitempty"`
	BufferMs NullableInt32 `json:"BufferMs,omitempty"`
	RequiresLooping *bool `json:"RequiresLooping,omitempty"`
	SupportsProbing *bool `json:"SupportsProbing,omitempty"`
	VideoType NullableVideoType `json:"VideoType,omitempty"`
	IsoType NullableIsoType `json:"IsoType,omitempty"`
	Video3DFormat NullableVideo3DFormat `json:"Video3DFormat,omitempty"`
	MediaStreams []MediaStream `json:"MediaStreams,omitempty"`
	MediaAttachments []MediaAttachment `json:"MediaAttachments,omitempty"`
	Formats []string `json:"Formats,omitempty"`
	Bitrate NullableInt32 `json:"Bitrate,omitempty"`
	FallbackMaxStreamingBitrate NullableInt32 `json:"FallbackMaxStreamingBitrate,omitempty"`
	Timestamp NullableTransportStreamTimestamp `json:"Timestamp,omitempty"`
	RequiredHttpHeaders map[string]string `json:"RequiredHttpHeaders,omitempty"`
	TranscodingUrl NullableString `json:"TranscodingUrl,omitempty"`
	// Media streaming protocol.  Lowercase for backwards compatibility.
	TranscodingSubProtocol *MediaStreamProtocol `json:"TranscodingSubProtocol,omitempty"`
	TranscodingContainer NullableString `json:"TranscodingContainer,omitempty"`
	AnalyzeDurationMs NullableInt32 `json:"AnalyzeDurationMs,omitempty"`
	DefaultAudioStreamIndex NullableInt32 `json:"DefaultAudioStreamIndex,omitempty"`
	DefaultSubtitleStreamIndex NullableInt32 `json:"DefaultSubtitleStreamIndex,omitempty"`
	HasSegments *bool `json:"HasSegments,omitempty"`
}

// NewMediaSourceInfo instantiates a new MediaSourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaSourceInfo() *MediaSourceInfo {
	this := MediaSourceInfo{}
	var useMostCompatibleTranscodingProfile bool = false
	this.UseMostCompatibleTranscodingProfile = &useMostCompatibleTranscodingProfile
	return &this
}

// NewMediaSourceInfoWithDefaults instantiates a new MediaSourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaSourceInfoWithDefaults() *MediaSourceInfo {
	this := MediaSourceInfo{}
	var useMostCompatibleTranscodingProfile bool = false
	this.UseMostCompatibleTranscodingProfile = &useMostCompatibleTranscodingProfile
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetProtocol() MediaProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret MediaProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetProtocolOk() (*MediaProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given MediaProtocol and assigns it to the Protocol field.
func (o *MediaSourceInfo) SetProtocol(v MediaProtocol) {
	o.Protocol = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *MediaSourceInfo) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *MediaSourceInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *MediaSourceInfo) UnsetId() {
	o.Id.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *MediaSourceInfo) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *MediaSourceInfo) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *MediaSourceInfo) UnsetPath() {
	o.Path.Unset()
}

// GetEncoderPath returns the EncoderPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetEncoderPath() string {
	if o == nil || IsNil(o.EncoderPath.Get()) {
		var ret string
		return ret
	}
	return *o.EncoderPath.Get()
}

// GetEncoderPathOk returns a tuple with the EncoderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetEncoderPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncoderPath.Get(), o.EncoderPath.IsSet()
}

// HasEncoderPath returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasEncoderPath() bool {
	if o != nil && o.EncoderPath.IsSet() {
		return true
	}

	return false
}

// SetEncoderPath gets a reference to the given NullableString and assigns it to the EncoderPath field.
func (o *MediaSourceInfo) SetEncoderPath(v string) {
	o.EncoderPath.Set(&v)
}
// SetEncoderPathNil sets the value for EncoderPath to be an explicit nil
func (o *MediaSourceInfo) SetEncoderPathNil() {
	o.EncoderPath.Set(nil)
}

// UnsetEncoderPath ensures that no value is present for EncoderPath, not even an explicit nil
func (o *MediaSourceInfo) UnsetEncoderPath() {
	o.EncoderPath.Unset()
}

// GetEncoderProtocol returns the EncoderProtocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetEncoderProtocol() MediaProtocol {
	if o == nil || IsNil(o.EncoderProtocol.Get()) {
		var ret MediaProtocol
		return ret
	}
	return *o.EncoderProtocol.Get()
}

// GetEncoderProtocolOk returns a tuple with the EncoderProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetEncoderProtocolOk() (*MediaProtocol, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncoderProtocol.Get(), o.EncoderProtocol.IsSet()
}

// HasEncoderProtocol returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasEncoderProtocol() bool {
	if o != nil && o.EncoderProtocol.IsSet() {
		return true
	}

	return false
}

// SetEncoderProtocol gets a reference to the given NullableMediaProtocol and assigns it to the EncoderProtocol field.
func (o *MediaSourceInfo) SetEncoderProtocol(v MediaProtocol) {
	o.EncoderProtocol.Set(&v)
}
// SetEncoderProtocolNil sets the value for EncoderProtocol to be an explicit nil
func (o *MediaSourceInfo) SetEncoderProtocolNil() {
	o.EncoderProtocol.Set(nil)
}

// UnsetEncoderProtocol ensures that no value is present for EncoderProtocol, not even an explicit nil
func (o *MediaSourceInfo) UnsetEncoderProtocol() {
	o.EncoderProtocol.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetType() MediaSourceType {
	if o == nil || IsNil(o.Type) {
		var ret MediaSourceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetTypeOk() (*MediaSourceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given MediaSourceType and assigns it to the Type field.
func (o *MediaSourceInfo) SetType(v MediaSourceType) {
	o.Type = &v
}

// GetContainer returns the Container field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetContainer() string {
	if o == nil || IsNil(o.Container.Get()) {
		var ret string
		return ret
	}
	return *o.Container.Get()
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetContainerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Container.Get(), o.Container.IsSet()
}

// HasContainer returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasContainer() bool {
	if o != nil && o.Container.IsSet() {
		return true
	}

	return false
}

// SetContainer gets a reference to the given NullableString and assigns it to the Container field.
func (o *MediaSourceInfo) SetContainer(v string) {
	o.Container.Set(&v)
}
// SetContainerNil sets the value for Container to be an explicit nil
func (o *MediaSourceInfo) SetContainerNil() {
	o.Container.Set(nil)
}

// UnsetContainer ensures that no value is present for Container, not even an explicit nil
func (o *MediaSourceInfo) UnsetContainer() {
	o.Container.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetSize() int64 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *MediaSourceInfo) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *MediaSourceInfo) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *MediaSourceInfo) UnsetSize() {
	o.Size.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MediaSourceInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MediaSourceInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MediaSourceInfo) UnsetName() {
	o.Name.Unset()
}

// GetIsRemote returns the IsRemote field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetIsRemote() bool {
	if o == nil || IsNil(o.IsRemote) {
		var ret bool
		return ret
	}
	return *o.IsRemote
}

// GetIsRemoteOk returns a tuple with the IsRemote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetIsRemoteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRemote) {
		return nil, false
	}
	return o.IsRemote, true
}

// HasIsRemote returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasIsRemote() bool {
	if o != nil && !IsNil(o.IsRemote) {
		return true
	}

	return false
}

// SetIsRemote gets a reference to the given bool and assigns it to the IsRemote field.
func (o *MediaSourceInfo) SetIsRemote(v bool) {
	o.IsRemote = &v
}

// GetETag returns the ETag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetETag() string {
	if o == nil || IsNil(o.ETag.Get()) {
		var ret string
		return ret
	}
	return *o.ETag.Get()
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetETagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ETag.Get(), o.ETag.IsSet()
}

// HasETag returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasETag() bool {
	if o != nil && o.ETag.IsSet() {
		return true
	}

	return false
}

// SetETag gets a reference to the given NullableString and assigns it to the ETag field.
func (o *MediaSourceInfo) SetETag(v string) {
	o.ETag.Set(&v)
}
// SetETagNil sets the value for ETag to be an explicit nil
func (o *MediaSourceInfo) SetETagNil() {
	o.ETag.Set(nil)
}

// UnsetETag ensures that no value is present for ETag, not even an explicit nil
func (o *MediaSourceInfo) UnsetETag() {
	o.ETag.Unset()
}

// GetRunTimeTicks returns the RunTimeTicks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetRunTimeTicks() int64 {
	if o == nil || IsNil(o.RunTimeTicks.Get()) {
		var ret int64
		return ret
	}
	return *o.RunTimeTicks.Get()
}

// GetRunTimeTicksOk returns a tuple with the RunTimeTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetRunTimeTicksOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunTimeTicks.Get(), o.RunTimeTicks.IsSet()
}

// HasRunTimeTicks returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasRunTimeTicks() bool {
	if o != nil && o.RunTimeTicks.IsSet() {
		return true
	}

	return false
}

// SetRunTimeTicks gets a reference to the given NullableInt64 and assigns it to the RunTimeTicks field.
func (o *MediaSourceInfo) SetRunTimeTicks(v int64) {
	o.RunTimeTicks.Set(&v)
}
// SetRunTimeTicksNil sets the value for RunTimeTicks to be an explicit nil
func (o *MediaSourceInfo) SetRunTimeTicksNil() {
	o.RunTimeTicks.Set(nil)
}

// UnsetRunTimeTicks ensures that no value is present for RunTimeTicks, not even an explicit nil
func (o *MediaSourceInfo) UnsetRunTimeTicks() {
	o.RunTimeTicks.Unset()
}

// GetReadAtNativeFramerate returns the ReadAtNativeFramerate field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetReadAtNativeFramerate() bool {
	if o == nil || IsNil(o.ReadAtNativeFramerate) {
		var ret bool
		return ret
	}
	return *o.ReadAtNativeFramerate
}

// GetReadAtNativeFramerateOk returns a tuple with the ReadAtNativeFramerate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetReadAtNativeFramerateOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadAtNativeFramerate) {
		return nil, false
	}
	return o.ReadAtNativeFramerate, true
}

// HasReadAtNativeFramerate returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasReadAtNativeFramerate() bool {
	if o != nil && !IsNil(o.ReadAtNativeFramerate) {
		return true
	}

	return false
}

// SetReadAtNativeFramerate gets a reference to the given bool and assigns it to the ReadAtNativeFramerate field.
func (o *MediaSourceInfo) SetReadAtNativeFramerate(v bool) {
	o.ReadAtNativeFramerate = &v
}

// GetIgnoreDts returns the IgnoreDts field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetIgnoreDts() bool {
	if o == nil || IsNil(o.IgnoreDts) {
		var ret bool
		return ret
	}
	return *o.IgnoreDts
}

// GetIgnoreDtsOk returns a tuple with the IgnoreDts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetIgnoreDtsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDts) {
		return nil, false
	}
	return o.IgnoreDts, true
}

// HasIgnoreDts returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasIgnoreDts() bool {
	if o != nil && !IsNil(o.IgnoreDts) {
		return true
	}

	return false
}

// SetIgnoreDts gets a reference to the given bool and assigns it to the IgnoreDts field.
func (o *MediaSourceInfo) SetIgnoreDts(v bool) {
	o.IgnoreDts = &v
}

// GetIgnoreIndex returns the IgnoreIndex field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetIgnoreIndex() bool {
	if o == nil || IsNil(o.IgnoreIndex) {
		var ret bool
		return ret
	}
	return *o.IgnoreIndex
}

// GetIgnoreIndexOk returns a tuple with the IgnoreIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetIgnoreIndexOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreIndex) {
		return nil, false
	}
	return o.IgnoreIndex, true
}

// HasIgnoreIndex returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasIgnoreIndex() bool {
	if o != nil && !IsNil(o.IgnoreIndex) {
		return true
	}

	return false
}

// SetIgnoreIndex gets a reference to the given bool and assigns it to the IgnoreIndex field.
func (o *MediaSourceInfo) SetIgnoreIndex(v bool) {
	o.IgnoreIndex = &v
}

// GetGenPtsInput returns the GenPtsInput field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetGenPtsInput() bool {
	if o == nil || IsNil(o.GenPtsInput) {
		var ret bool
		return ret
	}
	return *o.GenPtsInput
}

// GetGenPtsInputOk returns a tuple with the GenPtsInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetGenPtsInputOk() (*bool, bool) {
	if o == nil || IsNil(o.GenPtsInput) {
		return nil, false
	}
	return o.GenPtsInput, true
}

// HasGenPtsInput returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasGenPtsInput() bool {
	if o != nil && !IsNil(o.GenPtsInput) {
		return true
	}

	return false
}

// SetGenPtsInput gets a reference to the given bool and assigns it to the GenPtsInput field.
func (o *MediaSourceInfo) SetGenPtsInput(v bool) {
	o.GenPtsInput = &v
}

// GetSupportsTranscoding returns the SupportsTranscoding field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetSupportsTranscoding() bool {
	if o == nil || IsNil(o.SupportsTranscoding) {
		var ret bool
		return ret
	}
	return *o.SupportsTranscoding
}

// GetSupportsTranscodingOk returns a tuple with the SupportsTranscoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetSupportsTranscodingOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsTranscoding) {
		return nil, false
	}
	return o.SupportsTranscoding, true
}

// HasSupportsTranscoding returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasSupportsTranscoding() bool {
	if o != nil && !IsNil(o.SupportsTranscoding) {
		return true
	}

	return false
}

// SetSupportsTranscoding gets a reference to the given bool and assigns it to the SupportsTranscoding field.
func (o *MediaSourceInfo) SetSupportsTranscoding(v bool) {
	o.SupportsTranscoding = &v
}

// GetSupportsDirectStream returns the SupportsDirectStream field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetSupportsDirectStream() bool {
	if o == nil || IsNil(o.SupportsDirectStream) {
		var ret bool
		return ret
	}
	return *o.SupportsDirectStream
}

// GetSupportsDirectStreamOk returns a tuple with the SupportsDirectStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetSupportsDirectStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsDirectStream) {
		return nil, false
	}
	return o.SupportsDirectStream, true
}

// HasSupportsDirectStream returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasSupportsDirectStream() bool {
	if o != nil && !IsNil(o.SupportsDirectStream) {
		return true
	}

	return false
}

// SetSupportsDirectStream gets a reference to the given bool and assigns it to the SupportsDirectStream field.
func (o *MediaSourceInfo) SetSupportsDirectStream(v bool) {
	o.SupportsDirectStream = &v
}

// GetSupportsDirectPlay returns the SupportsDirectPlay field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetSupportsDirectPlay() bool {
	if o == nil || IsNil(o.SupportsDirectPlay) {
		var ret bool
		return ret
	}
	return *o.SupportsDirectPlay
}

// GetSupportsDirectPlayOk returns a tuple with the SupportsDirectPlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetSupportsDirectPlayOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsDirectPlay) {
		return nil, false
	}
	return o.SupportsDirectPlay, true
}

// HasSupportsDirectPlay returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasSupportsDirectPlay() bool {
	if o != nil && !IsNil(o.SupportsDirectPlay) {
		return true
	}

	return false
}

// SetSupportsDirectPlay gets a reference to the given bool and assigns it to the SupportsDirectPlay field.
func (o *MediaSourceInfo) SetSupportsDirectPlay(v bool) {
	o.SupportsDirectPlay = &v
}

// GetIsInfiniteStream returns the IsInfiniteStream field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetIsInfiniteStream() bool {
	if o == nil || IsNil(o.IsInfiniteStream) {
		var ret bool
		return ret
	}
	return *o.IsInfiniteStream
}

// GetIsInfiniteStreamOk returns a tuple with the IsInfiniteStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetIsInfiniteStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInfiniteStream) {
		return nil, false
	}
	return o.IsInfiniteStream, true
}

// HasIsInfiniteStream returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasIsInfiniteStream() bool {
	if o != nil && !IsNil(o.IsInfiniteStream) {
		return true
	}

	return false
}

// SetIsInfiniteStream gets a reference to the given bool and assigns it to the IsInfiniteStream field.
func (o *MediaSourceInfo) SetIsInfiniteStream(v bool) {
	o.IsInfiniteStream = &v
}

// GetUseMostCompatibleTranscodingProfile returns the UseMostCompatibleTranscodingProfile field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetUseMostCompatibleTranscodingProfile() bool {
	if o == nil || IsNil(o.UseMostCompatibleTranscodingProfile) {
		var ret bool
		return ret
	}
	return *o.UseMostCompatibleTranscodingProfile
}

// GetUseMostCompatibleTranscodingProfileOk returns a tuple with the UseMostCompatibleTranscodingProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetUseMostCompatibleTranscodingProfileOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMostCompatibleTranscodingProfile) {
		return nil, false
	}
	return o.UseMostCompatibleTranscodingProfile, true
}

// HasUseMostCompatibleTranscodingProfile returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasUseMostCompatibleTranscodingProfile() bool {
	if o != nil && !IsNil(o.UseMostCompatibleTranscodingProfile) {
		return true
	}

	return false
}

// SetUseMostCompatibleTranscodingProfile gets a reference to the given bool and assigns it to the UseMostCompatibleTranscodingProfile field.
func (o *MediaSourceInfo) SetUseMostCompatibleTranscodingProfile(v bool) {
	o.UseMostCompatibleTranscodingProfile = &v
}

// GetRequiresOpening returns the RequiresOpening field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetRequiresOpening() bool {
	if o == nil || IsNil(o.RequiresOpening) {
		var ret bool
		return ret
	}
	return *o.RequiresOpening
}

// GetRequiresOpeningOk returns a tuple with the RequiresOpening field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetRequiresOpeningOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresOpening) {
		return nil, false
	}
	return o.RequiresOpening, true
}

// HasRequiresOpening returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasRequiresOpening() bool {
	if o != nil && !IsNil(o.RequiresOpening) {
		return true
	}

	return false
}

// SetRequiresOpening gets a reference to the given bool and assigns it to the RequiresOpening field.
func (o *MediaSourceInfo) SetRequiresOpening(v bool) {
	o.RequiresOpening = &v
}

// GetOpenToken returns the OpenToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetOpenToken() string {
	if o == nil || IsNil(o.OpenToken.Get()) {
		var ret string
		return ret
	}
	return *o.OpenToken.Get()
}

// GetOpenTokenOk returns a tuple with the OpenToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetOpenTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenToken.Get(), o.OpenToken.IsSet()
}

// HasOpenToken returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasOpenToken() bool {
	if o != nil && o.OpenToken.IsSet() {
		return true
	}

	return false
}

// SetOpenToken gets a reference to the given NullableString and assigns it to the OpenToken field.
func (o *MediaSourceInfo) SetOpenToken(v string) {
	o.OpenToken.Set(&v)
}
// SetOpenTokenNil sets the value for OpenToken to be an explicit nil
func (o *MediaSourceInfo) SetOpenTokenNil() {
	o.OpenToken.Set(nil)
}

// UnsetOpenToken ensures that no value is present for OpenToken, not even an explicit nil
func (o *MediaSourceInfo) UnsetOpenToken() {
	o.OpenToken.Unset()
}

// GetRequiresClosing returns the RequiresClosing field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetRequiresClosing() bool {
	if o == nil || IsNil(o.RequiresClosing) {
		var ret bool
		return ret
	}
	return *o.RequiresClosing
}

// GetRequiresClosingOk returns a tuple with the RequiresClosing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetRequiresClosingOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresClosing) {
		return nil, false
	}
	return o.RequiresClosing, true
}

// HasRequiresClosing returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasRequiresClosing() bool {
	if o != nil && !IsNil(o.RequiresClosing) {
		return true
	}

	return false
}

// SetRequiresClosing gets a reference to the given bool and assigns it to the RequiresClosing field.
func (o *MediaSourceInfo) SetRequiresClosing(v bool) {
	o.RequiresClosing = &v
}

// GetLiveStreamId returns the LiveStreamId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetLiveStreamId() string {
	if o == nil || IsNil(o.LiveStreamId.Get()) {
		var ret string
		return ret
	}
	return *o.LiveStreamId.Get()
}

// GetLiveStreamIdOk returns a tuple with the LiveStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetLiveStreamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiveStreamId.Get(), o.LiveStreamId.IsSet()
}

// HasLiveStreamId returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasLiveStreamId() bool {
	if o != nil && o.LiveStreamId.IsSet() {
		return true
	}

	return false
}

// SetLiveStreamId gets a reference to the given NullableString and assigns it to the LiveStreamId field.
func (o *MediaSourceInfo) SetLiveStreamId(v string) {
	o.LiveStreamId.Set(&v)
}
// SetLiveStreamIdNil sets the value for LiveStreamId to be an explicit nil
func (o *MediaSourceInfo) SetLiveStreamIdNil() {
	o.LiveStreamId.Set(nil)
}

// UnsetLiveStreamId ensures that no value is present for LiveStreamId, not even an explicit nil
func (o *MediaSourceInfo) UnsetLiveStreamId() {
	o.LiveStreamId.Unset()
}

// GetBufferMs returns the BufferMs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetBufferMs() int32 {
	if o == nil || IsNil(o.BufferMs.Get()) {
		var ret int32
		return ret
	}
	return *o.BufferMs.Get()
}

// GetBufferMsOk returns a tuple with the BufferMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetBufferMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BufferMs.Get(), o.BufferMs.IsSet()
}

// HasBufferMs returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasBufferMs() bool {
	if o != nil && o.BufferMs.IsSet() {
		return true
	}

	return false
}

// SetBufferMs gets a reference to the given NullableInt32 and assigns it to the BufferMs field.
func (o *MediaSourceInfo) SetBufferMs(v int32) {
	o.BufferMs.Set(&v)
}
// SetBufferMsNil sets the value for BufferMs to be an explicit nil
func (o *MediaSourceInfo) SetBufferMsNil() {
	o.BufferMs.Set(nil)
}

// UnsetBufferMs ensures that no value is present for BufferMs, not even an explicit nil
func (o *MediaSourceInfo) UnsetBufferMs() {
	o.BufferMs.Unset()
}

// GetRequiresLooping returns the RequiresLooping field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetRequiresLooping() bool {
	if o == nil || IsNil(o.RequiresLooping) {
		var ret bool
		return ret
	}
	return *o.RequiresLooping
}

// GetRequiresLoopingOk returns a tuple with the RequiresLooping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetRequiresLoopingOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresLooping) {
		return nil, false
	}
	return o.RequiresLooping, true
}

// HasRequiresLooping returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasRequiresLooping() bool {
	if o != nil && !IsNil(o.RequiresLooping) {
		return true
	}

	return false
}

// SetRequiresLooping gets a reference to the given bool and assigns it to the RequiresLooping field.
func (o *MediaSourceInfo) SetRequiresLooping(v bool) {
	o.RequiresLooping = &v
}

// GetSupportsProbing returns the SupportsProbing field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetSupportsProbing() bool {
	if o == nil || IsNil(o.SupportsProbing) {
		var ret bool
		return ret
	}
	return *o.SupportsProbing
}

// GetSupportsProbingOk returns a tuple with the SupportsProbing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetSupportsProbingOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsProbing) {
		return nil, false
	}
	return o.SupportsProbing, true
}

// HasSupportsProbing returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasSupportsProbing() bool {
	if o != nil && !IsNil(o.SupportsProbing) {
		return true
	}

	return false
}

// SetSupportsProbing gets a reference to the given bool and assigns it to the SupportsProbing field.
func (o *MediaSourceInfo) SetSupportsProbing(v bool) {
	o.SupportsProbing = &v
}

// GetVideoType returns the VideoType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetVideoType() VideoType {
	if o == nil || IsNil(o.VideoType.Get()) {
		var ret VideoType
		return ret
	}
	return *o.VideoType.Get()
}

// GetVideoTypeOk returns a tuple with the VideoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetVideoTypeOk() (*VideoType, bool) {
	if o == nil {
		return nil, false
	}
	return o.VideoType.Get(), o.VideoType.IsSet()
}

// HasVideoType returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasVideoType() bool {
	if o != nil && o.VideoType.IsSet() {
		return true
	}

	return false
}

// SetVideoType gets a reference to the given NullableVideoType and assigns it to the VideoType field.
func (o *MediaSourceInfo) SetVideoType(v VideoType) {
	o.VideoType.Set(&v)
}
// SetVideoTypeNil sets the value for VideoType to be an explicit nil
func (o *MediaSourceInfo) SetVideoTypeNil() {
	o.VideoType.Set(nil)
}

// UnsetVideoType ensures that no value is present for VideoType, not even an explicit nil
func (o *MediaSourceInfo) UnsetVideoType() {
	o.VideoType.Unset()
}

// GetIsoType returns the IsoType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetIsoType() IsoType {
	if o == nil || IsNil(o.IsoType.Get()) {
		var ret IsoType
		return ret
	}
	return *o.IsoType.Get()
}

// GetIsoTypeOk returns a tuple with the IsoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetIsoTypeOk() (*IsoType, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsoType.Get(), o.IsoType.IsSet()
}

// HasIsoType returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasIsoType() bool {
	if o != nil && o.IsoType.IsSet() {
		return true
	}

	return false
}

// SetIsoType gets a reference to the given NullableIsoType and assigns it to the IsoType field.
func (o *MediaSourceInfo) SetIsoType(v IsoType) {
	o.IsoType.Set(&v)
}
// SetIsoTypeNil sets the value for IsoType to be an explicit nil
func (o *MediaSourceInfo) SetIsoTypeNil() {
	o.IsoType.Set(nil)
}

// UnsetIsoType ensures that no value is present for IsoType, not even an explicit nil
func (o *MediaSourceInfo) UnsetIsoType() {
	o.IsoType.Unset()
}

// GetVideo3DFormat returns the Video3DFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetVideo3DFormat() Video3DFormat {
	if o == nil || IsNil(o.Video3DFormat.Get()) {
		var ret Video3DFormat
		return ret
	}
	return *o.Video3DFormat.Get()
}

// GetVideo3DFormatOk returns a tuple with the Video3DFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetVideo3DFormatOk() (*Video3DFormat, bool) {
	if o == nil {
		return nil, false
	}
	return o.Video3DFormat.Get(), o.Video3DFormat.IsSet()
}

// HasVideo3DFormat returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasVideo3DFormat() bool {
	if o != nil && o.Video3DFormat.IsSet() {
		return true
	}

	return false
}

// SetVideo3DFormat gets a reference to the given NullableVideo3DFormat and assigns it to the Video3DFormat field.
func (o *MediaSourceInfo) SetVideo3DFormat(v Video3DFormat) {
	o.Video3DFormat.Set(&v)
}
// SetVideo3DFormatNil sets the value for Video3DFormat to be an explicit nil
func (o *MediaSourceInfo) SetVideo3DFormatNil() {
	o.Video3DFormat.Set(nil)
}

// UnsetVideo3DFormat ensures that no value is present for Video3DFormat, not even an explicit nil
func (o *MediaSourceInfo) UnsetVideo3DFormat() {
	o.Video3DFormat.Unset()
}

// GetMediaStreams returns the MediaStreams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetMediaStreams() []MediaStream {
	if o == nil {
		var ret []MediaStream
		return ret
	}
	return o.MediaStreams
}

// GetMediaStreamsOk returns a tuple with the MediaStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetMediaStreamsOk() ([]MediaStream, bool) {
	if o == nil || IsNil(o.MediaStreams) {
		return nil, false
	}
	return o.MediaStreams, true
}

// HasMediaStreams returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasMediaStreams() bool {
	if o != nil && !IsNil(o.MediaStreams) {
		return true
	}

	return false
}

// SetMediaStreams gets a reference to the given []MediaStream and assigns it to the MediaStreams field.
func (o *MediaSourceInfo) SetMediaStreams(v []MediaStream) {
	o.MediaStreams = v
}

// GetMediaAttachments returns the MediaAttachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetMediaAttachments() []MediaAttachment {
	if o == nil {
		var ret []MediaAttachment
		return ret
	}
	return o.MediaAttachments
}

// GetMediaAttachmentsOk returns a tuple with the MediaAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetMediaAttachmentsOk() ([]MediaAttachment, bool) {
	if o == nil || IsNil(o.MediaAttachments) {
		return nil, false
	}
	return o.MediaAttachments, true
}

// HasMediaAttachments returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasMediaAttachments() bool {
	if o != nil && !IsNil(o.MediaAttachments) {
		return true
	}

	return false
}

// SetMediaAttachments gets a reference to the given []MediaAttachment and assigns it to the MediaAttachments field.
func (o *MediaSourceInfo) SetMediaAttachments(v []MediaAttachment) {
	o.MediaAttachments = v
}

// GetFormats returns the Formats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetFormats() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Formats
}

// GetFormatsOk returns a tuple with the Formats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetFormatsOk() ([]string, bool) {
	if o == nil || IsNil(o.Formats) {
		return nil, false
	}
	return o.Formats, true
}

// HasFormats returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasFormats() bool {
	if o != nil && !IsNil(o.Formats) {
		return true
	}

	return false
}

// SetFormats gets a reference to the given []string and assigns it to the Formats field.
func (o *MediaSourceInfo) SetFormats(v []string) {
	o.Formats = v
}

// GetBitrate returns the Bitrate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetBitrate() int32 {
	if o == nil || IsNil(o.Bitrate.Get()) {
		var ret int32
		return ret
	}
	return *o.Bitrate.Get()
}

// GetBitrateOk returns a tuple with the Bitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetBitrateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bitrate.Get(), o.Bitrate.IsSet()
}

// HasBitrate returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasBitrate() bool {
	if o != nil && o.Bitrate.IsSet() {
		return true
	}

	return false
}

// SetBitrate gets a reference to the given NullableInt32 and assigns it to the Bitrate field.
func (o *MediaSourceInfo) SetBitrate(v int32) {
	o.Bitrate.Set(&v)
}
// SetBitrateNil sets the value for Bitrate to be an explicit nil
func (o *MediaSourceInfo) SetBitrateNil() {
	o.Bitrate.Set(nil)
}

// UnsetBitrate ensures that no value is present for Bitrate, not even an explicit nil
func (o *MediaSourceInfo) UnsetBitrate() {
	o.Bitrate.Unset()
}

// GetFallbackMaxStreamingBitrate returns the FallbackMaxStreamingBitrate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetFallbackMaxStreamingBitrate() int32 {
	if o == nil || IsNil(o.FallbackMaxStreamingBitrate.Get()) {
		var ret int32
		return ret
	}
	return *o.FallbackMaxStreamingBitrate.Get()
}

// GetFallbackMaxStreamingBitrateOk returns a tuple with the FallbackMaxStreamingBitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetFallbackMaxStreamingBitrateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackMaxStreamingBitrate.Get(), o.FallbackMaxStreamingBitrate.IsSet()
}

// HasFallbackMaxStreamingBitrate returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasFallbackMaxStreamingBitrate() bool {
	if o != nil && o.FallbackMaxStreamingBitrate.IsSet() {
		return true
	}

	return false
}

// SetFallbackMaxStreamingBitrate gets a reference to the given NullableInt32 and assigns it to the FallbackMaxStreamingBitrate field.
func (o *MediaSourceInfo) SetFallbackMaxStreamingBitrate(v int32) {
	o.FallbackMaxStreamingBitrate.Set(&v)
}
// SetFallbackMaxStreamingBitrateNil sets the value for FallbackMaxStreamingBitrate to be an explicit nil
func (o *MediaSourceInfo) SetFallbackMaxStreamingBitrateNil() {
	o.FallbackMaxStreamingBitrate.Set(nil)
}

// UnsetFallbackMaxStreamingBitrate ensures that no value is present for FallbackMaxStreamingBitrate, not even an explicit nil
func (o *MediaSourceInfo) UnsetFallbackMaxStreamingBitrate() {
	o.FallbackMaxStreamingBitrate.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetTimestamp() TransportStreamTimestamp {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret TransportStreamTimestamp
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetTimestampOk() (*TransportStreamTimestamp, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTransportStreamTimestamp and assigns it to the Timestamp field.
func (o *MediaSourceInfo) SetTimestamp(v TransportStreamTimestamp) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *MediaSourceInfo) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *MediaSourceInfo) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetRequiredHttpHeaders returns the RequiredHttpHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetRequiredHttpHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.RequiredHttpHeaders
}

// GetRequiredHttpHeadersOk returns a tuple with the RequiredHttpHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetRequiredHttpHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.RequiredHttpHeaders) {
		return nil, false
	}
	return &o.RequiredHttpHeaders, true
}

// HasRequiredHttpHeaders returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasRequiredHttpHeaders() bool {
	if o != nil && !IsNil(o.RequiredHttpHeaders) {
		return true
	}

	return false
}

// SetRequiredHttpHeaders gets a reference to the given map[string]string and assigns it to the RequiredHttpHeaders field.
func (o *MediaSourceInfo) SetRequiredHttpHeaders(v map[string]string) {
	o.RequiredHttpHeaders = v
}

// GetTranscodingUrl returns the TranscodingUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetTranscodingUrl() string {
	if o == nil || IsNil(o.TranscodingUrl.Get()) {
		var ret string
		return ret
	}
	return *o.TranscodingUrl.Get()
}

// GetTranscodingUrlOk returns a tuple with the TranscodingUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetTranscodingUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranscodingUrl.Get(), o.TranscodingUrl.IsSet()
}

// HasTranscodingUrl returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasTranscodingUrl() bool {
	if o != nil && o.TranscodingUrl.IsSet() {
		return true
	}

	return false
}

// SetTranscodingUrl gets a reference to the given NullableString and assigns it to the TranscodingUrl field.
func (o *MediaSourceInfo) SetTranscodingUrl(v string) {
	o.TranscodingUrl.Set(&v)
}
// SetTranscodingUrlNil sets the value for TranscodingUrl to be an explicit nil
func (o *MediaSourceInfo) SetTranscodingUrlNil() {
	o.TranscodingUrl.Set(nil)
}

// UnsetTranscodingUrl ensures that no value is present for TranscodingUrl, not even an explicit nil
func (o *MediaSourceInfo) UnsetTranscodingUrl() {
	o.TranscodingUrl.Unset()
}

// GetTranscodingSubProtocol returns the TranscodingSubProtocol field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetTranscodingSubProtocol() MediaStreamProtocol {
	if o == nil || IsNil(o.TranscodingSubProtocol) {
		var ret MediaStreamProtocol
		return ret
	}
	return *o.TranscodingSubProtocol
}

// GetTranscodingSubProtocolOk returns a tuple with the TranscodingSubProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetTranscodingSubProtocolOk() (*MediaStreamProtocol, bool) {
	if o == nil || IsNil(o.TranscodingSubProtocol) {
		return nil, false
	}
	return o.TranscodingSubProtocol, true
}

// HasTranscodingSubProtocol returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasTranscodingSubProtocol() bool {
	if o != nil && !IsNil(o.TranscodingSubProtocol) {
		return true
	}

	return false
}

// SetTranscodingSubProtocol gets a reference to the given MediaStreamProtocol and assigns it to the TranscodingSubProtocol field.
func (o *MediaSourceInfo) SetTranscodingSubProtocol(v MediaStreamProtocol) {
	o.TranscodingSubProtocol = &v
}

// GetTranscodingContainer returns the TranscodingContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetTranscodingContainer() string {
	if o == nil || IsNil(o.TranscodingContainer.Get()) {
		var ret string
		return ret
	}
	return *o.TranscodingContainer.Get()
}

// GetTranscodingContainerOk returns a tuple with the TranscodingContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetTranscodingContainerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranscodingContainer.Get(), o.TranscodingContainer.IsSet()
}

// HasTranscodingContainer returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasTranscodingContainer() bool {
	if o != nil && o.TranscodingContainer.IsSet() {
		return true
	}

	return false
}

// SetTranscodingContainer gets a reference to the given NullableString and assigns it to the TranscodingContainer field.
func (o *MediaSourceInfo) SetTranscodingContainer(v string) {
	o.TranscodingContainer.Set(&v)
}
// SetTranscodingContainerNil sets the value for TranscodingContainer to be an explicit nil
func (o *MediaSourceInfo) SetTranscodingContainerNil() {
	o.TranscodingContainer.Set(nil)
}

// UnsetTranscodingContainer ensures that no value is present for TranscodingContainer, not even an explicit nil
func (o *MediaSourceInfo) UnsetTranscodingContainer() {
	o.TranscodingContainer.Unset()
}

// GetAnalyzeDurationMs returns the AnalyzeDurationMs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetAnalyzeDurationMs() int32 {
	if o == nil || IsNil(o.AnalyzeDurationMs.Get()) {
		var ret int32
		return ret
	}
	return *o.AnalyzeDurationMs.Get()
}

// GetAnalyzeDurationMsOk returns a tuple with the AnalyzeDurationMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetAnalyzeDurationMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnalyzeDurationMs.Get(), o.AnalyzeDurationMs.IsSet()
}

// HasAnalyzeDurationMs returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasAnalyzeDurationMs() bool {
	if o != nil && o.AnalyzeDurationMs.IsSet() {
		return true
	}

	return false
}

// SetAnalyzeDurationMs gets a reference to the given NullableInt32 and assigns it to the AnalyzeDurationMs field.
func (o *MediaSourceInfo) SetAnalyzeDurationMs(v int32) {
	o.AnalyzeDurationMs.Set(&v)
}
// SetAnalyzeDurationMsNil sets the value for AnalyzeDurationMs to be an explicit nil
func (o *MediaSourceInfo) SetAnalyzeDurationMsNil() {
	o.AnalyzeDurationMs.Set(nil)
}

// UnsetAnalyzeDurationMs ensures that no value is present for AnalyzeDurationMs, not even an explicit nil
func (o *MediaSourceInfo) UnsetAnalyzeDurationMs() {
	o.AnalyzeDurationMs.Unset()
}

// GetDefaultAudioStreamIndex returns the DefaultAudioStreamIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetDefaultAudioStreamIndex() int32 {
	if o == nil || IsNil(o.DefaultAudioStreamIndex.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultAudioStreamIndex.Get()
}

// GetDefaultAudioStreamIndexOk returns a tuple with the DefaultAudioStreamIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetDefaultAudioStreamIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultAudioStreamIndex.Get(), o.DefaultAudioStreamIndex.IsSet()
}

// HasDefaultAudioStreamIndex returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasDefaultAudioStreamIndex() bool {
	if o != nil && o.DefaultAudioStreamIndex.IsSet() {
		return true
	}

	return false
}

// SetDefaultAudioStreamIndex gets a reference to the given NullableInt32 and assigns it to the DefaultAudioStreamIndex field.
func (o *MediaSourceInfo) SetDefaultAudioStreamIndex(v int32) {
	o.DefaultAudioStreamIndex.Set(&v)
}
// SetDefaultAudioStreamIndexNil sets the value for DefaultAudioStreamIndex to be an explicit nil
func (o *MediaSourceInfo) SetDefaultAudioStreamIndexNil() {
	o.DefaultAudioStreamIndex.Set(nil)
}

// UnsetDefaultAudioStreamIndex ensures that no value is present for DefaultAudioStreamIndex, not even an explicit nil
func (o *MediaSourceInfo) UnsetDefaultAudioStreamIndex() {
	o.DefaultAudioStreamIndex.Unset()
}

// GetDefaultSubtitleStreamIndex returns the DefaultSubtitleStreamIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MediaSourceInfo) GetDefaultSubtitleStreamIndex() int32 {
	if o == nil || IsNil(o.DefaultSubtitleStreamIndex.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultSubtitleStreamIndex.Get()
}

// GetDefaultSubtitleStreamIndexOk returns a tuple with the DefaultSubtitleStreamIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MediaSourceInfo) GetDefaultSubtitleStreamIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSubtitleStreamIndex.Get(), o.DefaultSubtitleStreamIndex.IsSet()
}

// HasDefaultSubtitleStreamIndex returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasDefaultSubtitleStreamIndex() bool {
	if o != nil && o.DefaultSubtitleStreamIndex.IsSet() {
		return true
	}

	return false
}

// SetDefaultSubtitleStreamIndex gets a reference to the given NullableInt32 and assigns it to the DefaultSubtitleStreamIndex field.
func (o *MediaSourceInfo) SetDefaultSubtitleStreamIndex(v int32) {
	o.DefaultSubtitleStreamIndex.Set(&v)
}
// SetDefaultSubtitleStreamIndexNil sets the value for DefaultSubtitleStreamIndex to be an explicit nil
func (o *MediaSourceInfo) SetDefaultSubtitleStreamIndexNil() {
	o.DefaultSubtitleStreamIndex.Set(nil)
}

// UnsetDefaultSubtitleStreamIndex ensures that no value is present for DefaultSubtitleStreamIndex, not even an explicit nil
func (o *MediaSourceInfo) UnsetDefaultSubtitleStreamIndex() {
	o.DefaultSubtitleStreamIndex.Unset()
}

// GetHasSegments returns the HasSegments field value if set, zero value otherwise.
func (o *MediaSourceInfo) GetHasSegments() bool {
	if o == nil || IsNil(o.HasSegments) {
		var ret bool
		return ret
	}
	return *o.HasSegments
}

// GetHasSegmentsOk returns a tuple with the HasSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaSourceInfo) GetHasSegmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasSegments) {
		return nil, false
	}
	return o.HasSegments, true
}

// HasHasSegments returns a boolean if a field has been set.
func (o *MediaSourceInfo) HasHasSegments() bool {
	if o != nil && !IsNil(o.HasSegments) {
		return true
	}

	return false
}

// SetHasSegments gets a reference to the given bool and assigns it to the HasSegments field.
func (o *MediaSourceInfo) SetHasSegments(v bool) {
	o.HasSegments = &v
}

func (o MediaSourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaSourceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Protocol) {
		toSerialize["Protocol"] = o.Protocol
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.Path.IsSet() {
		toSerialize["Path"] = o.Path.Get()
	}
	if o.EncoderPath.IsSet() {
		toSerialize["EncoderPath"] = o.EncoderPath.Get()
	}
	if o.EncoderProtocol.IsSet() {
		toSerialize["EncoderProtocol"] = o.EncoderProtocol.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if o.Container.IsSet() {
		toSerialize["Container"] = o.Container.Get()
	}
	if o.Size.IsSet() {
		toSerialize["Size"] = o.Size.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if !IsNil(o.IsRemote) {
		toSerialize["IsRemote"] = o.IsRemote
	}
	if o.ETag.IsSet() {
		toSerialize["ETag"] = o.ETag.Get()
	}
	if o.RunTimeTicks.IsSet() {
		toSerialize["RunTimeTicks"] = o.RunTimeTicks.Get()
	}
	if !IsNil(o.ReadAtNativeFramerate) {
		toSerialize["ReadAtNativeFramerate"] = o.ReadAtNativeFramerate
	}
	if !IsNil(o.IgnoreDts) {
		toSerialize["IgnoreDts"] = o.IgnoreDts
	}
	if !IsNil(o.IgnoreIndex) {
		toSerialize["IgnoreIndex"] = o.IgnoreIndex
	}
	if !IsNil(o.GenPtsInput) {
		toSerialize["GenPtsInput"] = o.GenPtsInput
	}
	if !IsNil(o.SupportsTranscoding) {
		toSerialize["SupportsTranscoding"] = o.SupportsTranscoding
	}
	if !IsNil(o.SupportsDirectStream) {
		toSerialize["SupportsDirectStream"] = o.SupportsDirectStream
	}
	if !IsNil(o.SupportsDirectPlay) {
		toSerialize["SupportsDirectPlay"] = o.SupportsDirectPlay
	}
	if !IsNil(o.IsInfiniteStream) {
		toSerialize["IsInfiniteStream"] = o.IsInfiniteStream
	}
	if !IsNil(o.UseMostCompatibleTranscodingProfile) {
		toSerialize["UseMostCompatibleTranscodingProfile"] = o.UseMostCompatibleTranscodingProfile
	}
	if !IsNil(o.RequiresOpening) {
		toSerialize["RequiresOpening"] = o.RequiresOpening
	}
	if o.OpenToken.IsSet() {
		toSerialize["OpenToken"] = o.OpenToken.Get()
	}
	if !IsNil(o.RequiresClosing) {
		toSerialize["RequiresClosing"] = o.RequiresClosing
	}
	if o.LiveStreamId.IsSet() {
		toSerialize["LiveStreamId"] = o.LiveStreamId.Get()
	}
	if o.BufferMs.IsSet() {
		toSerialize["BufferMs"] = o.BufferMs.Get()
	}
	if !IsNil(o.RequiresLooping) {
		toSerialize["RequiresLooping"] = o.RequiresLooping
	}
	if !IsNil(o.SupportsProbing) {
		toSerialize["SupportsProbing"] = o.SupportsProbing
	}
	if o.VideoType.IsSet() {
		toSerialize["VideoType"] = o.VideoType.Get()
	}
	if o.IsoType.IsSet() {
		toSerialize["IsoType"] = o.IsoType.Get()
	}
	if o.Video3DFormat.IsSet() {
		toSerialize["Video3DFormat"] = o.Video3DFormat.Get()
	}
	if o.MediaStreams != nil {
		toSerialize["MediaStreams"] = o.MediaStreams
	}
	if o.MediaAttachments != nil {
		toSerialize["MediaAttachments"] = o.MediaAttachments
	}
	if o.Formats != nil {
		toSerialize["Formats"] = o.Formats
	}
	if o.Bitrate.IsSet() {
		toSerialize["Bitrate"] = o.Bitrate.Get()
	}
	if o.FallbackMaxStreamingBitrate.IsSet() {
		toSerialize["FallbackMaxStreamingBitrate"] = o.FallbackMaxStreamingBitrate.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["Timestamp"] = o.Timestamp.Get()
	}
	if o.RequiredHttpHeaders != nil {
		toSerialize["RequiredHttpHeaders"] = o.RequiredHttpHeaders
	}
	if o.TranscodingUrl.IsSet() {
		toSerialize["TranscodingUrl"] = o.TranscodingUrl.Get()
	}
	if !IsNil(o.TranscodingSubProtocol) {
		toSerialize["TranscodingSubProtocol"] = o.TranscodingSubProtocol
	}
	if o.TranscodingContainer.IsSet() {
		toSerialize["TranscodingContainer"] = o.TranscodingContainer.Get()
	}
	if o.AnalyzeDurationMs.IsSet() {
		toSerialize["AnalyzeDurationMs"] = o.AnalyzeDurationMs.Get()
	}
	if o.DefaultAudioStreamIndex.IsSet() {
		toSerialize["DefaultAudioStreamIndex"] = o.DefaultAudioStreamIndex.Get()
	}
	if o.DefaultSubtitleStreamIndex.IsSet() {
		toSerialize["DefaultSubtitleStreamIndex"] = o.DefaultSubtitleStreamIndex.Get()
	}
	if !IsNil(o.HasSegments) {
		toSerialize["HasSegments"] = o.HasSegments
	}
	return toSerialize, nil
}

type NullableMediaSourceInfo struct {
	value *MediaSourceInfo
	isSet bool
}

func (v NullableMediaSourceInfo) Get() *MediaSourceInfo {
	return v.value
}

func (v *NullableMediaSourceInfo) Set(val *MediaSourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaSourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaSourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaSourceInfo(val *MediaSourceInfo) *NullableMediaSourceInfo {
	return &NullableMediaSourceInfo{value: val, isSet: true}
}

func (v NullableMediaSourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaSourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


