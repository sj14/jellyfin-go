/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.9.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GeneralCommandMessageData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeneralCommandMessageData{}

// GeneralCommandMessageData Gets or sets the data.
type GeneralCommandMessageData struct {
	// This exists simply to identify a set of known commands.
	Name *GeneralCommandType `json:"Name,omitempty"`
	ControllingUserId *string `json:"ControllingUserId,omitempty"`
	Arguments *map[string]string `json:"Arguments,omitempty"`
}

// NewGeneralCommandMessageData instantiates a new GeneralCommandMessageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralCommandMessageData() *GeneralCommandMessageData {
	this := GeneralCommandMessageData{}
	return &this
}

// NewGeneralCommandMessageDataWithDefaults instantiates a new GeneralCommandMessageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralCommandMessageDataWithDefaults() *GeneralCommandMessageData {
	this := GeneralCommandMessageData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GeneralCommandMessageData) GetName() GeneralCommandType {
	if o == nil || IsNil(o.Name) {
		var ret GeneralCommandType
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralCommandMessageData) GetNameOk() (*GeneralCommandType, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GeneralCommandMessageData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given GeneralCommandType and assigns it to the Name field.
func (o *GeneralCommandMessageData) SetName(v GeneralCommandType) {
	o.Name = &v
}

// GetControllingUserId returns the ControllingUserId field value if set, zero value otherwise.
func (o *GeneralCommandMessageData) GetControllingUserId() string {
	if o == nil || IsNil(o.ControllingUserId) {
		var ret string
		return ret
	}
	return *o.ControllingUserId
}

// GetControllingUserIdOk returns a tuple with the ControllingUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralCommandMessageData) GetControllingUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.ControllingUserId) {
		return nil, false
	}
	return o.ControllingUserId, true
}

// HasControllingUserId returns a boolean if a field has been set.
func (o *GeneralCommandMessageData) HasControllingUserId() bool {
	if o != nil && !IsNil(o.ControllingUserId) {
		return true
	}

	return false
}

// SetControllingUserId gets a reference to the given string and assigns it to the ControllingUserId field.
func (o *GeneralCommandMessageData) SetControllingUserId(v string) {
	o.ControllingUserId = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *GeneralCommandMessageData) GetArguments() map[string]string {
	if o == nil || IsNil(o.Arguments) {
		var ret map[string]string
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralCommandMessageData) GetArgumentsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *GeneralCommandMessageData) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given map[string]string and assigns it to the Arguments field.
func (o *GeneralCommandMessageData) SetArguments(v map[string]string) {
	o.Arguments = &v
}

func (o GeneralCommandMessageData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeneralCommandMessageData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.ControllingUserId) {
		toSerialize["ControllingUserId"] = o.ControllingUserId
	}
	if !IsNil(o.Arguments) {
		toSerialize["Arguments"] = o.Arguments
	}
	return toSerialize, nil
}

type NullableGeneralCommandMessageData struct {
	value *GeneralCommandMessageData
	isSet bool
}

func (v NullableGeneralCommandMessageData) Get() *GeneralCommandMessageData {
	return v.value
}

func (v *NullableGeneralCommandMessageData) Set(val *GeneralCommandMessageData) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralCommandMessageData) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralCommandMessageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralCommandMessageData(val *GeneralCommandMessageData) *NullableGeneralCommandMessageData {
	return &NullableGeneralCommandMessageData{value: val, isSet: true}
}

func (v NullableGeneralCommandMessageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralCommandMessageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


