/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CustomDatabaseOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomDatabaseOptions{}

// CustomDatabaseOptions Defines the options for a custom database connector.
type CustomDatabaseOptions struct {
	// Gets or sets the Plugin name to search for database providers.
	PluginName *string `json:"PluginName,omitempty"`
	// Gets or sets the plugin assembly to search for providers.
	PluginAssembly *string `json:"PluginAssembly,omitempty"`
	// Gets or sets the connection string for the custom database provider.
	ConnectionString *string `json:"ConnectionString,omitempty"`
	// Gets or sets the list of extra options for the custom provider.
	Options []CustomDatabaseOption `json:"Options,omitempty"`
}

// NewCustomDatabaseOptions instantiates a new CustomDatabaseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomDatabaseOptions() *CustomDatabaseOptions {
	this := CustomDatabaseOptions{}
	return &this
}

// NewCustomDatabaseOptionsWithDefaults instantiates a new CustomDatabaseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomDatabaseOptionsWithDefaults() *CustomDatabaseOptions {
	this := CustomDatabaseOptions{}
	return &this
}

// GetPluginName returns the PluginName field value if set, zero value otherwise.
func (o *CustomDatabaseOptions) GetPluginName() string {
	if o == nil || IsNil(o.PluginName) {
		var ret string
		return ret
	}
	return *o.PluginName
}

// GetPluginNameOk returns a tuple with the PluginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatabaseOptions) GetPluginNameOk() (*string, bool) {
	if o == nil || IsNil(o.PluginName) {
		return nil, false
	}
	return o.PluginName, true
}

// HasPluginName returns a boolean if a field has been set.
func (o *CustomDatabaseOptions) HasPluginName() bool {
	if o != nil && !IsNil(o.PluginName) {
		return true
	}

	return false
}

// SetPluginName gets a reference to the given string and assigns it to the PluginName field.
func (o *CustomDatabaseOptions) SetPluginName(v string) {
	o.PluginName = &v
}

// GetPluginAssembly returns the PluginAssembly field value if set, zero value otherwise.
func (o *CustomDatabaseOptions) GetPluginAssembly() string {
	if o == nil || IsNil(o.PluginAssembly) {
		var ret string
		return ret
	}
	return *o.PluginAssembly
}

// GetPluginAssemblyOk returns a tuple with the PluginAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatabaseOptions) GetPluginAssemblyOk() (*string, bool) {
	if o == nil || IsNil(o.PluginAssembly) {
		return nil, false
	}
	return o.PluginAssembly, true
}

// HasPluginAssembly returns a boolean if a field has been set.
func (o *CustomDatabaseOptions) HasPluginAssembly() bool {
	if o != nil && !IsNil(o.PluginAssembly) {
		return true
	}

	return false
}

// SetPluginAssembly gets a reference to the given string and assigns it to the PluginAssembly field.
func (o *CustomDatabaseOptions) SetPluginAssembly(v string) {
	o.PluginAssembly = &v
}

// GetConnectionString returns the ConnectionString field value if set, zero value otherwise.
func (o *CustomDatabaseOptions) GetConnectionString() string {
	if o == nil || IsNil(o.ConnectionString) {
		var ret string
		return ret
	}
	return *o.ConnectionString
}

// GetConnectionStringOk returns a tuple with the ConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatabaseOptions) GetConnectionStringOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionString) {
		return nil, false
	}
	return o.ConnectionString, true
}

// HasConnectionString returns a boolean if a field has been set.
func (o *CustomDatabaseOptions) HasConnectionString() bool {
	if o != nil && !IsNil(o.ConnectionString) {
		return true
	}

	return false
}

// SetConnectionString gets a reference to the given string and assigns it to the ConnectionString field.
func (o *CustomDatabaseOptions) SetConnectionString(v string) {
	o.ConnectionString = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CustomDatabaseOptions) GetOptions() []CustomDatabaseOption {
	if o == nil || IsNil(o.Options) {
		var ret []CustomDatabaseOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatabaseOptions) GetOptionsOk() ([]CustomDatabaseOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CustomDatabaseOptions) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []CustomDatabaseOption and assigns it to the Options field.
func (o *CustomDatabaseOptions) SetOptions(v []CustomDatabaseOption) {
	o.Options = v
}

func (o CustomDatabaseOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomDatabaseOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PluginName) {
		toSerialize["PluginName"] = o.PluginName
	}
	if !IsNil(o.PluginAssembly) {
		toSerialize["PluginAssembly"] = o.PluginAssembly
	}
	if !IsNil(o.ConnectionString) {
		toSerialize["ConnectionString"] = o.ConnectionString
	}
	if !IsNil(o.Options) {
		toSerialize["Options"] = o.Options
	}
	return toSerialize, nil
}

type NullableCustomDatabaseOptions struct {
	value *CustomDatabaseOptions
	isSet bool
}

func (v NullableCustomDatabaseOptions) Get() *CustomDatabaseOptions {
	return v.value
}

func (v *NullableCustomDatabaseOptions) Set(val *CustomDatabaseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomDatabaseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomDatabaseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomDatabaseOptions(val *CustomDatabaseOptions) *NullableCustomDatabaseOptions {
	return &NullableCustomDatabaseOptions{value: val, isSet: true}
}

func (v NullableCustomDatabaseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomDatabaseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


