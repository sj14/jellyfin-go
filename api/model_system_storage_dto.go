/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SystemStorageDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemStorageDto{}

// SystemStorageDto Contains informations about the systems storage.
type SystemStorageDto struct {
	// Gets or sets the Storage information of the program data folder.
	ProgramDataFolder *FolderStorageDto `json:"ProgramDataFolder,omitempty"`
	// Gets or sets the Storage information of the web UI resources folder.
	WebFolder *FolderStorageDto `json:"WebFolder,omitempty"`
	// Gets or sets the Storage information of the folder where images are cached.
	ImageCacheFolder *FolderStorageDto `json:"ImageCacheFolder,omitempty"`
	// Gets or sets the Storage information of the cache folder.
	CacheFolder *FolderStorageDto `json:"CacheFolder,omitempty"`
	// Gets or sets the Storage information of the folder where logfiles are saved to.
	LogFolder *FolderStorageDto `json:"LogFolder,omitempty"`
	// Gets or sets the Storage information of the folder where metadata is stored.
	InternalMetadataFolder *FolderStorageDto `json:"InternalMetadataFolder,omitempty"`
	// Gets or sets the Storage information of the transcoding cache.
	TranscodingTempFolder *FolderStorageDto `json:"TranscodingTempFolder,omitempty"`
	// Gets or sets the storage informations of all libraries.
	Libraries []LibraryStorageDto `json:"Libraries,omitempty"`
}

// NewSystemStorageDto instantiates a new SystemStorageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemStorageDto() *SystemStorageDto {
	this := SystemStorageDto{}
	return &this
}

// NewSystemStorageDtoWithDefaults instantiates a new SystemStorageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemStorageDtoWithDefaults() *SystemStorageDto {
	this := SystemStorageDto{}
	return &this
}

// GetProgramDataFolder returns the ProgramDataFolder field value if set, zero value otherwise.
func (o *SystemStorageDto) GetProgramDataFolder() FolderStorageDto {
	if o == nil || IsNil(o.ProgramDataFolder) {
		var ret FolderStorageDto
		return ret
	}
	return *o.ProgramDataFolder
}

// GetProgramDataFolderOk returns a tuple with the ProgramDataFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStorageDto) GetProgramDataFolderOk() (*FolderStorageDto, bool) {
	if o == nil || IsNil(o.ProgramDataFolder) {
		return nil, false
	}
	return o.ProgramDataFolder, true
}

// HasProgramDataFolder returns a boolean if a field has been set.
func (o *SystemStorageDto) HasProgramDataFolder() bool {
	if o != nil && !IsNil(o.ProgramDataFolder) {
		return true
	}

	return false
}

// SetProgramDataFolder gets a reference to the given FolderStorageDto and assigns it to the ProgramDataFolder field.
func (o *SystemStorageDto) SetProgramDataFolder(v FolderStorageDto) {
	o.ProgramDataFolder = &v
}

// GetWebFolder returns the WebFolder field value if set, zero value otherwise.
func (o *SystemStorageDto) GetWebFolder() FolderStorageDto {
	if o == nil || IsNil(o.WebFolder) {
		var ret FolderStorageDto
		return ret
	}
	return *o.WebFolder
}

// GetWebFolderOk returns a tuple with the WebFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStorageDto) GetWebFolderOk() (*FolderStorageDto, bool) {
	if o == nil || IsNil(o.WebFolder) {
		return nil, false
	}
	return o.WebFolder, true
}

// HasWebFolder returns a boolean if a field has been set.
func (o *SystemStorageDto) HasWebFolder() bool {
	if o != nil && !IsNil(o.WebFolder) {
		return true
	}

	return false
}

// SetWebFolder gets a reference to the given FolderStorageDto and assigns it to the WebFolder field.
func (o *SystemStorageDto) SetWebFolder(v FolderStorageDto) {
	o.WebFolder = &v
}

// GetImageCacheFolder returns the ImageCacheFolder field value if set, zero value otherwise.
func (o *SystemStorageDto) GetImageCacheFolder() FolderStorageDto {
	if o == nil || IsNil(o.ImageCacheFolder) {
		var ret FolderStorageDto
		return ret
	}
	return *o.ImageCacheFolder
}

// GetImageCacheFolderOk returns a tuple with the ImageCacheFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStorageDto) GetImageCacheFolderOk() (*FolderStorageDto, bool) {
	if o == nil || IsNil(o.ImageCacheFolder) {
		return nil, false
	}
	return o.ImageCacheFolder, true
}

// HasImageCacheFolder returns a boolean if a field has been set.
func (o *SystemStorageDto) HasImageCacheFolder() bool {
	if o != nil && !IsNil(o.ImageCacheFolder) {
		return true
	}

	return false
}

// SetImageCacheFolder gets a reference to the given FolderStorageDto and assigns it to the ImageCacheFolder field.
func (o *SystemStorageDto) SetImageCacheFolder(v FolderStorageDto) {
	o.ImageCacheFolder = &v
}

// GetCacheFolder returns the CacheFolder field value if set, zero value otherwise.
func (o *SystemStorageDto) GetCacheFolder() FolderStorageDto {
	if o == nil || IsNil(o.CacheFolder) {
		var ret FolderStorageDto
		return ret
	}
	return *o.CacheFolder
}

// GetCacheFolderOk returns a tuple with the CacheFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStorageDto) GetCacheFolderOk() (*FolderStorageDto, bool) {
	if o == nil || IsNil(o.CacheFolder) {
		return nil, false
	}
	return o.CacheFolder, true
}

// HasCacheFolder returns a boolean if a field has been set.
func (o *SystemStorageDto) HasCacheFolder() bool {
	if o != nil && !IsNil(o.CacheFolder) {
		return true
	}

	return false
}

// SetCacheFolder gets a reference to the given FolderStorageDto and assigns it to the CacheFolder field.
func (o *SystemStorageDto) SetCacheFolder(v FolderStorageDto) {
	o.CacheFolder = &v
}

// GetLogFolder returns the LogFolder field value if set, zero value otherwise.
func (o *SystemStorageDto) GetLogFolder() FolderStorageDto {
	if o == nil || IsNil(o.LogFolder) {
		var ret FolderStorageDto
		return ret
	}
	return *o.LogFolder
}

// GetLogFolderOk returns a tuple with the LogFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStorageDto) GetLogFolderOk() (*FolderStorageDto, bool) {
	if o == nil || IsNil(o.LogFolder) {
		return nil, false
	}
	return o.LogFolder, true
}

// HasLogFolder returns a boolean if a field has been set.
func (o *SystemStorageDto) HasLogFolder() bool {
	if o != nil && !IsNil(o.LogFolder) {
		return true
	}

	return false
}

// SetLogFolder gets a reference to the given FolderStorageDto and assigns it to the LogFolder field.
func (o *SystemStorageDto) SetLogFolder(v FolderStorageDto) {
	o.LogFolder = &v
}

// GetInternalMetadataFolder returns the InternalMetadataFolder field value if set, zero value otherwise.
func (o *SystemStorageDto) GetInternalMetadataFolder() FolderStorageDto {
	if o == nil || IsNil(o.InternalMetadataFolder) {
		var ret FolderStorageDto
		return ret
	}
	return *o.InternalMetadataFolder
}

// GetInternalMetadataFolderOk returns a tuple with the InternalMetadataFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStorageDto) GetInternalMetadataFolderOk() (*FolderStorageDto, bool) {
	if o == nil || IsNil(o.InternalMetadataFolder) {
		return nil, false
	}
	return o.InternalMetadataFolder, true
}

// HasInternalMetadataFolder returns a boolean if a field has been set.
func (o *SystemStorageDto) HasInternalMetadataFolder() bool {
	if o != nil && !IsNil(o.InternalMetadataFolder) {
		return true
	}

	return false
}

// SetInternalMetadataFolder gets a reference to the given FolderStorageDto and assigns it to the InternalMetadataFolder field.
func (o *SystemStorageDto) SetInternalMetadataFolder(v FolderStorageDto) {
	o.InternalMetadataFolder = &v
}

// GetTranscodingTempFolder returns the TranscodingTempFolder field value if set, zero value otherwise.
func (o *SystemStorageDto) GetTranscodingTempFolder() FolderStorageDto {
	if o == nil || IsNil(o.TranscodingTempFolder) {
		var ret FolderStorageDto
		return ret
	}
	return *o.TranscodingTempFolder
}

// GetTranscodingTempFolderOk returns a tuple with the TranscodingTempFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStorageDto) GetTranscodingTempFolderOk() (*FolderStorageDto, bool) {
	if o == nil || IsNil(o.TranscodingTempFolder) {
		return nil, false
	}
	return o.TranscodingTempFolder, true
}

// HasTranscodingTempFolder returns a boolean if a field has been set.
func (o *SystemStorageDto) HasTranscodingTempFolder() bool {
	if o != nil && !IsNil(o.TranscodingTempFolder) {
		return true
	}

	return false
}

// SetTranscodingTempFolder gets a reference to the given FolderStorageDto and assigns it to the TranscodingTempFolder field.
func (o *SystemStorageDto) SetTranscodingTempFolder(v FolderStorageDto) {
	o.TranscodingTempFolder = &v
}

// GetLibraries returns the Libraries field value if set, zero value otherwise.
func (o *SystemStorageDto) GetLibraries() []LibraryStorageDto {
	if o == nil || IsNil(o.Libraries) {
		var ret []LibraryStorageDto
		return ret
	}
	return o.Libraries
}

// GetLibrariesOk returns a tuple with the Libraries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemStorageDto) GetLibrariesOk() ([]LibraryStorageDto, bool) {
	if o == nil || IsNil(o.Libraries) {
		return nil, false
	}
	return o.Libraries, true
}

// HasLibraries returns a boolean if a field has been set.
func (o *SystemStorageDto) HasLibraries() bool {
	if o != nil && !IsNil(o.Libraries) {
		return true
	}

	return false
}

// SetLibraries gets a reference to the given []LibraryStorageDto and assigns it to the Libraries field.
func (o *SystemStorageDto) SetLibraries(v []LibraryStorageDto) {
	o.Libraries = v
}

func (o SystemStorageDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemStorageDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProgramDataFolder) {
		toSerialize["ProgramDataFolder"] = o.ProgramDataFolder
	}
	if !IsNil(o.WebFolder) {
		toSerialize["WebFolder"] = o.WebFolder
	}
	if !IsNil(o.ImageCacheFolder) {
		toSerialize["ImageCacheFolder"] = o.ImageCacheFolder
	}
	if !IsNil(o.CacheFolder) {
		toSerialize["CacheFolder"] = o.CacheFolder
	}
	if !IsNil(o.LogFolder) {
		toSerialize["LogFolder"] = o.LogFolder
	}
	if !IsNil(o.InternalMetadataFolder) {
		toSerialize["InternalMetadataFolder"] = o.InternalMetadataFolder
	}
	if !IsNil(o.TranscodingTempFolder) {
		toSerialize["TranscodingTempFolder"] = o.TranscodingTempFolder
	}
	if !IsNil(o.Libraries) {
		toSerialize["Libraries"] = o.Libraries
	}
	return toSerialize, nil
}

type NullableSystemStorageDto struct {
	value *SystemStorageDto
	isSet bool
}

func (v NullableSystemStorageDto) Get() *SystemStorageDto {
	return v.value
}

func (v *NullableSystemStorageDto) Set(val *SystemStorageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemStorageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemStorageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemStorageDto(val *SystemStorageDto) *NullableSystemStorageDto {
	return &NullableSystemStorageDto{value: val, isSet: true}
}

func (v NullableSystemStorageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemStorageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


